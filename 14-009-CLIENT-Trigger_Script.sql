CREATE OR REPLACE TRIGGER DAILY_TRANS_MFGR_LOSS_ROW_B
BEFORE INSERT ON T_DAILY_TRANS_MFGR_LOSS FOR EACH ROW
DECLARE
BEGIN

    :NEW.PK_ID := SYS_GUID();
             
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        NULL;
    WHEN OTHERS THEN
        RAISE_APPLICATION_ERROR (-20999, SUBSTR(SQLERRM,1,500)||DBMS_UTILITY.FORMAT_ERROR_BACKTRACE);
END;
/

CREATE OR REPLACE TRIGGER DAILY_TRANS_MFGR_SCRAP_ROW_B
BEFORE INSERT ON T_DAILY_TRANS_MFGR_SCRAP FOR EACH ROW
DECLARE
BEGIN

    :NEW.PK_ID := SYS_GUID();
             
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        NULL;
    WHEN OTHERS THEN
        RAISE_APPLICATION_ERROR (-20999, SUBSTR(SQLERRM,1,500)||DBMS_UTILITY.FORMAT_ERROR_BACKTRACE);
END;
/

CREATE OR REPLACE TRIGGER SMRY_STOCK_MONTH_CLOSING_BEF
BEFORE INSERT ON T_SMRY_STOCK_MONTH_CLOSING FOR EACH ROW
DECLARE

BEGIN

    :NEW.PK_ID := SMRY_STOCK_MONTH_CLOSING.NEXTVAL;
             
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        NULL;
    WHEN OTHERS THEN
        RAISE_APPLICATION_ERROR (-20999, SUBSTR(SQLERRM,1,500)||DBMS_UTILITY.FORMAT_ERROR_BACKTRACE);
END;
/

CREATE OR REPLACE TRIGGER BEF_TRANS_ITEM_MISC_INFO
BEFORE INSERT ON T_TRANS_ITEM_MISC_INFO FOR EACH ROW
DECLARE

BEGIN

    :NEW.PK_ID := TRANS_ITEM_MISC_INFO.NEXTVAL;
             
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        NULL;
    WHEN OTHERS THEN
        RAISE_APPLICATION_ERROR (-20999, SUBSTR(SQLERRM,1,500)||DBMS_UTILITY.FORMAT_ERROR_BACKTRACE);
END;
/


CREATE OR REPLACE TRIGGER BEF_SESSION_ACTIVITY
BEFORE INSERT ON T_SESSION_ACTIVITY FOR EACH ROW
DECLARE

BEGIN

    :NEW.PK_ID := SESSION_ACTIVITY.NEXTVAL;
    :NEW.EVENT_DATE := F_GET_DATE_DBTIMEZONE;
             
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        NULL;
    WHEN OTHERS THEN
        RAISE_APPLICATION_ERROR (-20999, SUBSTR(SQLERRM,1,500)||DBMS_UTILITY.FORMAT_ERROR_BACKTRACE);
END;
/
