DROP SEQUENCE GR_WT_TOLLERANCE;

CREATE SEQUENCE GR_WT_TOLLERANCE
  START WITH 54
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  NOCACHE
  ORDER;

DROP SEQUENCE PARTY_WASTAGE_LABOUR;

CREATE SEQUENCE PARTY_WASTAGE_LABOUR
  START WITH 3
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  NOCACHE
  ORDER;

DROP TABLE T_TOURIST_DTL CASCADE CONSTRAINTS;

CREATE TABLE T_TOURIST_DTL
(
  TOURIST_DTL_ID     NUMBER(10),
  SR_NO              VARCHAR2(20 BYTE),
  VISIT_DATE         DATE,
  TOUR_COMPANY_ID    NUMBER(10),
  TOURIST_COUNT      NUMBER(10),
  VOUCHER_NO         VARCHAR2(50 BYTE),
  TOUR_GUIDE_ID      NUMBER(10),
  COUNTRY_ID         NUMBER(10),
  TOUR_NO            VARCHAR2(50 BYTE),
  NUMBER_OF_PAX      NUMBER(10),
  TIME_OF_ARRIVAL    VARCHAR2(50 BYTE),
  TIME_OF_DEPARTURE  VARCHAR2(50 BYTE),
  VEHICLE_NO         VARCHAR2(50 BYTE),
  HANDLED_BY_ID      NUMBER(10),
  REMARKS            VARCHAR2(250 BYTE),
  CALL_SLIP_NO       VARCHAR2(250 BYTE)
)
TABLESPACE SEA_TB_MISC
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE
MONITORING;


CREATE UNIQUE INDEX PK_TDI_TD ON T_TOURIST_DTL
(TOURIST_DTL_ID)
LOGGING
TABLESPACE SEA_TB_MISC
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );

ALTER TABLE T_TOURIST_DTL ADD (
  CONSTRAINT PK_TDI_TD
  PRIMARY KEY
  (TOURIST_DTL_ID)
  USING INDEX PK_TDI_TD
  ENABLE VALIDATE);

ALTER TABLE T_TOURIST_DTL ADD (
  CONSTRAINT FK_CI_RI_TD 
  FOREIGN KEY (COUNTRY_ID) 
  REFERENCES T_MISC_REGION_MASTER (REGION_ID)
  ENABLE VALIDATE,
  CONSTRAINT FK_HBI_EI_TD 
  FOREIGN KEY (HANDLED_BY_ID) 
  REFERENCES T_AUTH_EMPLOYEE_MASTER (EMPLOYEE_ID)
  ENABLE VALIDATE,
  CONSTRAINT FK_TCI_PI_TD 
  FOREIGN KEY (TOUR_COMPANY_ID) 
  REFERENCES T_PARTY_MASTER (PARTY_ID)
  ENABLE VALIDATE,
  CONSTRAINT FK_TGI_PI_TD 
  FOREIGN KEY (TOUR_GUIDE_ID) 
  REFERENCES T_PARTY_MASTER (PARTY_ID)
  ENABLE VALIDATE);

DROP TABLE T_BATCH_QC CASCADE CONSTRAINTS;

CREATE TABLE T_BATCH_QC
(
  PK_ID        NUMBER(10),
  BATCH_ID     NUMBER(10),
  QC_PARAM_ID  NUMBER(10),
  STOCK_ID     NUMBER(10)
)
TABLESPACE SEA_TB_MISC
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE
MONITORING;


CREATE UNIQUE INDEX UNQ_BQ_BTCHID_QPID_STKID ON T_BATCH_QC
(BATCH_ID, QC_PARAM_ID, STOCK_ID)
LOGGING
TABLESPACE SEA_TB_MISC
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );

ALTER TABLE T_BATCH_QC ADD (
  CONSTRAINT UNQ_BQ_BTCHID_QPID_STKID
  UNIQUE (BATCH_ID, QC_PARAM_ID, STOCK_ID)
  USING INDEX UNQ_BQ_BTCHID_QPID_STKID
  ENABLE VALIDATE);

ALTER TABLE T_BATCH_QC ADD (
  CONSTRAINT FK_BQ_BATCHID 
  FOREIGN KEY (BATCH_ID) 
  REFERENCES T_STOCK_BATCH_DTL (BATCH_ID)
  ENABLE VALIDATE,
  CONSTRAINT FK_BQ_STOCKID 
  FOREIGN KEY (STOCK_ID) 
  REFERENCES T_STOCK (STOCK_ID)
  ENABLE VALIDATE);

CREATE OR REPLACE FUNCTION KJLLC."F_CONCAT_STRING" (qryType IN VARCHAR2, qryValues IN  VARCHAR2, StrSeperator IN VARCHAR2 DEFAULT ',')
RETURN  VARCHAR2
IS
  
    arrData                     STRING_TABLE := STRING_TABLE();
    iVariantId                  V_ITEM_VARIANT_DTL.VARIANT_ID%TYPE;
    dblQty                      T_STOCK_BOM_DTL.QUANTITY%TYPE;

    RangeDataTypeId             T_FORMULA_RANGE_MASTER.RANGE_DATA_TYPE_ID%TYPE;
    RangeValueId                 T_FORMULA_RANGE_LOV_DTL.RANGE_VALUE_ID%TYPE;
    iVariantId1                 V_ITEM_VARIANT_DTL.VARIANT_ID%TYPE;
    dblQty1                     T_STOCK_BOM_DTL.QUANTITY%TYPE;
    dblCF                       T_STOCK_BOM_DTL.QUANTITY%TYPE;
    strTemp                     VARCHAR2(100);
    dtDate						DATE;
    intVendorID                 NUMBER(10);
    intLocationID               NUMBER(10);
    strDate                     VARCHAR2(10);

    strWh1      VARCHAR2(2500);
    strSql      VARCHAR2(32000);
    strReturn   VARCHAR2(32000);
    strData		VARCHAR2(100);
    intDays     PLS_INTEGER;
    intCount    PLS_INTEGER;
    ConfigId    PLS_INTEGER;
    
    dblDiaRate  NUMBER(20,7);
    dblClsRate  NUMBER(20,7);
    arrData1    STRING_TABLE := STRING_TABLE();
    dblPremRate     NUMBER(20,7);
    dblKTFineness   NUMBER(20,7);
    dblDefFineness  NUMBER(20,7);
    
    iPartyID    T_PARTY_MASTER.PARTY_ID%TYPE;
    
    strDataTypeDepdOn   VARCHAR2(10) := 'CODE';
    TYPE OBJ_VARCHAR IS RECORD ( 
        STRING_ELEM VARCHAR2(255)
    );

    TYPE T_VARCHAR IS TABLE OF OBJ_VARCHAR INDEX BY BINARY_INTEGER;
    T_VARCHAR_DATA T_VARCHAR;
    
    --TO_CHAR(RTRIM(XMLAGG(XMLELEMENT(E,SIVM.SHAPE_DESC,',').EXTRACT('//text()')).GetClobVal(),','))

BEGIN

    select BANNER 
    INTO strData
    from v$version
    where banner like 'Oracle%';

    IF qryValues IS NOT NULL THEN
        arrData := F_FILL_STRING_TABLE(iData => qryValues);
    END IF;

    IF qryType = 'LOCATION_SP' THEN
        SELECT SUBSTR(LM.LOCATION_CODE,1,1)||'-'||ROUND((SP.SELLING_PRICE/1000),0)
        BULK COLLECT INTO T_VARCHAR_DATA
        FROM T_APP_LOCATION_MASTER LM, T_STOCK_LOCATION_SP SP
        WHERE SP.LOCATION_ID = LM.LOCATION_ID AND SP.SELLING_PRICE > 0 
        AND SP.STOCK_ID = qryValues;

    ELSIF qryType = 'STONE_STOCK_BOM_QLTY' THEN
        SELECT DISTINCT QUALITY_CODE||'/'||COLOR_CODE
        BULK COLLECT INTO T_VARCHAR_DATA
        FROM T_STOCK_BOM_DTL SBD,T_SMRY_ITEM_VARIANT_STONE IVD 
        WHERE SBD.BOM_VARIANT_ID = IVD.VARIANT_ID
        AND SBD.QUANTITY > 0 AND IVD.VARIANT_ID > 0
        AND SBD.STOCK_ID = qryValues;
    
    ELSIF qryType = 'STONE_STOCK_BOM_QLTYFZ' THEN
        SELECT DISTINCT QUALITY_CODE
        BULK COLLECT INTO T_VARCHAR_DATA
        FROM T_STOCK_BOM_DTL SBD,T_SMRY_ITEM_VARIANT_STONE IVD 
        WHERE SBD.BOM_VARIANT_ID = IVD.VARIANT_ID
        AND SBD.QUANTITY > 0 AND IVD.VARIANT_ID > 0
        AND SBD.STOCK_ID = qryValues;

    ELSIF qryType = 'STONE_STOCK_BOM_QLTYFZV' THEN
        SELECT DISTINCT QUALITY_DESC
        BULK COLLECT INTO T_VARCHAR_DATA
        FROM T_STOCK_BOM_DTL SBD,T_SMRY_ITEM_VARIANT_STONE IVD 
        WHERE SBD.BOM_VARIANT_ID = IVD.VARIANT_ID
        AND SBD.QUANTITY > 0 AND IVD.VARIANT_ID > 0
        AND SBD.STOCK_ID = qryValues; 
       
    ELSIF qryType = 'METAL_STOCK_(KARAT)' THEN
        SELECT DISTINCT IVD.KARAT_DESC
        BULK COLLECT INTO T_VARCHAR_DATA
        FROM T_STOCK_BOM_DTL SBD,T_SMRY_ITEM_VARIANT_METAL  IVD 
        WHERE SBD.BOM_VARIANT_ID = IVD.VARIANT_ID
        AND SBD.QUANTITY > 0 AND IVD.VARIANT_ID > 0
        AND SBD.STOCK_ID = qryValues;  
       
    ELSIF qryType = 'VARIANT_BOM_STONE_SHAPE' THEN
        SELECT DISTINCT SIVM.SHAPE_CODE
        BULK COLLECT INTO T_VARCHAR_DATA
        FROM T_SMRY_ITEM_VARIANT_STONE SIVM,T_ITEM_VARIANT_BOM_DTL IVBD 
        WHERE IVBD.BOM_VARIANT_ID = SIVM.VARIANT_ID
        AND IVBD.MAIN_VARIANT_ID = qryValues;
    
    ELSIF qryType = 'VARIANT_BOM_CLS_SHAPE' THEN
        SELECT 
        LISTAGG_CLOB(SIVM.SHAPE_DESC)
        INTO strReturn
        FROM T_SMRY_ITEM_VARIANT_STONE SIVM,T_ITEM_VARIANT_BOM_DTL IVBD 
        WHERE IVBD.BOM_VARIANT_ID = SIVM.VARIANT_ID
        AND SIVM.ITEM_GROUP_ID <> 1504
        AND IVBD.MAIN_VARIANT_ID = qryValues;
        
        strReturn := RTRIM(LTRIM(strReturn));
        
        RETURN strReturn;
    
    ELSIF qryType = 'VARIANT_BOM_SHAPE_CLR_RANGE' THEN
        P_SEANET_CONTEXT(strAttribType => 'MISC1', strAttribValue => arrData(2));

        SELECT DISTINCT LISTAGG_CLOB(ATTRIB_ID)
        INTO strReturn
        FROM T_ITEM_ATTRIB_MASTER 
        WHERE ATTRIB_ID IN (SELECT RET_VAL FROM DATAARRAYLIST WHERE RET_TYPE = 'MISC1')
        AND ATTRIB_TYPE_ID = TO_NUMBER(arrData(1));

        RETURN strReturn;
    
    ELSIF qryType = 'TRANS_BOM_CLS_SHAPE' THEN
        SELECT LISTAGG_CLOB(CLS)
              INTO strReturn
              FROM (
                  SELECT DISTINCT INITCAP(F_GET_ATTRIBUTE(IVD.ATTRIB_TYPE_AND_VALUE,'CLS')) AS CLS
                  FROM V_ITEM_VARIANT_RTN_DTL IVD,T_TRANS_ITEM_BOM_DTL TIBD 
                  WHERE TIBD.BOM_VARIANT_ID = IVD.VARIANT_ID
                  AND IVD.ITEM_GROUP_ID <> 1504
                  AND IVD.ITEM_TYPE_ID = 1005
                  AND TIBD.TRANS_ITEM_ID = TO_NUMBER(qryValues)
                  ORDER BY INITCAP(F_GET_ATTRIBUTE(IVD.ATTRIB_TYPE_AND_VALUE,'CLS'))
        );

              strReturn := RTRIM(LTRIM(strReturn));
        
              RETURN strReturn;
    
    ELSIF qryType = 'VARIANT_BOM_METAL_KARAT_CLR' THEN
        SELECT DISTINCT SIVM.KARAT_CODE||' / '||SIVM.COLOR_CODE
        BULK COLLECT INTO T_VARCHAR_DATA
        FROM T_SMRY_ITEM_VARIANT_METAL SIVM,T_ITEM_VARIANT_BOM_DTL IVBD 
        WHERE IVBD.BOM_VARIANT_ID = SIVM.VARIANT_ID
        AND IVBD.MAIN_VARIANT_ID = qryValues;

     ELSIF qryType = 'VARIANT_BOM_METAL_KARAT' THEN
         SELECT DISTINCT SIVM.KARAT_CODE
         BULK COLLECT INTO T_VARCHAR_DATA
         FROM T_SMRY_ITEM_VARIANT_METAL SIVM,T_ITEM_VARIANT_BOM_DTL IVBD 
         WHERE IVBD.BOM_VARIANT_ID = SIVM.VARIANT_ID
         AND IVBD.MAIN_VARIANT_ID = qryValues;

     ELSIF qryType = 'VARIANT_BOM_METAL_KARAT_DESC' THEN
         SELECT DISTINCT SIVM.KARAT_DESC
         BULK COLLECT INTO T_VARCHAR_DATA
         FROM T_SMRY_ITEM_VARIANT_METAL SIVM,T_ITEM_VARIANT_BOM_DTL IVBD 
         WHERE IVBD.BOM_VARIANT_ID = SIVM.VARIANT_ID
         AND IVBD.MAIN_VARIANT_ID = qryValues;
         
     ELSIF qryType = 'VARIANT_BOM_METAL_CLR' THEN
         SELECT DISTINCT SIVM.COLOR_CODE
         BULK COLLECT INTO T_VARCHAR_DATA
         FROM T_SMRY_ITEM_VARIANT_METAL SIVM,T_ITEM_VARIANT_BOM_DTL IVBD 
         WHERE IVBD.BOM_VARIANT_ID = SIVM.VARIANT_ID
         AND IVBD.MAIN_VARIANT_ID = qryValues;

     ELSIF qryType = 'VARIANT_BOM_STONE_QLTY' THEN
         SELECT DISTINCT SIVM.QUALITY_CODE
         BULK COLLECT INTO T_VARCHAR_DATA
         FROM T_SMRY_ITEM_VARIANT_STONE SIVM,T_ITEM_VARIANT_BOM_DTL IVBD 
         WHERE IVBD.BOM_VARIANT_ID = SIVM.VARIANT_ID
         AND IVBD.MAIN_VARIANT_ID = qryValues;

     ELSIF qryType = 'VARIANT_BOM_NATIVE_SHADE' THEN
     
         SELECT DISTINCT F_GET_ATTRIBUTE_VALUE(SIVM.ATTRIB_TYPE_AND_VALUE,'SHADE')
         BULK COLLECT INTO T_VARCHAR_DATA
         FROM V_ITEM_VARIANT_RTN_DTL SIVM,T_ITEM_VARIANT_BOM_DTL IVBD 
         WHERE IVBD.BOM_VARIANT_ID = SIVM.VARIANT_ID
         AND SIVM.ITEM_TYPE_ID = 1005
         AND IVBD.MAIN_VARIANT_ID = qryValues;
  
    ELSIF qryType = 'VARIANT_SUFFIX(TRANS_ITEM_ID)' THEN
     
         SELECT DISTINCT F_GET_ATTRIBUTE_VALUE(SIVM.ATTRIB_TYPE_AND_VALUE,'SUFFIX')
         BULK COLLECT INTO T_VARCHAR_DATA
         FROM V_ITEM_VARIANT_RTN_DTL SIVM,T_TRANS_ITEM_BOM_DTL TIBD 
         WHERE TIBD.BOM_VARIANT_ID = SIVM.VARIANT_ID
         AND SIVM.ITEM_TYPE_ID = 1005
         AND TIBD.TRANS_ITEM_ID = qryValues;


     ELSIF qryType = 'VARIANT_BOM_STOCK_COLOR_MATRIX' THEN
     
         SELECT DISTINCT CLR.ATTRIB_DESC
         BULK COLLECT INTO T_VARCHAR_DATA
         FROM V_ITEM_VARIANT_RTN_DTL SIVM,T_ITEM_VARIANT_BOM_DTL IVBD,T_ITEM_ATTRIB_MASTER IAM,T_ITEM_ATTRIB_MASTER_EXTD EXTD,T_ITEM_ATTRIB_MASTER CLR 
         WHERE
         F_GET_ATTRIBUTE_VALUE(SIVM.ATTRIB_TYPE_AND_CODE,'SHADE') = IAM.ATTRIB_CODE
         AND IAM.ATTRIB_ID = EXTD.ATTRIB_ID
         AND EXTD.ATTRIB_ID1 = CLR.ATTRIB_ID
         AND EXTD.ATTRIB_ID1 >0          
         AND IVBD.BOM_VARIANT_ID = SIVM.VARIANT_ID
         AND SIVM.ITEM_TYPE_ID = 1005
         AND IVBD.MAIN_VARIANT_ID = qryValues;

     ELSIF qryType = 'BARCODE_DETAIL_FROM_TRANS' THEN

         SELECT SUBSTR(TID.STOCK_CODE,INSTR(TID.STOCK_CODE,'-',1,1)+1) 
         BULK COLLECT INTO T_VARCHAR_DATA
         FROM T_TRANS_ITEM_DTL TID
         WHERE TID.SOR_TRANS_ITEM_ID = arrData(1) 
         AND TID.TRANS_ITEM_ID <> arrData(2)
         AND TID.TRANS_ID = arrData(3);

     ELSIF qryType = 'INDEX_EXPRESSION' THEN
         SELECT COLUMN_EXPRESSION
         BULK COLLECT INTO T_VARCHAR_DATA
         FROM USER_IND_EXPRESSIONS UIC
         WHERE UIC.INDEX_NAME = qryValues;

     ELSIF qryType = 'INDEX_COLUMN' THEN
         SELECT COLUMN_NAME
         BULK COLLECT INTO T_VARCHAR_DATA
         FROM USER_IND_COLUMNS UIC
         WHERE UIC.INDEX_NAME = qryValues;

     ELSIF qryType = 'OPN_IN_ITEM_TYPE_ID' THEN
         SELECT OIMC.IN_ITEM_TYPE_ID 
         BULK COLLECT INTO T_VARCHAR_DATA
         FROM T_CONFIG_FIXED_DATA FD,T_OPERATION_MASTER OM,T_OPERATION_INOUT_MFG_CONFIG OIMC 
         WHERE OM.OPERATION_BEHAVIOUR_ID = FD.CONFIG_ID
         AND OIMC.OPERATION_ID = OM.OPERATION_ID
         AND OIMC.IN_OUT_TYPE = 1
         AND FD.CONFIG_CODE = qryValues;

     ELSIF qryType = 'TRANS_ATTRIB_CODE' THEN
         SELECT CFD.CONFIG_CODE||'|'||CASE WHEN TIAD.ATTRIB_ID >0 THEN IAM.ATTRIB_CODE ELSE TIAD.ATTRIB_VALUE END
         BULK COLLECT INTO T_VARCHAR_DATA
         FROM T_CONFIG_FIXED_DATA CFD,T_ITEM_ATTRIB_MASTER IAM,T_TRANS_ITEM_ATTRIB_DTL TIAD
         WHERE TIAD.ATTRIB_ID = IAM.ATTRIB_ID AND TIAD.ATTRIB_TYPE_ID = CFD.CONFIG_ID AND TIAD.TRANS_ITEM_ID = qryValues
         ORDER BY TIAD.ATTRIB_TYPE_ID;

     ELSIF qryType = 'TRANS_ATTRIB_DESC' THEN
         SELECT CFD.CONFIG_CODE||'|'||CASE WHEN TIAD.ATTRIB_ID >0 THEN IAM.ATTRIB_DESC ELSE TIAD.ATTRIB_VALUE END
         BULK COLLECT INTO T_VARCHAR_DATA
         FROM T_CONFIG_FIXED_DATA CFD,T_ITEM_ATTRIB_MASTER IAM,T_TRANS_ITEM_ATTRIB_DTL TIAD
         WHERE TIAD.ATTRIB_ID = IAM.ATTRIB_ID AND TIAD.ATTRIB_TYPE_ID = CFD.CONFIG_ID AND TIAD.TRANS_ITEM_ID = qryValues
         ORDER BY TIAD.ATTRIB_TYPE_ID;

     ELSIF qryType = 'TRANS_ATTRIB_ID' THEN
         SELECT TIAD.ATTRIB_TYPE_ID||'|'||TIAD.ATTRIB_ID 
         BULK COLLECT INTO T_VARCHAR_DATA
         FROM T_TRANS_ITEM_ATTRIB_DTL TIAD
         WHERE TIAD.TRANS_ITEM_ID = qryValues
         ORDER BY TIAD.ATTRIB_TYPE_ID;

    ELSIF qryType = 'STOCK_ATTRIB_CODE' THEN
         SELECT CFD.CONFIG_CODE||'|'||CASE WHEN TIAD.ATTRIB_ID >0 THEN IAM.ATTRIB_CODE ELSE TIAD.ATTRIB_VALUE END
         BULK COLLECT INTO T_VARCHAR_DATA
         FROM T_CONFIG_FIXED_DATA CFD,T_ITEM_ATTRIB_MASTER IAM,T_STOCK_ATTRIB_DTL TIAD
         WHERE TIAD.ATTRIB_ID = IAM.ATTRIB_ID AND TIAD.ATTRIB_TYPE_ID = CFD.CONFIG_ID AND TIAD.STOCK_ID = qryValues
         ORDER BY TIAD.ATTRIB_TYPE_ID;

    ELSIF qryType = 'STOCK_ATTRIB_DESC' THEN
         SELECT CFD.CONFIG_CODE||'|'||CASE WHEN TIAD.ATTRIB_ID >0 THEN IAM.ATTRIB_DESC ELSE TIAD.ATTRIB_VALUE END
         BULK COLLECT INTO T_VARCHAR_DATA
         FROM T_CONFIG_FIXED_DATA CFD,T_ITEM_ATTRIB_MASTER IAM,T_STOCK_ATTRIB_DTL TIAD
         WHERE TIAD.ATTRIB_ID = IAM.ATTRIB_ID AND TIAD.ATTRIB_TYPE_ID = CFD.CONFIG_ID AND TIAD.STOCK_ID = qryValues
         ORDER BY TIAD.ATTRIB_TYPE_ID;

    ELSIF qryType = 'STOCK_ATTRIB_ID' THEN
         SELECT TIAD.ATTRIB_TYPE_ID||'|'||TIAD.ATTRIB_ID 
         BULK COLLECT INTO T_VARCHAR_DATA
         FROM T_STOCK_ATTRIB_DTL TIAD
         WHERE TIAD.STOCK_ID = qryValues
         ORDER BY TIAD.ATTRIB_TYPE_ID;

    ELSIF qryType = 'STOCK_BOM_ATTRIB_CODE' THEN
         SELECT CFD.CONFIG_CODE||'|'||CASE WHEN TIAD.ATTRIB_ID >0 THEN IAM.ATTRIB_CODE ELSE TIAD.ATTRIB_VALUE END
         BULK COLLECT INTO T_VARCHAR_DATA
         FROM T_CONFIG_FIXED_DATA CFD,T_ITEM_ATTRIB_MASTER IAM,T_STOCK_BOM_ATTRIB_DTL TIAD
         WHERE TIAD.ATTRIB_ID = IAM.ATTRIB_ID AND TIAD.ATTRIB_TYPE_ID = CFD.CONFIG_ID AND TIAD.STOCK_BOM_ID = qryValues
         ORDER BY TIAD.ATTRIB_TYPE_ID;
         
    ELSIF qryType = 'STOCK_BOM_ATTRIB_DESC' THEN
         SELECT CFD.CONFIG_CODE||'|'||CASE WHEN TIAD.ATTRIB_ID >0 THEN IAM.ATTRIB_DESC ELSE TIAD.ATTRIB_VALUE END
         BULK COLLECT INTO T_VARCHAR_DATA
         FROM T_CONFIG_FIXED_DATA CFD,T_ITEM_ATTRIB_MASTER IAM,T_STOCK_BOM_ATTRIB_DTL TIAD
         WHERE TIAD.ATTRIB_ID = IAM.ATTRIB_ID AND TIAD.ATTRIB_TYPE_ID = CFD.CONFIG_ID AND TIAD.STOCK_BOM_ID = qryValues
         ORDER BY TIAD.ATTRIB_TYPE_ID;

    ELSIF qryType = 'STOCK_BOM_ATTRIB_ID' THEN
         SELECT TIAD.ATTRIB_TYPE_ID||'|'||TIAD.ATTRIB_ID 
         BULK COLLECT INTO T_VARCHAR_DATA
         FROM T_STOCK_BOM_ATTRIB_DTL TIAD
         WHERE TIAD.STOCK_BOM_ID = qryValues
         ORDER BY TIAD.ATTRIB_TYPE_ID;
 
    ELSIF qryType = 'TRANS_BOM_ATTRIB_DESC' THEN
         SELECT CFD.CONFIG_CODE||'|'||CASE WHEN TIAD.ATTRIB_ID >0 THEN IAM.ATTRIB_DESC ELSE TIAD.ATTRIB_VALUE END
         BULK COLLECT INTO T_VARCHAR_DATA
         FROM T_CONFIG_FIXED_DATA CFD,T_ITEM_ATTRIB_MASTER IAM,T_TRANS_ITEM_BOM_ATTRIB_DTL TIAD
         WHERE TIAD.ATTRIB_ID = IAM.ATTRIB_ID AND TIAD.ATTRIB_TYPE_ID = CFD.CONFIG_ID AND TIAD.TRANS_ITEM_BOM_ID = qryValues
         ORDER BY TIAD.ATTRIB_TYPE_ID;

    ELSIF qryType = 'TRANS_BOM_ATTRIB_ID' THEN
         SELECT TIAD.ATTRIB_TYPE_ID||'|'||TIAD.ATTRIB_ID 
         BULK COLLECT INTO T_VARCHAR_DATA
         FROM T_TRANS_ITEM_BOM_ATTRIB_DTL TIAD
         WHERE  TIAD.TRANS_ITEM_BOM_ID = qryValues
         ORDER BY TIAD.ATTRIB_TYPE_ID;

    ELSIF qryType = 'TRANS_BOM_ATTRIB_CODE' THEN
         SELECT CFD.CONFIG_CODE||'|'||CASE WHEN TIAD.ATTRIB_ID >0 THEN IAM.ATTRIB_CODE ELSE TIAD.ATTRIB_VALUE END
         BULK COLLECT INTO T_VARCHAR_DATA
         FROM T_CONFIG_FIXED_DATA CFD,T_ITEM_ATTRIB_MASTER IAM,T_TRANS_ITEM_BOM_ATTRIB_DTL TIAD
         WHERE TIAD.ATTRIB_ID = IAM.ATTRIB_ID AND TIAD.ATTRIB_TYPE_ID = CFD.CONFIG_ID AND  TIAD.TRANS_ITEM_BOM_ID = qryValues
         ORDER BY TIAD.ATTRIB_TYPE_ID;
        
    ELSIF qryType = 'STOCK_BOM_ATTRIB_CODE(ATTRIBTYPEID)' THEN 
        arrData := F_FILL_STRING_TABLE(iData => qryValues);
        SELECT CASE WHEN TIAD.ATTRIB_ID > 0 THEN IAM.ATTRIB_DESC ELSE TIAD.ATTRIB_VALUE END
        BULK COLLECT INTO T_VARCHAR_DATA
        FROM T_CONFIG_FIXED_DATA CFD,T_ITEM_ATTRIB_MASTER IAM,T_STOCK_ATTRIB_DTL TIAD
        WHERE TIAD.ATTRIB_ID = IAM.ATTRIB_ID AND TIAD.ATTRIB_TYPE_ID = CFD.CONFIG_ID AND TIAD.STOCK_ID = ARRDATA(1) AND IAM.ATTRIB_TYPE_ID = ARRDATA(2)  
        ORDER BY TIAD.ATTRIB_TYPE_ID;
  
     ELSIF qryType = 'STOCK_ATTRIB_CODE_AND_ID' THEN
         SELECT CFD.CONFIG_CODE||'|'||IAM.ATTRIB_CODE||':'||IAM.ATTRIB_ID
         BULK COLLECT INTO T_VARCHAR_DATA
         FROM T_CONFIG_FIXED_DATA CFD,T_ITEM_ATTRIB_MASTER IAM,T_STOCK_ATTRIB_DTL TIAD
         WHERE TIAD.ATTRIB_ID = IAM.ATTRIB_ID AND TIAD.ATTRIB_TYPE_ID = CFD.CONFIG_ID AND IAM.ATTRIB_ID > 0 AND TIAD.STOCK_ID = qryValues;

     ELSIF qryType = 'ATTRIB_TYPE' THEN
         P_SEANET_CONTEXT(strAttribType => 'MISC1', strAttribValue => QryValues);

         SELECT CONFIG_VALUE
         BULK COLLECT INTO T_VARCHAR_DATA
         FROM T_CONFIG_FIXED_DATA
         WHERE CONFIG_ID IN (SELECT RET_VAL FROM DATAARRAYLIST WHERE RET_TYPE = 'MISC1');

     ELSIF qryType = 'CUSTOM_ITEM_ATTRIB_CONFIG' THEN
         P_SEANET_CONTEXT(strAttribType => 'MISC1', strAttribValue => QryValues);
        
         SELECT CONFIG_VALUE
         BULK COLLECT INTO T_VARCHAR_DATA
         FROM T_CONFIG_FIXED_DATA
         WHERE CONFIG_ID IN (SELECT RET_VAL FROM DATAARRAYLIST WHERE RET_TYPE = 'MISC1');

     ELSIF qryType = 'CUSTOMER-INSTR-RMK(US)' THEN
        
         SELECT PML.REMITT_INSTRUCTION 
         BULK COLLECT INTO T_VARCHAR_DATA
         FROM T_PARTY_MISC_LINK PML 
         WHERE PML.LINK_TYPE = 'P' 
               AND PML.PARTY_ID = ARRDATA(1)  
               AND PML.VARIANT_ID = ARRDATA(2); 
               
     ELSIF qryType = 'SKARAT(ITEMGROUP)' THEN
        
         SELECT DISTINCT SIVM.KARAT_CODE 
         BULK COLLECT INTO T_VARCHAR_DATA
         FROM T_STOCK_BOM_DTL SBD,T_SMRY_ITEM_VARIANT_METAL SIVM 
         WHERE SBD.BOM_VARIANT_ID = SIVM.VARIANT_ID 
               AND SBD.STOCK_ID = ARRDATA(1)  
               AND SIVM.BASE_ITEM_GROUP_ID = ARRDATA(2);
               
     ELSIF qryType = 'CUSTOMER-OPERATION' THEN
        
         SELECT PML.NOTES_1 
         BULK COLLECT INTO T_VARCHAR_DATA
         FROM T_PARTY_MISC_LINK PML 
         WHERE PML.LINK_TYPE = 'OR' 
               AND PML.PARTY_ID = ARRDATA(1)  
               AND PML.OPERATION_ID = ARRDATA(2);
               
     ELSIF qryType = 'CUSTOMER-OPERATION-TYPE' THEN
        
         SELECT PML.NOTES_2 
         BULK COLLECT INTO T_VARCHAR_DATA
         FROM T_PARTY_MISC_LINK PML 
         WHERE PML.LINK_TYPE = 'OR' 
               AND PML.PARTY_ID = ARRDATA(1)  
               AND PML.OPERATION_ID = ARRDATA(2);          

     ELSIF qryType = 'STAMP-RMK(US)' THEN
        
         SELECT PML.ATTRIB_ALIAS_NAME 
         BULK COLLECT INTO T_VARCHAR_DATA
         FROM T_PARTY_MISC_LINK PML 
         WHERE PML.LINK_TYPE = 'P' 
               AND PML.PARTY_ID = ARRDATA(1)  
               AND PML.VARIANT_ID = ARRDATA(2); 
    
     ELSIF qryType = 'CUSTOM_ATTRIB_ID' THEN
         SELECT ATTRIB_ID
         BULK COLLECT INTO T_VARCHAR_DATA
         FROM T_CUSTOM_ITEM_ATTRIB_DTL
         WHERE CUSTOM_ITEM_ID = arrData(1) AND ROW_NO = arrData(2)
         ORDER BY ATTRIB_TYPE_ID;

     ELSIF qryType = 'CUSTOM_ATTRIB_DESC' THEN
         SELECT IAM.ATTRIB_DESC
         BULK COLLECT INTO T_VARCHAR_DATA
         FROM T_CUSTOM_ITEM_ATTRIB_DTL CIAD, T_ITEM_ATTRIB_MASTER IAM 
         WHERE CIAD.ATTRIB_ID = IAM.ATTRIB_ID AND CUSTOM_ITEM_ID = arrData(1) AND ROW_NO = arrData(2)  
         ORDER BY CIAD.ATTRIB_TYPE_ID;

     ELSIF qryType = 'DOC_NO' THEN
         SELECT DISTINCT TH.DOC_NO 
         BULK COLLECT INTO T_VARCHAR_DATA
         FROM T_TRANS_HDR TH, T_TRANS_ITEM_DTL TI 
         WHERE TH.TRANS_ID = TI.SOR_TRANS_ID(+) AND TI.TRANS_ID = qryValues;
         
    ELSIF qryType = 'SOR_TRANS_ID' THEN
        SELECT SUM(PRICE) AS PRICE
        BULK COLLECT INTO T_VARCHAR_DATA
        FROM (
         SELECT F_GETTRANSPRICEVALUE(TI.SOR_TRANS_ID,0,0,0,'T') AS PRICE   
         FROM T_TRANS_ITEM_DTL TI 
         WHERE TI.TRANS_ID = qryValues
         GROUP BY TI.SOR_TRANS_ID);

    ELSIF qryType = 'GET-ORDER-NO(INWARD_TRANS_ITEM_ID)' THEN
        SELECT DISTINCT TH.DOC_NO 
        BULK COLLECT INTO T_VARCHAR_DATA
        FROM T_TRANS_HDR TH , V_TRANS_ITEM_DTL TID 
        WHERE TH.TRANS_ID = TID.TRANS_ID 
            AND TH.TRANS_TYPE = 'SOR' 
            AND TID.ROW_STATUS = 1 
            AND TID.INWARD_TRANS_ITEM_ID = qryValues ; 

    ELSIF qryType = 'GET-ORDER-NO(INVOICE_TRANS_ID)' THEN
        SELECT ORD.BILL_NO   
        BULK COLLECT INTO T_VARCHAR_DATA
        FROM T_TRANS_HDR TH , v_TRANS_HDR ORD,T_TRANS_ITEM_DTL TID 
        WHERE TH.TRANS_ID = TID.TRANS_ID 
            AND TID.ROW_STATUS = 1 
            AND TID.SOR_TRANS_ID = ORD.TRANS_ID
            AND TH.TRANS_ID = qryValues
        GROUP BY ORD.BILL_NO ; 
         
    ELSIF qryType = 'GET-ORDER-CATG(INVOICE_TRANS_ID)' THEN
        SELECT CTCL.TRANS_CATEGORY 
        BULK COLLECT INTO T_VARCHAR_DATA
        FROM T_TRANS_HDR TH , T_TRANS_HDR ORD,T_TRANS_ITEM_DTL TID ,V_CONFIG_TRANS_CATEGORY_LINK CTCL 
        WHERE TH.TRANS_ID = TID.TRANS_ID 
            AND TID.SOR_TRANS_ID = ORD.TRANS_ID
            AND ORD.TRANS_CATEGORY_LINK_ID = CTCL.TRANS_CATEGORY_LINK_ID 
            AND TID.ROW_STATUS = 1 
            AND TH.TRANS_ID = qryValues
        GROUP BY CTCL.TRANS_CATEGORY  ;  

    ELSIF qryType = 'GET-EXPORT-DATE' THEN
         
         SELECT TO_CHAR(TH.TRANS_DATE,'DD/MM/YYYY')
         BULK COLLECT INTO T_VARCHAR_DATA 
         FROM T_TRANS_ITEM_DTL TID,T_TRANS_HDR TH
         WHERE TID.TRANS_ID = TH.TRANS_ID
         AND TID.ROW_STATUS = 1
         AND TH.TRANS_TYPE = 'INV'
         AND TID.STOCK_CODE = qryValues;  
         
    ELSIF qryType = 'GET-INTIAL-PRESENTATION-DATE' THEN
         
        SELECT TRANS_DATE
        BULK COLLECT INTO T_VARCHAR_DATA      
        FROM 
        (
        SELECT TH.TRANS_DATE 
        FROM T_TRANS_HDR TH , T_TRANS_ITEM_DTL TID 
        WHERE TH.TRANS_ID = TID.TRANS_ID 
              AND TH.TRANS_CATEGORY_LINK_ID = 36
              AND TID.VARIANT_ID = qryValues
        ORDER BY TH.TRANS_ID DESC  
        ) WHERE ROWNUM = 1 ;
        
    ELSIF qryType = 'GET-FINAL-PRESENTATION-DATE' THEN
         
        SELECT TRANS_DATE
        BULK COLLECT INTO T_VARCHAR_DATA      
        FROM 
        (
        SELECT TH.TRANS_DATE 
        FROM T_TRANS_HDR TH , T_TRANS_ITEM_DTL TID 
        WHERE TH.TRANS_ID = TID.TRANS_ID 
              AND TH.TRANS_CATEGORY_LINK_ID = 821
              AND TID.VARIANT_ID = qryValues
        ORDER BY TH.TRANS_ID DESC  
        ) WHERE ROWNUM = 1 ;  
        
    ELSIF qryType = 'DOC_DATE' THEN
         SELECT DISTINCT TH.TRANS_DATE 
         BULK COLLECT INTO T_VARCHAR_DATA
         FROM T_TRANS_HDR TH, T_TRANS_ITEM_DTL TI 
         WHERE TH.TRANS_ID = TI.SOR_TRANS_ID(+) AND TI.TRANS_ID = qryValues;

     ELSIF qryType = 'ITEM_NAME' THEN
         SELECT DISTINCT VD.ITEM_NAME
         BULK COLLECT INTO T_VARCHAR_DATA
         FROM V_ITEM_VARIANT_DTL VD,T_TRANS_ITEM_BOM_DTL TIBD 
         WHERE TIBD.BOM_VARIANT_ID = VD.VARIANT_ID AND VD.ITEM_TYPE_ID = 1005 
         AND TIBD.TRANS_ITEM_ID = qryValues;

     ELSIF qryType = 'STOCK_CODE' THEN
         SELECT DISTINCT S.STOCK_CODE
         BULK COLLECT INTO T_VARCHAR_DATA
         FROM V_ITEM_VARIANT_DTL IVD, T_STOCK_TRANS_LINK STL, T_STOCK S
         WHERE S.VARIANT_ID = IVD.VARIANT_ID AND S.STOCK_CODE IS NOT NULL AND S.STOCK_ID = STL.STOCK_ID
         AND IVD.ITEM_NATURE_ID = 1303 AND S.QUANTITY > 0
         AND STL.SOR_TRANS_ITEM_ID = qryValues;

     ELSIF qryType = 'WC_GROUP' THEN
         SELECT DISTINCT WGM.WCGROUP_NAME 
         BULK COLLECT INTO T_VARCHAR_DATA
         FROM T_WORKCENTER_GROUP_MASTER WGM,V_STOCK_DTL STD,V_ITEM_VARIANT_DTL IVD,T_STOCK_TRANS_LINK STL, T_STOCK S 
         WHERE STD.WCGROUP_ID = WGM.WCGROUP_ID AND S.VARIANT_ID = IVD.VARIANT_ID AND S.STOCK_ID = STL.STOCK_ID
         AND IVD.ITEM_NATURE_ID = 1303 AND S.STOCK_ID = STD.STOCK_ID AND STD.BATCH_ID <= (STD.BATCH_ID * 0)
         AND S.QUANTITY > 0 AND STL.SOR_TRANS_ITEM_ID = qryValues;

     ELSIF qryType = 'TRANS_ITEM_ID' THEN
         SELECT TRANS_ITEM_ID 
         BULK COLLECT INTO T_VARCHAR_DATA
         FROM T_TRANS_ITEM_DTL
         WHERE ROW_STATUS = 1 
         AND TRANS_ID = qryValues;

     ELSIF qryType = 'TRANS_ITEM_ID_TAG' THEN
         SELECT TID.TRANS_ITEM_ID 
         BULK COLLECT INTO T_VARCHAR_DATA
         FROM T_TRANS_ITEM_DTL TID,T_TRANS_HDR TH
         WHERE TID.ROW_STATUS = CASE WHEN TH.TRANS_TYPE = 'LMG' THEN 2 ELSE 1 END 
         AND TID.TRANS_ID = TH.TRANS_ID 
         AND TID.TRANS_ID = qryValues
         ORDER BY TID.STOCK_CODE;

     ELSIF qryType = 'STONE_QUALITY' THEN
         SELECT DISTINCT MV.QUALITY_CODE
         BULK COLLECT INTO T_VARCHAR_DATA
         FROM T_TRANS_ITEM_BOM_DTL STB,T_SMRY_ITEM_VARIANT_STONE  MV 
         WHERE STB.BOM_VARIANT_ID  = MV.VARIANT_ID
         AND STB.TRANS_ITEM_ID = qryValues;

     ELSIF qryType = 'STONE_QUALITY_RD' THEN
         SELECT DISTINCT MV.QUALITY_CODE
         BULK COLLECT INTO T_VARCHAR_DATA
         FROM T_TRANS_ITEM_BOM_DTL STB,T_SMRY_ITEM_VARIANT_STONE  MV 
         WHERE STB.BOM_VARIANT_ID  = MV.VARIANT_ID
         AND MV.SHAPE_CODE = 'RD' 
         AND STB.TRANS_ITEM_ID = qryValues;

     ELSIF qryType = 'STONE_QUALITY(VALUE)' THEN
         SELECT DISTINCT MV.QUALITY_DESC  
         BULK COLLECT INTO T_VARCHAR_DATA
         FROM T_TRANS_ITEM_BOM_DTL STB,T_SMRY_ITEM_VARIANT_STONE  MV 
         WHERE STB.BOM_VARIANT_ID  = MV.VARIANT_ID
         AND STB.TRANS_ITEM_ID = qryValues;
    
     ELSIF qryType = 'STONE_QUALITY(TRANS)' THEN
         SELECT DISTINCT MV.COLOR_CODE||'-'||MV.QUALITY_CODE
         BULK COLLECT INTO T_VARCHAR_DATA
         FROM T_TRANS_ITEM_DTL TID, T_TRANS_ITEM_BOM_DTL STB,T_SMRY_ITEM_VARIANT_STONE  MV 
         WHERE STB.BOM_VARIANT_ID  = MV.VARIANT_ID
         AND STB.TRANS_ITEM_ID = TID.TRANS_ITEM_ID
         AND TID.TRANS_ID = qryValues;
    
     ELSIF qryType = 'STONE_QUALITY(STOCKID)' THEN
         SELECT DISTINCT MV.QUALITY_CODE
         BULK COLLECT INTO T_VARCHAR_DATA
         FROM T_STOCK_BOM_DTL STB,T_SMRY_ITEM_VARIANT_STONE  MV 
         WHERE STB.BOM_VARIANT_ID  = MV.VARIANT_ID
         AND STB.STOCK_ID = qryValues;  
    
     ELSIF qryType = 'STONE_COLOR(STOCKID)' THEN
         SELECT DISTINCT MV.COLOR_CODE
         BULK COLLECT INTO T_VARCHAR_DATA
         FROM T_STOCK_BOM_DTL STB,T_SMRY_ITEM_VARIANT_STONE  MV 
         WHERE STB.BOM_VARIANT_ID  = MV.VARIANT_ID
         AND STB.STOCK_ID = qryValues; 
    
    ELSIF qryType = 'STONE_COLOR_DIA(STOCKID)' THEN
         SELECT DISTINCT MV.COLOR_CODE
         BULK COLLECT INTO T_VARCHAR_DATA
         FROM T_STOCK_BOM_DTL STB,T_SMRY_ITEM_VARIANT_STONE  MV 
         WHERE STB.BOM_VARIANT_ID  = MV.VARIANT_ID AND MV.ITEM_GROUP_ID = 1504
         AND STB.STOCK_ID = qryValues; 
              
    ELSIF qryType = 'FIRST_STONE_COLOR_DIA(STOCKID)' THEN
         SELECT DISTINCT MV.COLOR_CODE
         BULK COLLECT INTO T_VARCHAR_DATA
         FROM T_STOCK_BOM_DTL STB,T_SMRY_ITEM_VARIANT_STONE  MV 
         WHERE STB.BOM_VARIANT_ID  = MV.VARIANT_ID AND MV.ITEM_GROUP_ID = 1504
         AND ROWNUM = 1 AND STB.STOCK_ID = qryValues;
                  
    ELSIF qryType = 'STONE_SHAPE(STOCKID)' THEN
         SELECT DISTINCT MV.SHAPE_CODE
         BULK COLLECT INTO T_VARCHAR_DATA
         FROM T_STOCK_BOM_DTL STB,T_SMRY_ITEM_VARIANT_STONE  MV 
         WHERE STB.BOM_VARIANT_ID  = MV.VARIANT_ID
         AND STB.STOCK_ID = qryValues;     
    
     ELSIF qryType = 'STONE_CUT(STOCKID)' THEN
         SELECT DISTINCT MV.CUT_CODE
         BULK COLLECT INTO T_VARCHAR_DATA
         FROM T_STOCK_BOM_DTL STB,T_SMRY_ITEM_VARIANT_STONE  MV 
         WHERE STB.BOM_VARIANT_ID  = MV.VARIANT_ID
         AND STB.STOCK_ID = qryValues; 
      
     ELSIF qryType = 'CERTIFICATE(STOCKBOMID)' THEN
      
        SELECT DISTINCT IVM.VARIANT_NAME 
           BULK COLLECT INTO T_VARCHAR_DATA 
        FROM T_ITEM_VARIANT_MASTER IVM,T_STOCK_BOM_CERTIFICATE_DTL SBCD 
        WHERE SBCD.CERTIFICATE_ID = IVM.VARIANT_ID
              AND SBCD.STOCK_BOM_ID = qryValues;
     
    ELSIF qryType = 'CERTIFICATE_NO-(STOCK_CODE)' THEN 
        SELECT DISTINCT IVM.VARIANT_NAME 
        BULK COLLECT INTO T_VARCHAR_DATA 
        FROM T_TRANS_ITEM_BOM_DTL TIBD, V_ITEM_VARIANT_RTN_DTL IV ,T_TRANS_HDR TH,T_TRANS_ITEM_DTL TID ,T_ITEM_VARIANT_MASTER IVM,T_STOCK_BOM_CERTIFICATE_DTL SBCD 
        WHERE TIBD.SRC_STOCK_BOM_ID = SBCD.STOCK_BOM_ID
            AND TIBD.BOM_VARIANT_ID = IV.VARIANT_ID 
            AND SBCD.CERTIFICATE_ID = IVM.VARIANT_ID
            AND TIBD.TRANS_ITEM_ID = TID.TRANS_ITEM_ID  
            AND TID.TRANS_ID = TH.TRANS_ID 
            AND TH.TRANS_TYPE = 'SLG' 
            AND TID.ROW_STATUS = 1 
            AND IV.ITEM_TYPE_ID = 1005 
            AND TID.STOCK_CODE = qryValues ;  
            
    ELSIF qryType = 'STONE_QUALITY(STOCK_CODE)' THEN
        SELECT DISTINCT IV.QUALITY_CODE
        BULK COLLECT INTO T_VARCHAR_DATA 
        FROM T_TRANS_ITEM_BOM_DTL TIBD, T_SMRY_ITEM_VARIANT_STONE IV ,T_TRANS_HDR TH,T_TRANS_ITEM_DTL TID   
        WHERE TIBD.BOM_VARIANT_ID = IV.VARIANT_ID  
            AND TIBD.TRANS_ITEM_ID = TID.TRANS_ITEM_ID  
            AND TID.TRANS_ID = TH.TRANS_ID 
            AND TH.TRANS_TYPE = 'SLG'
            AND TID.ROW_STATUS = 1 
            AND IV.ITEM_TYPE_ID = 1005 
            AND TID.STOCK_CODE = qryValues ;  
    
    ELSIF qryType = 'STONE_COLOR(STOCK_CODE)' THEN
        SELECT DISTINCT IV.COLOR_CODE 
        BULK COLLECT INTO T_VARCHAR_DATA 
        FROM T_TRANS_ITEM_BOM_DTL TIBD, T_SMRY_ITEM_VARIANT_STONE IV ,T_TRANS_HDR TH,T_TRANS_ITEM_DTL TID   
        WHERE TIBD.BOM_VARIANT_ID = IV.VARIANT_ID  
            AND TIBD.TRANS_ITEM_ID = TID.TRANS_ITEM_ID  
            AND TID.TRANS_ID = TH.TRANS_ID 
            AND TH.TRANS_TYPE = 'SLG'
            AND TID.ROW_STATUS = 1 
            AND IV.ITEM_TYPE_ID = 1005 
            AND TID.STOCK_CODE = qryValues ;  

    ELSIF qryType = 'STONE_CUT(STOCK_CODE)' THEN
        SELECT DISTINCT IV.CUT_CODE 
        BULK COLLECT INTO T_VARCHAR_DATA 
        FROM T_TRANS_ITEM_BOM_DTL TIBD, T_SMRY_ITEM_VARIANT_STONE IV ,T_TRANS_HDR TH,T_TRANS_ITEM_DTL TID   
        WHERE TIBD.BOM_VARIANT_ID = IV.VARIANT_ID  
            AND TIBD.TRANS_ITEM_ID = TID.TRANS_ITEM_ID  
            AND TID.TRANS_ID = TH.TRANS_ID 
            AND TH.TRANS_TYPE = 'SLG'
            AND TID.ROW_STATUS = 1 
            AND IV.ITEM_TYPE_ID = 1005 
            AND TID.STOCK_CODE = qryValues ;    
     
     ELSIF qryType = 'CERTIFICATE_NO-(STOCKBOMID)' THEN
      
        SELECT DISTINCT IVM.VARIANT_NAME 
           BULK COLLECT INTO T_VARCHAR_DATA 
        FROM T_STOCK_BOM_DTL SBD , V_ITEM_VARIANT_RTN_DTL IV ,
             T_ITEM_VARIANT_MASTER IVM,T_STOCK_BOM_CERTIFICATE_DTL SBCD 
        WHERE SBD.STOCK_BOM_ID = SBCD.STOCK_BOM_ID
              AND SBD.BOM_VARIANT_ID = IV.VARIANT_ID 
              AND SBCD.CERTIFICATE_ID = IVM.VARIANT_ID
              AND IV.ITEM_TYPE_ID = 1005
              AND SBD.STOCK_ID = qryValues;  
     
     ELSIF qryType = 'ITEM_GROUP_CODE(STOCKID)' THEN
         SELECT DISTINCT CFD.CONFIG_CODE
         BULK COLLECT INTO T_VARCHAR_DATA
         FROM T_STOCK_BOM_DTL STB,T_SMRY_ITEM_VARIANT_STONE  MV ,T_CONFIG_FIXED_DATA CFD 
         WHERE STB.BOM_VARIANT_ID  = MV.VARIANT_ID
               AND MV.ITEM_GROUP_ID = CFD.CONFIG_ID 
         AND STB.STOCK_ID = qryValues; 
        
    ELSIF qryType = 'DIA_QUALITY' THEN
         SELECT DISTINCT F_GET_ATTRIBUTE(MV.ATTRIB_TYPE_AND_CODE,'STNQLTY')  
         BULK COLLECT INTO T_VARCHAR_DATA
         FROM T_TRANS_ITEM_BOM_DTL STB,V_ITEM_VARIANT_DTL MV 
         WHERE STB.BOM_VARIANT_ID  = MV.VARIANT_ID
               AND ITEM_GROUP_ID = 1504  
               AND STB.TRANS_ITEM_ID = qryValues;
                
    ELSIF qryType = 'DIA_RANGE' THEN
         SELECT DISTINCT F_GET_ATTRIBUTE(MV.ATTRIB_TYPE_AND_CODE,'STNRNG')  
         BULK COLLECT INTO T_VARCHAR_DATA
         FROM T_TRANS_ITEM_BOM_DTL STB,V_ITEM_VARIANT_DTL MV 
         WHERE STB.BOM_VARIANT_ID  = MV.VARIANT_ID
               AND ITEM_GROUP_ID = 1504  
               AND STB.TRANS_ITEM_ID = qryValues;
               
    ELSIF qryType = 'DIA_QUALITY(TRANSID)' THEN
         SELECT DISTINCT F_GET_ATTRIBUTE(MV.ATTRIB_TYPE_AND_CODE,'STNQLTY')  
         BULK COLLECT INTO T_VARCHAR_DATA
         FROM T_TRANS_ITEM_BOM_DTL STB,T_TRANS_ITEM_DTL TID, V_ITEM_VARIANT_DTL MV 
         WHERE STB.BOM_VARIANT_ID  = MV.VARIANT_ID
               AND STB.TRANS_ITEM_ID = TID.TRANS_ITEM_ID 
               AND ITEM_GROUP_ID = 1504  
               AND TID.TRANS_ID = qryValues;
                
    ELSIF qryType = 'DIA_RANGE(TRANSID)' THEN
         SELECT DISTINCT F_GET_ATTRIBUTE(MV.ATTRIB_TYPE_AND_CODE,'STNRNG')  
         BULK COLLECT INTO T_VARCHAR_DATA
         FROM T_TRANS_ITEM_BOM_DTL STB,T_TRANS_ITEM_DTL TID,V_ITEM_VARIANT_DTL MV 
         WHERE STB.BOM_VARIANT_ID  = MV.VARIANT_ID
               AND STB.TRANS_ITEM_ID = TID.TRANS_ITEM_ID 
               AND ITEM_GROUP_ID = 1504  
               AND TID.TRANS_ID = qryValues;               
     
    ELSIF qryType = 'DIA_CLR(TRANSITEMID)' THEN
         SELECT DISTINCT F_GET_ATTRIBUTE(MV.ATTRIB_TYPE_AND_CODE,'STNCLR')  
         BULK COLLECT INTO T_VARCHAR_DATA
         FROM T_TRANS_ITEM_BOM_DTL STB,V_ITEM_VARIANT_DTL MV 
         WHERE STB.BOM_VARIANT_ID  = MV.VARIANT_ID
               AND ITEM_GROUP_ID = 1504  
               AND STB.TRANS_ITEM_ID = qryValues;
              
    ELSIF qryType = 'FIRST_DIA_CLR(TRANSITEMID)' THEN
         SELECT DISTINCT F_GET_ATTRIBUTE(MV.ATTRIB_TYPE_AND_CODE,'STNCLR')  
         BULK COLLECT INTO T_VARCHAR_DATA
         FROM T_TRANS_ITEM_BOM_DTL STB,V_ITEM_VARIANT_DTL MV 
         WHERE STB.BOM_VARIANT_ID  = MV.VARIANT_ID
               AND ITEM_GROUP_ID = 1504  AND ROWNUM = 1
               AND STB.TRANS_ITEM_ID = qryValues;
                        
    ELSIF qryType = 'NATIVE-SHADE(TRANSITEMID)' THEN
         SELECT CASE WHEN IVM.VARIANT_NAME IS NOT NULL THEN F_GET_ATTRIBUTE(SBAS.ATTRIB_VALUE,11429) ELSE  F_GET_ATTRIBUTE(MV.ATTRIB_TYPE_AND_CODE,'STNCLR') END 
         BULK COLLECT INTO T_VARCHAR_DATA
         FROM T_TRANS_ITEM_BOM_DTL STB,V_ITEM_VARIANT_DTL MV ,T_STOCK_BOM_ATTRIB_SMRY SBAS  ,
              T_STOCK_BOM_CERTIFICATE_DTL SBCD ,T_ITEM_VARIANT_MASTER IVM 
         WHERE STB.BOM_VARIANT_ID  = MV.VARIANT_ID
               AND STB.DEST_STOCK_BOM_ID = SBAS.STOCK_BOM_ID
               AND STB.DEST_STOCK_BOM_ID = SBCD.STOCK_BOM_ID
               AND SBCD.CERTIFICATE_ID = IVM.VARIANT_ID 
               AND ITEM_GROUP_ID = 1504  
               AND STB.TRANS_ITEM_ID = qryValues ;
    
    ELSIF qryType = 'DIA_QUALITY_COLOR(BOM-STOCK-ID)' THEN
         SELECT F_GET_ATTRIBUTE(MV.ATTRIB_TYPE_AND_CODE,'STNQLTY')||'/'||CASE WHEN STB.SPECIAL_CHARACTER = 'C' THEN F_GET_ATTRIBUTE(SS.ATTRIB_CODE,11429) ELSE F_GET_ATTRIBUTE(mv.ATTRIB_TYPE_AND_CODE,'SHADE') END  
         BULK COLLECT INTO T_VARCHAR_DATA
         FROM T_STOCK_BOM_DTL STB,V_ITEM_VARIANT_RTN_DTL MV ,T_STOCK_BOM_ATTRIB_SMRY SS  
         WHERE STB.BOM_VARIANT_ID  = MV.VARIANT_ID
            AND STB.STOCK_BOM_ID = SS.STOCK_BOM_ID(+)  
            AND MV.ITEM_TYPE_ID = 1005   
            AND STB.STOCK_ID = qryValues
        GROUP BY F_GET_ATTRIBUTE(MV.ATTRIB_TYPE_AND_CODE,'STNQLTY')||'/'||CASE WHEN STB.SPECIAL_CHARACTER = 'C' THEN F_GET_ATTRIBUTE(SS.ATTRIB_CODE,11429) ELSE F_GET_ATTRIBUTE(mv.ATTRIB_TYPE_AND_CODE,'SHADE') END ; 
     
    ELSIF qryType = 'DIA_SHAPE(BOM-TRANS_ITEM_ID)' THEN
         SELECT F_GET_ATTRIBUTE(MV.ATTRIB_TYPE_AND_VALUE,'STNSHP')  
         BULK COLLECT INTO T_VARCHAR_DATA
         FROM T_TRANS_ITEM_BOM_DTL STB,V_ITEM_VARIANT_RTN_DTL MV  
         WHERE STB.BOM_VARIANT_ID  = MV.VARIANT_ID 
            AND MV.ITEM_TYPE_ID = 1005   
            AND STB.SPECIAL_CHARACTER = 'C'
            AND STB.TRANS_ITEM_ID = qryValues
        GROUP BY  F_GET_ATTRIBUTE(MV.ATTRIB_TYPE_AND_VALUE,'STNSHP') ;  
    
    ELSIF qryType = 'DIA_WT(BOM-TRANS_ITEM_ID)' THEN
         SELECT  SUM(DECODE(MV.ITEM_STOCK_UOM_CODE,'WT',STB.QUANTITY,STB.QUANTITY*STB.CONVERSION_FACTOR))
            BULK COLLECT INTO T_VARCHAR_DATA
         FROM T_TRANS_ITEM_BOM_DTL STB,V_ITEM_VARIANT_RTN_DTL MV  
         WHERE STB.BOM_VARIANT_ID  = MV.VARIANT_ID 
            AND MV.ITEM_TYPE_ID = 1005   
            AND STB.SPECIAL_CHARACTER = 'C'
            AND STB.TRANS_ITEM_ID = qryValues
        GROUP BY  F_GET_ATTRIBUTE(MV.ATTRIB_TYPE_AND_VALUE,'STNSHP') ;  
              
    ELSIF qryType = 'DIA_QUALITY_STOCK' THEN
         SELECT DISTINCT F_GET_ATTRIBUTE(MV.ATTRIB_TYPE_AND_CODE,'STNQLTY')  
         BULK COLLECT INTO T_VARCHAR_DATA
         FROM T_STOCK_BOM_DTL STB,V_ITEM_VARIANT_DTL MV 
         WHERE STB.BOM_VARIANT_ID  = MV.VARIANT_ID
               AND ITEM_GROUP_ID = 1504  
               AND STB.STOCK_ID = qryValues;
               
    ELSIF qryType = 'DIA_QUALITY_COLOR(BOM-TRANS_ITEM_ID)' THEN
         SELECT F_GET_ATTRIBUTE(MV.ATTRIB_TYPE_AND_CODE,'STNQLTY')||'/'||CASE WHEN STB.SPECIAL_CHARACTER = 'C' AND STB.SRC_STOCK_BOM_ID > 0  THEN F_GET_ATTRIBUTE(SS.ATTRIB_CODE,11429) ELSE F_GET_ATTRIBUTE(mv.ATTRIB_TYPE_AND_CODE,'SHADE') END  
         BULK COLLECT INTO T_VARCHAR_DATA
         FROM T_TRANS_ITEM_BOM_DTL STB,V_ITEM_VARIANT_RTN_DTL MV ,T_STOCK_BOM_ATTRIB_SMRY SS  
         WHERE STB.BOM_VARIANT_ID  = MV.VARIANT_ID
            AND STB.SRC_STOCK_BOM_ID = SS.STOCK_BOM_ID(+)  
            AND MV.ITEM_TYPE_ID = 1005   
            AND STB.TRANS_ITEM_ID = qryValues
        GROUP BY F_GET_ATTRIBUTE(MV.ATTRIB_TYPE_AND_CODE,'STNQLTY')||'/'||CASE WHEN STB.SPECIAL_CHARACTER = 'C' AND STB.SRC_STOCK_BOM_ID > 0  THEN F_GET_ATTRIBUTE(SS.ATTRIB_CODE,11429) ELSE F_GET_ATTRIBUTE(mv.ATTRIB_TYPE_AND_CODE,'SHADE') END ; 
        
    ELSIF qryType = 'DIA_QUALITY_COLOR(TRANS_ITEM_ID)' THEN 
        SELECT 
           F_GET_ATTRIBUTE(MV.ATTRIB_TYPE_AND_CODE,'STNQLTY')||'/'||CASE WHEN STB.SRC_STOCK_BOM_ID > 0 THEN F_GET_ATTRIBUTE(SS.ATTRIB_CODE,11429) ELSE SC.ATTRIB_CODE END 
           BULK COLLECT INTO T_VARCHAR_DATA
        FROM T_TRANS_ITEM_BOM_DTL STB,V_ITEM_VARIANT_RTN_DTL MV ,T_STOCK_BOM_ATTRIB_SMRY SS , T_ITEM_ATTRIB_MASTER NS ,T_ITEM_ATTRIB_MASTER_EXTD NSE ,T_ITEM_ATTRIB_MASTER SC 
        WHERE STB.BOM_VARIANT_ID  = MV.VARIANT_ID
           AND STB.SRC_STOCK_BOM_ID = SS.STOCK_BOM_ID(+)
           AND F_GET_ATTRIBUTE(mv.ATTRIB_TYPE_AND_CODE,'SHADE')  = NS.ATTRIB_CODE
           AND NS.ATTRIB_ID = NSE.ATTRIB_ID 
           AND NSE.ATTRIB_ID1 = SC.ATTRIB_ID   
           AND NS.ATTRIB_TYPE_ID = 11407 
           AND MV.ITEM_TYPE_ID = 1005   
           AND STB.TRANS_ITEM_ID = qryValues
        GROUP BY F_GET_ATTRIBUTE(MV.ATTRIB_TYPE_AND_CODE,'STNQLTY')||'/'||CASE WHEN STB.SRC_STOCK_BOM_ID > 0 THEN F_GET_ATTRIBUTE(SS.ATTRIB_CODE,11429) ELSE SC.ATTRIB_CODE END ;   
        
    ELSIF qryType = 'DIA_COLOR(BOM-TRANS_ITEM_ID)' THEN
         SELECT CASE WHEN STB.SPECIAL_CHARACTER = 'C' AND STB.SRC_STOCK_BOM_ID > 0  THEN F_GET_ATTRIBUTE(SS.ATTRIB_CODE,11429) ELSE F_GET_ATTRIBUTE(mv.ATTRIB_TYPE_AND_CODE,'SHADE') END  
         BULK COLLECT INTO T_VARCHAR_DATA
         FROM T_TRANS_ITEM_BOM_DTL STB,V_ITEM_VARIANT_RTN_DTL MV ,T_STOCK_BOM_ATTRIB_SMRY SS  
         WHERE STB.BOM_VARIANT_ID  = MV.VARIANT_ID
            AND STB.SRC_STOCK_BOM_ID = SS.STOCK_BOM_ID(+)  
            AND MV.ITEM_TYPE_ID = 1005   
            AND STB.TRANS_ITEM_ID = qryValues
        GROUP BY CASE WHEN STB.SPECIAL_CHARACTER = 'C' AND STB.SRC_STOCK_BOM_ID > 0  THEN F_GET_ATTRIBUTE(SS.ATTRIB_CODE,11429) ELSE F_GET_ATTRIBUTE(mv.ATTRIB_TYPE_AND_CODE,'SHADE') END ; 
        
    ELSIF qryType = 'DIA_COLOR(TRANS_ITEM_ID)' THEN
         SELECT CASE WHEN STB.SRC_STOCK_ID > 0 AND STB.CERTIFICATE_NO IS NOT NULL THEN F_GET_ATTRIBUTE(SS.ATTRIB_CODE,11429) ELSE F_GET_ATTRIBUTE(mv.ATTRIB_TYPE_AND_CODE,'SHADE') END  
         BULK COLLECT INTO T_VARCHAR_DATA
         FROM V_TRANS_ITEM_DTL STB,V_ITEM_VARIANT_RTN_DTL MV ,T_STOCK_ATTRIB_SMRY SS  
         WHERE STB.VARIANT_ID  = MV.VARIANT_ID
            AND STB.SRC_STOCK_ID = SS.STOCK_ID(+)  
            AND MV.ITEM_TYPE_ID = 1005   
            AND STB.TRANS_ITEM_ID = qryValues
        GROUP BY CASE WHEN STB.SRC_STOCK_ID > 0 AND STB.CERTIFICATE_NO IS NOT NULL THEN F_GET_ATTRIBUTE(SS.ATTRIB_CODE,11429) ELSE F_GET_ATTRIBUTE(mv.ATTRIB_TYPE_AND_CODE,'SHADE') END ; 
        
     ELSIF qryType = 'DIA_COLOR_CERT(BOM-TRANS_ITEM_ID)' THEN
         SELECT CASE WHEN SBCD.CERTIFICATE_ID > 0 THEN F_GET_ATTRIBUTE(SS.ATTRIB_CODE,11429) ELSE F_GET_ATTRIBUTE(mv.ATTRIB_TYPE_AND_CODE,'SHADE') END  
         BULK COLLECT INTO T_VARCHAR_DATA
         FROM T_TRANS_ITEM_BOM_DTL STB,V_ITEM_VARIANT_RTN_DTL MV ,T_STOCK_BOM_ATTRIB_SMRY SS ,T_STOCK_BOM_CERTIFICATE_DTL SBCD 
         WHERE STB.BOM_VARIANT_ID  = MV.VARIANT_ID
            AND STB.SRC_STOCK_BOM_ID = SS.STOCK_BOM_ID(+)  
            AND STB.SRC_STOCK_BOM_ID = SBCD.STOCK_BOM_ID(+)
            AND MV.ITEM_TYPE_ID = 1005   
            AND STB.TRANS_ITEM_ID = qryValues
        GROUP BY CASE WHEN SBCD.CERTIFICATE_ID > 0 THEN F_GET_ATTRIBUTE(SS.ATTRIB_CODE,11429) ELSE F_GET_ATTRIBUTE(mv.ATTRIB_TYPE_AND_CODE,'SHADE') END ; 
        
    ELSIF qryType = 'DIA_COLOR_CERT(TRANS_ITEM_ID)' THEN
         SELECT CASE WHEN  STB.CERTIFICATE_NO IS NOT NULL THEN F_GET_ATTRIBUTE(SS.ATTRIB_CODE,11429) ELSE F_GET_ATTRIBUTE(mv.ATTRIB_TYPE_AND_CODE,'SHADE') END  
         BULK COLLECT INTO T_VARCHAR_DATA
         FROM V_TRANS_ITEM_DTL STB,V_ITEM_VARIANT_RTN_DTL MV ,T_STOCK_ATTRIB_SMRY SS  
         WHERE STB.VARIANT_ID  = MV.VARIANT_ID
            AND STB.SRC_STOCK_ID = SS.STOCK_ID(+)  
            AND MV.ITEM_TYPE_ID = 1005   
            AND STB.TRANS_ITEM_ID = qryValues
        GROUP BY CASE WHEN STB.CERTIFICATE_NO IS NOT NULL THEN F_GET_ATTRIBUTE(SS.ATTRIB_CODE,11429) ELSE F_GET_ATTRIBUTE(mv.ATTRIB_TYPE_AND_CODE,'SHADE') END ; 
    
    ELSIF qryType = 'CLS_QUALITY' THEN
         SELECT DISTINCT MV.QUALITY_CODE
         BULK COLLECT INTO T_VARCHAR_DATA
         FROM T_TRANS_ITEM_BOM_DTL STB,T_SMRY_ITEM_VARIANT_STONE  MV 
         WHERE STB.BOM_VARIANT_ID  = MV.VARIANT_ID
               AND ITEM_GROUP_ID <> 1504
               AND STB.TRANS_ITEM_ID = qryValues;    
     
    ELSIF qryType = 'CLS_STN_TYPE' THEN
         SELECT DISTINCT F_GET_ATTRIBUTE(MV.ATTRIB_TYPE_AND_VALUE,'STNTYP')
         BULK COLLECT INTO T_VARCHAR_DATA
         FROM T_TRANS_ITEM_BOM_DTL STB,V_ITEM_VARIANT_DTL MV 
         WHERE STB.BOM_VARIANT_ID  = MV.VARIANT_ID
               AND ITEM_GROUP_ID <> 1504
               AND ITEM_TYPE_ID = 1005 
               AND STB.TRANS_ITEM_ID = qryValues;

    ELSIF qryType = 'CLS_RANGE' THEN
        SELECT DISTINCT F_GET_ATTRIBUTE(MV.ATTRIB_TYPE_AND_CODE,'STNRNG')
        BULK COLLECT INTO T_VARCHAR_DATA
        FROM T_TRANS_ITEM_BOM_DTL STB,V_ITEM_VARIANT_DTL MV 
        WHERE STB.BOM_VARIANT_ID  = MV.VARIANT_ID
              AND ITEM_GROUP_ID <> 1504
              AND ITEM_TYPE_ID = 1005 
              AND STB.TRANS_ITEM_ID = qryValues;  
    
     ELSIF qryType = 'COMPONENT_DETAIL' THEN
         SELECT IVD.VARIANT_NAME||'(Pcs '||BOM.QUANTITY||')'
         BULK COLLECT INTO T_VARCHAR_DATA
         FROM T_TRANS_ITEM_BOM_DTL BOM, V_ITEM_VARIANT_DTL IVD
         WHERE BOM.BOM_VARIANT_ID = IVD.VARIANT_ID AND IVD.ITEM_TYPE_ID = 1002
         AND BOM.TRANS_ITEM_ID = qryValues;

     ELSIF qryType = 'LAST-ISSUE-WORKER' THEN
         SELECT WC_CODE
         BULK COLLECT INTO T_VARCHAR_DATA
         FROM T_WORKCENTER_MASTER
         WHERE WC_ID IN (
             SELECT SRC_WC_ID
             FROM (
                 SELECT TID.SRC_WC_ID FROM T_TRANS_ITEM_DTL TID,T_TRANS_HDR TH
                 WHERE TID.TRANS_ID = TH.TRANS_ID
                 AND TID.DEST_BATCH_ID >0 AND TID.DEST_BATCH_ID = qryValues
                 AND TH.TRANS_TYPE = 'RTN'
                 ORDER BY TRANS_ITEM_ID DESC
             ) WHERE ROWNUM = 1
         );
        
     ELSIF qryType = 'GET-NET-WEIGHT-FOR-KUNDAN-MODEL' THEN
         BEGIN
             SELECT MIN(TIBD.BOM_VARIANT_ID) AS VARIANT_ID,SUM(TIBD.QUANTITY)
             INTO iVariantId, dblQty 
             FROM T_TRANS_ITEM_DTL TID, T_TRANS_ITEM_BOM_DTL TIBD,V_ITEM_VARIANT_DTL IVD
             WHERE TIBD.TRANS_ITEM_ID = TID.TRANS_ITEM_ID 
             AND TIBD.BOM_VARIANT_ID = IVD.VARIANT_ID
             AND IVD.BASE_VARIANT_ID <> IVD.VARIANT_ID 
             AND IVD.ITEM_TYPE_ID = 1004
             AND TID.TRANS_ITEM_ID = TO_NUMBER(qryValues);
            
             SELECT IVD.VARIANT_ID,TIBD.QUANTITY
             INTO iVariantId1, dblQty1 
             FROM T_TRANS_ITEM_DTL TID, T_TRANS_ITEM_BOM_DTL TIBD,V_ITEM_VARIANT_DTL IVD
             WHERE TIBD.TRANS_ITEM_ID = TID.TRANS_ITEM_ID 
             AND TIBD.BOM_VARIANT_ID = IVD.VARIANT_ID
             AND IVD.BASE_VARIANT_ID = IVD.VARIANT_ID 
             AND IVD.ITEM_TYPE_ID = 1004
             AND TID.TRANS_ITEM_ID = TO_NUMBER(qryValues);
            
             dblCF := F_Get_Metal_CF(iVariantId1, iVariantId);
            
             dblQty := TO_CHAR((dblCF * dblQty1) + dblQty);
            
             SELECT 
                 NVL(CASE WHEN SUBSTR(TRIM(TO_CHAR(ROUND(dblQty,3),'999999999999999.999')),1,1) ='.' THEN '0'||TRIM(TO_CHAR(ROUND(dblQty,3),'999999999999999.999')) ELSE TRIM(TO_CHAR(ROUND(dblQty,3),'999999999999999.999')) END,'0') 
             INTO strReturn 
             FROM DUAL;
            
             RETURN strReturn;    
            
         EXCEPTION
             WHEN NO_DATA_FOUND THEN
                 strReturn := '0.000';
         END;            
                
         RETURN strReturn;

     ELSIF qryType = 'GET-REF-DOC' THEN
         SELECT DISTINCT REFTH.DOC_NO
         BULK COLLECT INTO T_VARCHAR_DATA
         FROM T_TRANS_HDR REFTH,T_TRANS_ITEM_DTL REFTID,T_TRANS_ITEM_DTL TID
         WHERE TID.REF_TRANS_ITEM_ID = REFTID.TRANS_ITEM_ID
         AND REFTID.TRANS_ID = REFTH.TRANS_ID
         AND TID.REF_TRANS_ITEM_ID > 0 AND TID.TRANS_ID = qryValues;

     ELSIF qryType = 'GET-REF-DOC-EST' THEN
         SELECT DOC_NO 
         BULK COLLECT INTO T_VARCHAR_DATA 
         FROM 
         (
         SELECT  TH.DOC_NO
         FROM T_TRANS_HDR TH,T_TRANS_ITEM_DTL TID,T_TRANS_ITEM_DTL REFTID 
         WHERE TH.TRANS_ID = TID.TRANS_ID 
               AND TID.REF_TRANS_ITEM_ID = REFTID.TRANS_ITEM_ID 
               AND REFTID.TRANS_ID = qryValues
          ORDER BY TH.TRANS_ID ) WHERE ROWNUM = 1 ;
              
     ELSIF qryType = 'GET-VNTAG-STN-DTL' THEN
         SELECT IVD.ITEM_NAME||'['||SUM(ROUND(TIBD.QUANTITY * TIBD.CONVERSION_FACTOR))||'] '||NVL(CASE WHEN SUBSTR(TRIM(TO_CHAR(ROUND(SUM(TIBD.QUANTITY),3),'999999999999999.999')),1,1) ='.' THEN '0'||TRIM(TO_CHAR(ROUND(SUM(TIBD.QUANTITY),3),'999999999999999.999')) ELSE TRIM(TO_CHAR(ROUND(SUM(TIBD.QUANTITY),3),'999999999999999.999')) END,'0.000') 
         BULK COLLECT INTO T_VARCHAR_DATA
         FROM T_TRANS_ITEM_DTL TID,T_TRANS_ITEM_BOM_DTL TIBD, T_SMRY_ITEM_VARIANT_STONE STN, V_ITEM_VARIANT_DTL IVD
         WHERE TIBD.BOM_VARIANT_ID = STN.VARIANT_ID AND TIBD.BOM_VARIANT_ID = IVD.VARIANT_ID AND TID.TRANS_ITEM_ID = TIBD.TRANS_ITEM_ID 
         AND IVD.ITEM_GROUP_ID = arrData(1) AND TID.TRANS_ITEM_ID = arrData(2)
         GROUP BY IVD.ITEM_NAME;

     ELSIF qryType = 'GET-WCCODE-FROM-RTN' THEN
         SELECT WC_CODE 
         BULK COLLECT INTO T_VARCHAR_DATA
         FROM T_WORKCENTER_MASTER 
         WHERE WC_ID IN (
             SELECT SRC_WC_ID 
             FROM (
                 SELECT TID.SRC_WC_ID FROM T_TRANS_ITEM_DTL TID,T_TRANS_HDR TH 
                 WHERE TID.TRANS_ID = TH.TRANS_ID
                 AND TID.DEST_BATCH_ID >0 AND TID.DEST_BATCH_ID = qryValues 
                 AND TH.TRANS_TYPE = 'RTN'
                 ORDER BY TRANS_ITEM_ID DESC
             ) 
             WHERE ROWNUM = 1
         );

     ELSIF qryType = 'GET-DIA-QLTY-CODE' THEN
         SELECT DISTINCT STN.QUALITY_CODE 
         BULK COLLECT INTO T_VARCHAR_DATA
         FROM T_TRANS_ITEM_DTL TID,T_TRANS_ITEM_BOM_DTL TIBD, T_SMRY_ITEM_VARIANT_STONE STN, V_ITEM_VARIANT_DTL IVD 
         WHERE TIBD.BOM_VARIANT_ID = STN.VARIANT_ID AND TIBD.BOM_VARIANT_ID = IVD.VARIANT_ID AND TID.TRANS_ITEM_ID = TIBD.TRANS_ITEM_ID 
         AND IVD.ITEM_GROUP_ID = 1504 AND TID.TRANS_ITEM_ID = qryValues;

     ELSIF qryType = 'GET-1003-FROM-TRANSBOM' THEN
         SELECT IV.ITEM_NAME 
         BULK COLLECT INTO T_VARCHAR_DATA
         FROM T_TRANS_ITEM_BOM_DTL DTL, V_ITEM_VARIANT_DTL IV 
         WHERE DTL.BOM_VARIANT_ID = IV.VARIANT_ID AND IV.ITEM_TYPE_ID = 1003 AND DTL.TRANS_ITEM_ID = qryValues;

     ELSIF qryType = 'GET-1878-WT-FROM-TRANSBOM' THEN
         SELECT SUM(CASE WHEN IVD.ITEM_STOCK_UOM_CODE = 'WT' THEN TIBD.QUANTITY ELSE (TIBD.QUANTITY*TIBD.CONVERSION_FACTOR) END) AS WEIGHT 
         BULK COLLECT INTO T_VARCHAR_DATA
         FROM T_TRANS_ITEM_BOM_DTL TIBD, V_ITEM_VARIANT_RTN_DTL IVD 
         WHERE TIBD.BOM_VARIANT_ID = IVD.VARIANT_ID AND IVD.ITEM_GROUP_ID = 1878
         AND TIBD.TRANS_ITEM_ID = qryValues;

     ELSIF qryType = 'GET-STOCK-ATTRIB' THEN
         SELECT AM.ATTRIB_CODE 
         BULK COLLECT INTO T_VARCHAR_DATA
         FROM T_STOCK_ATTRIB_DTL SAD,T_ITEM_ATTRIB_MASTER AM 
         WHERE SAD.ATTRIB_ID = AM.ATTRIB_ID AND SAD.STOCK_ID = qryValues
         ORDER BY SAD.STOCK_ID,SAD.ATTRIB_TYPE_ID;

     ELSIF qryType = 'GET-STOCK-ATTRIB-STNTYPE' THEN
         SELECT AM.ATTRIB_CODE 
         BULK COLLECT INTO T_VARCHAR_DATA
         FROM T_STOCK_ATTRIB_DTL SAD,T_ITEM_ATTRIB_MASTER AM 
         WHERE SAD.ATTRIB_ID = AM.ATTRIB_ID AND SAD.ATTRIB_TYPE_ID = 11010 AND SAD.STOCK_ID = qryValues;

     ELSIF qryType = 'GET-STNQLTY-STOCK-BOM' THEN
         P_SEANET_CONTEXT(strAttribType => 'MISC1', strAttribValue => arrData(1));

         SELECT DISTINCT F_GET_ATTRIBUTE_VALUE(IVD.ATTRIB_TYPE_AND_CODE,'STNQLTY') 
         BULK COLLECT INTO T_VARCHAR_DATA
         FROM T_STOCK_BOM_DTL SBD, V_ITEM_VARIANT_DTL IVD
         WHERE SBD.BOM_VARIANT_ID = IVD.VARIANT_ID
         AND UPPER(F_GET_ATTRIBUTE_VALUE(IVD.ATTRIB_TYPE_AND_CODE,'STNQLTY')) IN (SELECT RET_VAL FROM DATAARRAYLIST WHERE RET_TYPE = 'MISC1')
         AND IVD.ITEM_TYPE_ID = 1005 AND SBD.STOCK_ID = arrData(2);

     ELSIF qryType = 'GET-STOCK-CODE-FROM-TRANS' THEN
         SELECT DISTINCT STID.STOCK_CODE AS SLASH_NO 
         BULK COLLECT INTO T_VARCHAR_DATA
         FROM T_TRANS_ITEM_DTL STID
         WHERE STID.TRANS_ID = qryValues; 

     ELSIF qryType = 'GET-STOCK-CODE-FROM-TRANS-ITEM' THEN
         SELECT STID.STOCK_CODE AS SLASH_NO 
         BULK COLLECT INTO T_VARCHAR_DATA
         FROM T_TRANS_ITEM_DTL STID
         WHERE STID.TRANS_ITEM_ID = qryValues; 

     ELSIF qryType = 'GET-STOCK-CODE-FROM-SOR' THEN
         SELECT DISTINCT STID.STOCK_CODE AS SLASH_NO 
         BULK COLLECT INTO T_VARCHAR_DATA
         FROM T_TRANS_ITEM_DTL STID, V_ITEM_VARIANT_DTL IVD 
         WHERE STID.VARIANT_ID = IVD.VARIANT_ID AND STID.SOR_TRANS_ITEM_ID = arrData(1) AND STID.TRANS_ID = arrData(2); 

     ELSIF qryType = 'GET-TRANS-ITEM-ID' THEN
         SELECT STID.TRANS_ITEM_ID AS TRANS_ITEM_ID1 
         BULK COLLECT INTO T_VARCHAR_DATA
         FROM T_TRANS_ITEM_DTL STID
         WHERE STID.TRANS_ITEM_ID = qryValues;

     ELSIF qryType = 'GET-TRANS-ITEM-ID-SOR' THEN
         SELECT DISTINCT STID.TRANS_ITEM_ID AS TRANS_ITEM_ID1 
         BULK COLLECT INTO T_VARCHAR_DATA
         FROM T_TRANS_ITEM_DTL STID
         WHERE STID.TRANS_ID = arrData(1) AND STID.SOR_TRANS_ITEM_ID = arrData(2);

     ELSIF qryType = 'GET-QLTY-CODE(SHAPEWISE)' THEN
         SELECT DISTINCT SIVS.QUALITY_CODE 
         BULK COLLECT INTO T_VARCHAR_DATA
         FROM T_TRANS_ITEM_BOM_DTL TIBD,T_SMRY_ITEM_VARIANT_STONE SIVS
         WHERE TIBD.BOM_VARIANT_ID = SIVS.VARIANT_ID AND SIVS.ITEM_GROUP_ID = 1504 
         AND TIBD.TRANS_ITEM_ID = arrData(1) AND SIVS.SHAPE_CODE = arrData(2);
     
    ELSIF qryType = 'GET-COLOR-CODE(SHAPEWISE)' THEN
         SELECT DISTINCT SIVS.COLOR_CODE 
         BULK COLLECT INTO T_VARCHAR_DATA
         FROM T_TRANS_ITEM_BOM_DTL TIBD,T_SMRY_ITEM_VARIANT_STONE SIVS
         WHERE TIBD.BOM_VARIANT_ID = SIVS.VARIANT_ID AND SIVS.ITEM_GROUP_ID = 1504 
         AND TIBD.TRANS_ITEM_ID = arrData(1) AND SIVS.SHAPE_CODE = arrData(2);
              
     ELSIF qryType = 'GET-VARIANT-NAME-TRANS' THEN
         SELECT DISTINCT IVD.VARIANT_NAME 
         BULK COLLECT INTO T_VARCHAR_DATA
         FROM T_TRANS_ITEM_DTL STID, V_ITEM_VARIANT_DTL IVD 
         WHERE STID.VARIANT_ID = IVD.VARIANT_ID AND STID.TRANS_ID = qryValues;  
         
     ELSIF qryType = 'GET-VARIANT-NAME-STOCK-GROUP' THEN
         SELECT DISTINCT IVD.VARIANT_NAME 
         BULK COLLECT INTO T_VARCHAR_DATA
         FROM T_TRANS_ITEM_DTL STID, V_ITEM_VARIANT_DTL IVD, T_TRANS_ITEM_DTL_EXTD TIDE 
         WHERE STID.VARIANT_ID = IVD.VARIANT_ID AND STID.TRANS_ITEM_ID = TIDE.TRANS_ITEM_ID 
         AND TIDE.STOCK_GROUPING_ID <> 0 AND STID.TRANS_ID||TIDE.STOCK_GROUPING_ID = qryValues;           

     ELSIF qryType = 'GET-DOCNO-INV' THEN
         strSql :=      'SELECT TH.DOC_NO '|| 
                     'FROM T_TRANS_HDR TH,T_TRANS_HDR_EXTD THEX '|| 
                     'WHERE TH.TRANS_ID = THEX.TRANS_ID AND TH.ROW_STATUS = 1 AND TH.TRANS_TYPE = ''INV''';

         IF LENGTH(arrData(1)) > 0 THEN
             P_SEANET_CONTEXT(strAttribType => 'MISC1', strAttribValue => arrData(1));
             strSql := strSql||' AND THEX.PARTY_ID IN (SELECT RET_VAL FROM DATAARRAYLIST WHERE RET_TYPE = :V1)';

         ELSE
             strSql := strSql||' AND (1 = 1 OR THEX.PARTY_ID IN (SELECT RET_VAL FROM DATAARRAYLIST WHERE RET_TYPE = :V1)';
         END IF;

         IF LENGTH(arrData(2)) > 0 THEN
             P_SEANET_CONTEXT(strAttribType => 'MISC2', strAttribValue => arrData(2));
             strSql := strSql||' AND TH.TRANS_ID IN (SELECT RET_VAL FROM DATAARRAYLIST WHERE RET_TYPE = :V2)';

         ELSE
             strSql := strSql||' AND (1 = 1 OR TH.TRANS_ID IN (SELECT RET_VAL FROM DATAARRAYLIST WHERE RET_TYPE = :V2)';
         END IF;

         EXECUTE IMMEDIATE
         strSql
         BULK COLLECT INTO T_VARCHAR_DATA
         USING 'MISC1', 'MISC2';

     ELSIF qryType = 'GET-ATTRIB-DESC' THEN
         P_SEANET_CONTEXT(strAttribType => 'MISC1', strAttribValue => qryValues);
    
         SELECT DISTINCT ATTRIB_DESC 
         BULK COLLECT INTO T_VARCHAR_DATA
         FROM T_ITEM_ATTRIB_MASTER 
         WHERE ATTRIB_ID IN (SELECT RET_VAL FROM DATAARRAYLIST WHERE RET_TYPE = 'MISC1');

     ELSIF qryType = 'GET-VARIANT-ID2' THEN
         SELECT IVL.VARIANT_ID2 
         BULK COLLECT INTO T_VARCHAR_DATA
         FROM T_ITEM_VARIANT_LINK IVL 
         WHERE IVL.VARIANT_ID1 = qryValues 
         ORDER BY IVL.VARIANT_ID2;

     ELSIF qryType = 'FETCH-TOTAL-PAYMENT-FOR-A-TRANS' THEN
         SELECT PAY_MODE||'|'||SUM(PAY_MODE_AMOUNT)
         BULK COLLECT INTO T_VARCHAR_DATA
         FROM (
               SELECT CFD.CONFIG_VALUE AS PAY_MODE, ROUND(FTRH.RECPAY_TRANS_AMT,2) AS PAY_MODE_AMOUNT
               FROM T_CONFIG_FIXED_DATA CFD, T_FA_TRANS_RECPAY_HDR FTRH
               WHERE FTRH.PAY_MODE_ID = CFD.CONFIG_ID AND FTRH.FA_TRANS_ID = TO_NUMBER(arrData(1))
               UNION ALL
               SELECT CFD.CONFIG_VALUE AS PAY_MODE, ROUND(FTRD.ADJ_TRANS_AMT,2) AS PAY_MODE_AMOUNT
               FROM T_FA_TRANS_BILL_HDR FTBH, T_FA_TRANS_RECPAY_DTL FTRD, T_CONFIG_FIXED_DATA CFD
               WHERE FTBH.FA_TRANS_BILL_ID = FTRD.FA_TRANS_BILL_ID AND FTBH.BILL_TYPE_ID = CFD.CONFIG_ID AND
                     FTRD.FA_TRANS_BILL_ID > 0 AND FTBH.ROW_STATUS > 0 AND FTRD.ROW_STATUS > 0 AND FTRD.FA_TRANS_ID = TO_NUMBER(arrData(1)) AND
                     NOT EXISTS (SELECT 1 FROM T_FA_TRANS_BILL_HDR FTBHI WHERE FTRD.FA_TRANS_BILL_ID = FTBHI.FA_TRANS_BILL_ID AND FTBH.FA_TRANS_ID = TO_NUMBER(arrData(1)))
              )
         GROUP BY PAY_MODE;

     ELSIF qryType = 'FETCH-TOTAL-OMP-FOR-A-TRANS' THEN
         SELECT 'QTY|'||SUM(TID.QUANTITY)||'^VALUE|'||SUM(FTRD.ADJ_TRANS_AMT)
         BULK COLLECT INTO T_VARCHAR_DATA
         FROM T_TRANS_ITEM_DTL TID, T_TRANS_HDR TH, T_FA_TRANS_BILL_HDR FTBH, T_FA_TRANS_RECPAY_DTL FTRD
         WHERE FTRD.FA_TRANS_BILL_ID = FTBH.FA_TRANS_BILL_ID
         AND FTBH.REF_TRANS_ID = TH.TRANS_ID
         AND TH.TRANS_ID = TID.TRANS_ID
         AND TH.TRANS_SUBTYPE_ID = 43
         AND FTRD.RECPAY_TYPE_ID = 30804 
         AND FTRD.FA_TRANS_ID = TO_NUMBER(qryValues);

     ELSIF qryType = 'GET-RMISRITAG-STN-DTL' THEN
         SELECT IVD.ITEM_NAME||': '||SUM(ROUND(TIBD.QUANTITY * TIBD.CONVERSION_FACTOR))||'/'||NVL(CASE WHEN SUBSTR(TRIM(TO_CHAR(ROUND(SUM(TIBD.QUANTITY),3),'999999999999999.999')),1,1) ='.' THEN '0'||TRIM(TO_CHAR(ROUND(SUM(TIBD.QUANTITY),3),'999999999999999.999')) ELSE TRIM(TO_CHAR(ROUND(SUM(TIBD.QUANTITY),3),'999999999999999.999')) END,'0.000') 
         BULK COLLECT INTO T_VARCHAR_DATA
         FROM T_TRANS_ITEM_DTL TID,T_TRANS_ITEM_BOM_DTL TIBD, T_SMRY_ITEM_VARIANT_STONE STN, V_ITEM_VARIANT_DTL IVD
         WHERE TIBD.BOM_VARIANT_ID = STN.VARIANT_ID AND TIBD.BOM_VARIANT_ID = IVD.VARIANT_ID AND TID.TRANS_ITEM_ID = TIBD.TRANS_ITEM_ID 
         AND IVD.ITEM_GROUP_ID = arrData(1) AND TID.TRANS_ITEM_ID = arrData(2)
         GROUP BY IVD.ITEM_NAME;

     ELSIF qryType = 'GET-WASTAGE-PER-CHR' THEN
         SELECT 
             TO_CHAR(TIP.ROW_VALUE)||'%'
             BULK COLLECT INTO T_VARCHAR_DATA
         FROM 
             T_TRANS_ITEM_BOM_FORMULA_DTL TIP,T_TRANS_ITEM_DTL TID,
             T_FORMULA_PROCEDURE_DTL PROC, T_TRANS_ITEM_BOM_DTL TIBD,
             T_SMRY_ITEM_VARIANT_METAL MVM 
         WHERE
             TIP.ROW_NO = PROC.ROW_NO AND  
             TIP.PROCEDURE_ID = PROC.PROCEDURE_ID AND 
             TIBD.TRANS_ITEM_ID = TID.TRANS_ITEM_ID AND 
             TIP.TRANS_ITEM_BOM_ID = TIBD.TRANS_ITEM_BOM_ID AND 
             TIBD.BOM_VARIANT_ID = MVM.VARIANT_ID AND
             PROC.ROW_TYPE_ID = 1010 AND 
             TID.TRANS_ITEM_ID = arrData(1);
            
      ELSIF qryType = 'GET-SKU-CODE(VARIANT-PARTY-CATEGORY)' THEN
         SELECT 
             LNK.ADD_FLD1 BULK COLLECT INTO T_VARCHAR_DATA
         FROM 
             T_PARTY_MISC_LINK LNK 
         WHERE
             LNK.TRANS_SUBTYPE_ID = CASE WHEN NVL(arrData(3),0) = 0 THEN 659 ELSE TO_NUMBER(arrData(3)) END 
             AND LNK.PARTY_ID = arrData(2)
             AND LNK.VARIANT_ID = arrData(1)
             AND LNK.LINK_TYPE = 'S'
        GROUP BY LNK.ADD_FLD1 ;
        
    ELSIF qryType = 'GET-SIZE(VARIANT-PARTY-CATEGORY)' THEN
         SELECT 
             LNK.REMITT_INSTRUCTION BULK COLLECT INTO T_VARCHAR_DATA
         FROM 
             T_PARTY_MISC_LINK LNK 
         WHERE
             LNK.TRANS_SUBTYPE_ID = CASE WHEN NVL(arrData(3),0) = 0 THEN 659 ELSE TO_NUMBER(arrData(3)) END 
             AND LNK.PARTY_ID = arrData(2)
             AND LNK.VARIANT_ID = arrData(1)
             AND LNK.LINK_TYPE = 'S'
        GROUP BY LNK.REMITT_INSTRUCTION ;
    
      ELSIF qryType = 'GET-SKU-CODE(FINDING-VENDOR)' THEN
         SELECT 
             LNK.ADD_FLD1 BULK COLLECT INTO T_VARCHAR_DATA
         FROM 
             T_PARTY_MISC_LINK LNK 
         WHERE 
             LNK.PARTY_ID = arrData(2)
             AND LNK.VARIANT_ID = arrData(1)
             AND LNK.LINK_TYPE = 'VF'
        GROUP BY LNK.ADD_FLD1 ;
     
             
    ELSIF qryType = 'GET-SKU-CODEUS(VARIANT-PARTY-CATEGORY)' THEN
        SELECT DISTINCT LNK.ADD_FLD1 
        BULK COLLECT INTO T_VARCHAR_DATA 
        FROM T_TRANS_ITEM_DTL TID , T_TRANS_ITEM_DTL REFTID , T_TRANS_HDR SORTH,T_TRANS_HDR_EXTD SORTHE, T_TRANS_ITEM_DTL SORTID ,T_PARTY_MISC_LINK LNK 
        WHERE SORTID.TRANS_ID = SORTH.TRANS_ID 
            AND SORTID.TRANS_ID = SORTHE.TRANS_ID 
            AND REFTID.SOR_TRANS_ITEM_ID = SORTID.TRANS_ITEM_ID(+) 
            AND TID.REF_TRANS_ITEM_ID  = REFTID.TRANS_ITEM_ID(+) 
            AND LNK.TRANS_SUBTYPE_ID = SORTH.TRANS_CATEGORY_LINK_ID  
            AND LNK.PARTY_ID = SORTHE.PARTY_ID(+) 
            AND LNK.VARIANT_ID = SORTID.VARIANT_ID
            AND LNK.LINK_TYPE = 'S' 
            AND TID.TRANS_ID =  arrData(1)
            AND TID.VARIANT_ID =  arrData(2); 
            
     ELSIF qryType = 'GET-BULLION-RATE' THEN
         --raise_application_error (-20100,'**'||arrData(1));
         SELECT 
             FBR.BULLION_RATE BULK COLLECT INTO T_VARCHAR_DATA
         FROM 
             T_FORMULA_BULLION_RATE FBR 
         WHERE
             TO_DATE(TO_CHAR(FBR.UPTO_DATE,'DD/MM/YYYY'),'DD/MM/YYYY') = TO_DATE(arrData(1),'DD/MM/YYYY')
             AND FBR.RATE_DEPD_ID = TO_NUMBER(arrData(2))
             AND FBR.RATE_TYPE_ID = 3002
             AND ROWNUM = 1;      
             
     ELSIF qryType = 'GET-UPC-CODE(VARIANT-PARTY-CATEGORY)' THEN
         SELECT 
             LNK.ADD_FLD2 BULK COLLECT INTO T_VARCHAR_DATA
         FROM 
             T_PARTY_MISC_LINK LNK 
         WHERE
             LNK.TRANS_SUBTYPE_ID = CASE WHEN NVL(arrData(3),0) = 0 THEN 659 ELSE TO_NUMBER(arrData(3)) END
             AND LNK.PARTY_ID = arrData(2)
             AND LNK.VARIANT_ID = arrData(1)
             AND LNK.LINK_TYPE = 'S';
                                       
     ELSIF qryType = 'STOCK-CODE-COMMA-SEPERATED' THEN
         IF TO_NUMBER(arrData(3)) > 0 THEN
         	IF INSTR(strData,'11.') > 0 THEN
                 EXECUTE IMMEDIATE
                 'SELECT LISTAGG_CLOB(STOCK_CODE) --WITHIN GROUP(ORDER BY STOCK_CODE)
                 FROM T_TRANS_ITEM_DTL
                 WHERE TRANS_ID = :V1 AND SOR_TRANS_ITEM_ID = :V2
                 GROUP BY SOR_TRANS_ITEM_ID'
                 INTO strReturn
                 USING TO_NUMBER(arrData(1)), TO_NUMBER(arrData(3));

             ELSE
                 EXECUTE IMMEDIATE
                 'SELECT DISTINCT LISTAGG_CLOB(STOCK_CODE) --OVER (PARTITION BY SOR_TRANS_ITEM_ID)
                 FROM T_TRANS_ITEM_DTL
                 WHERE TRANS_ID = :V1 AND SOR_TRANS_ITEM_ID = :V2'
                 INTO strReturn
                 USING TO_NUMBER(arrData(1)), TO_NUMBER(arrData(3));
             END IF;

         ELSE
         	IF INSTR(strData,'11.') > 0 THEN
                 EXECUTE IMMEDIATE
                 'SELECT LISTAGG_CLOB(STOCK_CODE) --WITHIN GROUP(ORDER BY STOCK_CODE)
                 FROM T_TRANS_ITEM_DTL
                 WHERE TRANS_ID = :V1 AND TRANS_ITEM_ID = :V2
                 GROUP BY TRANS_ITEM_ID'
                 INTO strReturn
                 USING TO_NUMBER(arrData(1)), TO_NUMBER(arrData(3));

             ELSE
                 EXECUTE IMMEDIATE
                 'SELECT DISTINCT LISTAGG_CLOB(STOCK_CODE) --OVER (PARTITION BY TRANS_ITEM_ID)
                 FROM T_TRANS_ITEM_DTL
                 WHERE TRANS_ID = :V1 AND TRANS_ITEM_ID = :V2'
                 INTO strReturn
                 USING TO_NUMBER(arrData(1)), TO_NUMBER(arrData(2));
             END IF;
         END IF;
        
     ELSIF qryType = 'GET-SKU-UPC-CODE(TRANS)' THEN
         IF TO_NUMBER(arrData(4)) >0 THEN
             IF arrData(5) = 'B' THEN
                 SELECT GC_NO BULK COLLECT INTO T_VARCHAR_DATA
                 FROM T_TRANS_ITEM_DTL_EXTD
                 WHERE TRANS_ITEM_ID = TO_NUMBER(arrData(4));
             ELSIF arrData(5) = 'S' THEN
                 SELECT CUSTOMER_VARIANT_NAME BULK COLLECT INTO T_VARCHAR_DATA
                 FROM T_TRANS_ITEM_DTL_EXTD
                 WHERE TRANS_ITEM_ID = TO_NUMBER(arrData(4)); 
             ELSE
                 SELECT UPC_NO BULK COLLECT INTO T_VARCHAR_DATA
                 FROM T_TRANS_ITEM_DTL_EXTD 
                 WHERE TRANS_ITEM_ID = TO_NUMBER(arrData(4)); 
             END IF;  
         ELSE
             IF TO_NUMBER(arrData(3)) >0 THEN
                 SELECT TRANS_TYPE INTO strTemp 
                 FROM V_CONFIG_TRANS_CATEGORY_LINK WHERE TRANS_CATEGORY_LINK_ID = arrData(3);
                
                 IF strTemp <> 'SOR' THEN
                     arrData(3) := 659;
                 END IF;                   
             ELSE
                 arrData(3) := 659;
             END IF;                 

             IF arrData(5) = 'B' THEN 
                 SELECT 
                     LNK.VARIANT_NAME BULK COLLECT INTO T_VARCHAR_DATA
                 FROM 
                     T_PARTY_MISC_LINK LNK 
                 WHERE
                     LNK.TRANS_SUBTYPE_ID = TO_NUMBER(arrData(3))
                     AND LNK.PARTY_ID = arrData(2)
                     AND LNK.VARIANT_ID = arrData(1)
                     AND LNK.LINK_TYPE = 'S';
             ELSIF arrData(5) = 'S' THEN 
                 SELECT 
                     LNK.ADD_FLD1 BULK COLLECT INTO T_VARCHAR_DATA
                 FROM 
                     T_PARTY_MISC_LINK LNK 
                 WHERE
                     LNK.TRANS_SUBTYPE_ID = TO_NUMBER(arrData(3))
                     AND LNK.PARTY_ID = arrData(2)
                     AND LNK.VARIANT_ID = arrData(1)
                     AND LNK.LINK_TYPE = 'S';
             ELSE
                 SELECT 
                     LNK.ADD_FLD2 BULK COLLECT INTO T_VARCHAR_DATA
                 FROM 
                     T_PARTY_MISC_LINK LNK 
                 WHERE
                     LNK.TRANS_SUBTYPE_ID = TO_NUMBER(arrData(3))
                     AND LNK.PARTY_ID = arrData(2)
                     AND LNK.VARIANT_ID = arrData(1)
                     AND LNK.LINK_TYPE = 'S';
             END IF;                
         END IF;

     ELSIF qryType = 'GET-SELLING-PRICE(STOCK ID)' THEN
         SELECT SP.SELLING_PRICE
         BULK COLLECT INTO T_VARCHAR_DATA
         FROM T_STOCK_LOCATION_SP SP
         WHERE SP.LOCATION_ID = arrData(2) AND SP.STOCK_ID = arrData(1);

     ELSIF qryType = 'GET-INWARD-VENDOR-CODE' THEN
         SELECT PM.PARTY_CODE
         BULK COLLECT INTO T_VARCHAR_DATA
         FROM T_STOCK_TRANS_LINK STL, T_TRANS_ITEM_DTL TID, T_TRANS_HDR_EXTD EXTD, T_PARTY_MASTER PM
         WHERE
         EXTD.PARTY_ID = PM.PARTY_ID
         AND TID.TRANS_ID = EXTD.TRANS_ID 
         AND STL.INWARD_TRANS_ITEM_ID = TID.TRANS_ITEM_ID
         AND STL.STOCK_ID = arrData(1); 
    
     ELSIF qryType = 'GET-PARTYWISE-QUALITY' THEN
         SELECT  
             DISTINCT DECODE(QLTY.ATTRIB_ALIAS_NAME,NULL,F_GET_ATTRIBUTE_VALUE(IV.ATTRIB_TYPE_AND_CODE,'STNQLTY'),QLTY.ATTRIB_ALIAS_NAME) 
             BULK COLLECT INTO T_VARCHAR_DATA
         FROM 
             T_TRANS_ITEM_BOM_DTL SB, V_ITEM_VARIANT_DTL IV,  
             (
                 SELECT
                     PML.PARTY_MISC_LINK_ID AS PK_ID,PML.PARTY_ID,SAM.ATTRIB_CODE AS QUALITY,SAM.ATTRIB_CODE AS QLTY_CODE, 
                     PML.ATTRIB_ALIAS_NAME,PML.LINK_TYPE,PML.ATTRIB_ID1
                 FROM 
                     T_PARTY_MISC_LINK PML,
                     T_ITEM_ATTRIB_MASTER SAM,
                     T_TRANS_HDR TH,T_TRANS_HDR_EXTD TEXTD  
                 WHERE 
                     TH.TRANS_ID = TEXTD.TRANS_ID(+) AND    
                     TEXTD.PARTY_ID = PML.PARTY_ID(+) AND  
                     PML.ATTRIB_ID1 =SAM.ATTRIB_ID (+) AND
                     TH.TRANS_ID = arrData(1) AND 
                     PML.LINK_TYPE = 'A'  
              )QLTY               
         WHERE 
             F_GET_ATTRIBUTE_VALUE(IV.ATTRIB_TYPE_AND_CODE,'STNQLTY') = QLTY.QLTY_CODE(+) AND 
             SB.BOM_VARIANT_ID  = IV.VARIANT_ID (+) AND
             IV.ITEM_TYPE_ID = 1005   AND 
             SB.TRANS_ITEM_ID = arrData(2);   

     ELSIF qryType = 'GET-PARTYWISE-QUALITY-CODE' THEN
         SELECT  
             DISTINCT DECODE(QLTY.ATTRIB_ALIAS_NAME,NULL,F_GET_ATTRIBUTE_VALUE(IV.ATTRIB_TYPE_AND_CODE,'STNQLTY'),QLTY.ATTRIB_ALIAS_NAME) 
             BULK COLLECT INTO T_VARCHAR_DATA
         FROM 
             T_TRANS_ITEM_BOM_DTL SB, V_ITEM_VARIANT_DTL IV,  
             (
                 SELECT
                     PML.PARTY_MISC_LINK_ID AS PK_ID,PML.PARTY_ID,SAM.ATTRIB_DESC AS QUALITY,SAM.ATTRIB_CODE AS QLTY_CODE, 
                     PML.ATTRIB_ALIAS_NAME,PML.LINK_TYPE,PML.ATTRIB_ID1
                 FROM 
                     T_PARTY_MISC_LINK PML,
                     T_ITEM_ATTRIB_MASTER SAM,
                     T_TRANS_HDR TH,T_TRANS_HDR_EXTD TEXTD  
                 WHERE 
                     TH.TRANS_ID = TEXTD.TRANS_ID(+) AND    
                     TEXTD.PARTY_ID = PML.PARTY_ID(+) AND  
                     PML.ATTRIB_ID1 =SAM.ATTRIB_ID (+) AND
                     TH.TRANS_ID = arrData(1) AND 
                     PML.LINK_TYPE = 'A'  
              )QLTY               
         WHERE 
             F_GET_ATTRIBUTE_VALUE(IV.ATTRIB_TYPE_AND_CODE,'STNQLTY') = QLTY.QLTY_CODE(+) AND 
             SB.BOM_VARIANT_ID  = IV.VARIANT_ID (+) AND
             IV.ITEM_TYPE_ID = 1005   AND 
             SB.TRANS_ITEM_ID = arrData(2);   
    
     ELSIF qryType = 'GET-PARTYWISE-COLOR-CODE' THEN
         SELECT  
             DISTINCT DECODE(QLTY.ATTRIB_ALIAS_NAME,NULL,F_GET_ATTRIBUTE_VALUE(IV.ATTRIB_TYPE_AND_CODE,'STNCLR'),QLTY.ATTRIB_ALIAS_NAME) 
             BULK COLLECT INTO T_VARCHAR_DATA
         FROM 
             T_TRANS_ITEM_BOM_DTL SB, V_ITEM_VARIANT_DTL IV,  
             (
                 SELECT
                     PML.PARTY_MISC_LINK_ID AS PK_ID,PML.PARTY_ID,SAM.ATTRIB_DESC AS QUALITY,SAM.ATTRIB_CODE AS COLOR_CODE, 
                     PML.ATTRIB_ALIAS_NAME,PML.LINK_TYPE,PML.ATTRIB_ID1
                 FROM 
                     T_PARTY_MISC_LINK PML,
                     T_ITEM_ATTRIB_MASTER SAM,
                     T_TRANS_HDR TH,T_TRANS_HDR_EXTD TEXTD  
                 WHERE 
                     TH.TRANS_ID = TEXTD.TRANS_ID(+) AND    
                     TEXTD.PARTY_ID = PML.PARTY_ID(+) AND  
                     PML.ATTRIB_ID1 =SAM.ATTRIB_ID (+) AND
                     TH.TRANS_ID = arrData(1) AND 
                     PML.LINK_TYPE = 'CL'  
              )QLTY               
         WHERE 
             F_GET_ATTRIBUTE_VALUE(IV.ATTRIB_TYPE_AND_CODE,'STNCLR') = QLTY.COLOR_CODE(+) AND 
             SB.BOM_VARIANT_ID  = IV.VARIANT_ID (+) AND
             IV.ITEM_TYPE_ID = 1005   AND 
             SB.TRANS_ITEM_ID = arrData(2);  
                    
      ELSIF qryType = 'GET-PARTYWISE-QUALITY-CODE-BOM' THEN
         SELECT  
             DISTINCT NVL(QLTY.ATTRIB_ALIAS_NAME,F_GET_ATTRIBUTE_VALUE(IV.ATTRIB_TYPE_AND_CODE,'STNQLTY')) 
             BULK COLLECT INTO T_VARCHAR_DATA
         FROM 
             T_TRANS_ITEM_BOM_DTL SB, V_ITEM_VARIANT_DTL IV,  
             (
                 SELECT
                     PML.PARTY_MISC_LINK_ID AS PK_ID,PML.PARTY_ID,SAM.ATTRIB_DESC AS QUALITY,SAM.ATTRIB_CODE AS QLTY_CODE, 
                     PML.ATTRIB_ALIAS_NAME,PML.LINK_TYPE,PML.ATTRIB_ID1
                 FROM 
                     T_PARTY_MISC_LINK PML,
                     T_ITEM_ATTRIB_MASTER SAM,
                     T_TRANS_HDR TH,T_TRANS_HDR_EXTD TEXTD  
                 WHERE 
                     TH.TRANS_ID = TEXTD.TRANS_ID(+) AND    
                     TEXTD.PARTY_ID = PML.PARTY_ID(+) AND  
                     PML.ATTRIB_ID1 =SAM.ATTRIB_ID (+) AND
                     TH.TRANS_ID = arrData(1) AND 
                     PML.LINK_TYPE = 'A'  
              )QLTY               
         WHERE 
             F_GET_ATTRIBUTE_VALUE(IV.ATTRIB_TYPE_AND_CODE,'STNQLTY') = QLTY.QLTY_CODE(+) AND 
             SB.BOM_VARIANT_ID  = IV.VARIANT_ID (+) AND
             IV.ITEM_TYPE_ID = 1005   AND 
             SB.TRANS_ITEM_BOM_ID = arrData(2);   
    
     ELSIF qryType = 'GET-PARTYWISE-COLOR-CODE-BOM' THEN
         SELECT  
             DISTINCT NVL(QLTY.ATTRIB_ALIAS_NAME,F_GET_ATTRIBUTE_VALUE(IV.ATTRIB_TYPE_AND_CODE,'STNCLR')) 
             BULK COLLECT INTO T_VARCHAR_DATA
         FROM 
             T_TRANS_ITEM_BOM_DTL SB, V_ITEM_VARIANT_DTL IV,  
             (
                 SELECT
                     PML.PARTY_MISC_LINK_ID AS PK_ID,PML.PARTY_ID,SAM.ATTRIB_DESC AS QUALITY,SAM.ATTRIB_CODE AS COLOR_CODE, 
                     PML.ATTRIB_ALIAS_NAME,PML.LINK_TYPE,PML.ATTRIB_ID1
                 FROM 
                     T_PARTY_MISC_LINK PML,
                     T_ITEM_ATTRIB_MASTER SAM,
                     T_TRANS_HDR TH,T_TRANS_HDR_EXTD TEXTD  
                 WHERE 
                     TH.TRANS_ID = TEXTD.TRANS_ID(+) AND    
                     TEXTD.PARTY_ID = PML.PARTY_ID(+) AND  
                     PML.ATTRIB_ID1 =SAM.ATTRIB_ID (+) AND
                     TH.TRANS_ID = arrData(1) AND 
                     PML.LINK_TYPE = 'CL'  
              )QLTY               
         WHERE 
             F_GET_ATTRIBUTE_VALUE(IV.ATTRIB_TYPE_AND_CODE,'STNCLR') = QLTY.COLOR_CODE(+) AND 
             SB.BOM_VARIANT_ID  = IV.VARIANT_ID (+) AND
             IV.ITEM_TYPE_ID = 1005   AND 
             SB.TRANS_ITEM_BOM_ID = arrData(2);
            
     ELSIF qryType = 'INHOUSE_FINDING_WEIGHT' THEN
         SELECT 
             SUM(DECODE(IV.ITEM_STOCK_UOM_CODE,'WT',TIBD.QUANTITY,TIBD.QUANTITY * TIBD.CONVERSION_FACTOR ))
             BULK COLLECT INTO T_VARCHAR_DATA
         FROM 
             T_TRANS_ITEM_BOM_DTL TIBD,
             V_ITEM_VARIANT_RTN_DTL IV
         WHERE
             TIBD.BOM_VARIANT_ID = IV.VARIANT_ID
             AND IV.ITEM_GROUP_ID = 1866
             AND TIBD.TRANS_ITEM_ID = qryValues 
         GROUP BY 
             TIBD.TRANS_ITEM_ID;
            
     ELSIF qryType = 'INHOUSE_FINDING_COST' THEN
         SELECT 
             SUM(TIBD.TRANS_BOM_AMOUNT)
             BULK COLLECT INTO T_VARCHAR_DATA
         FROM 
             V_TRANS_ITEM_BOM_DTL TIBD,
             V_ITEM_VARIANT_RTN_DTL IV
         WHERE
             TIBD.BOM_VARIANT_ID = IV.VARIANT_ID
             AND IV.ITEM_GROUP_ID = 1866
             AND TIBD.TRANS_ITEM_ID = qryValues 
         GROUP BY 
             TIBD.TRANS_ITEM_ID;
    
     ELSIF qryType = 'FINDING_RATE_EXCLUDE_INHOUSE' THEN
         SELECT 
             AVG(TIBDE.TRANS_BOM_RATE)
             BULK COLLECT INTO T_VARCHAR_DATA
         FROM 
             T_TRANS_ITEM_BOM_DTL TIBD,
             T_TRANS_ITEM_BOM_DTL_EXTD TIBDE,
             V_ITEM_VARIANT_RTN_DTL IV
         WHERE
             TIBD.TRANS_ITEM_BOM_ID = TIBDE.TRANS_ITEM_BOM_ID (+)
             AND TIBD.BOM_VARIANT_ID = IV.VARIANT_ID
             AND IV.ITEM_GROUP_ID <> 1866
             AND IV.ITEM_TYPE_ID = 1003
             AND TIBD.TRANS_ITEM_ID = qryValues 
         GROUP BY 
             TIBD.TRANS_ITEM_ID;    
    
     ELSIF qryType = 'FINDING-PCS-MJ' THEN
         SELECT
             SUM(DECODE(IV.ITEM_STOCK_UOM_CODE,'PCS',TIBD.QUANTITY,TIBD.QUANTITY * TIBD.CONVERSION_FACTOR)) 
             BULK COLLECT INTO T_VARCHAR_DATA
         FROM 
             T_TRANS_ITEM_BOM_DTL TIBD,V_ITEM_VARIANT_RTN_DTL IV
         WHERE 
             TIBD.BOM_VARIANT_ID = IV.VARIANT_ID
             AND IV.ITEM_TYPE_ID =  1003
             AND UPPER(F_GET_ATTRIBUTE_VALUE(IV.ATTRIB_TYPE_AND_VALUE,'MTLTYPE')) IN ('GOLD','SILVER','PLATINUM')
             AND TIBD.TRANS_ITEM_ID = qryValues 
         GROUP BY 
             TIBD.TRANS_ITEM_ID;
            
     ELSIF qryType = 'FINDING-WEIGHT-MJ' THEN
         SELECT
             SUM(DECODE(IV.ITEM_STOCK_UOM_CODE,'WT',TIBD.QUANTITY,TIBD.QUANTITY * TIBD.CONVERSION_FACTOR)) 
             BULK COLLECT INTO T_VARCHAR_DATA
         FROM 
             T_TRANS_ITEM_BOM_DTL TIBD,V_ITEM_VARIANT_RTN_DTL IV
         WHERE 
             TIBD.BOM_VARIANT_ID = IV.VARIANT_ID
             AND IV.ITEM_TYPE_ID =  1003
             AND UPPER(F_GET_ATTRIBUTE_VALUE(IV.ATTRIB_TYPE_AND_VALUE,'MTLTYPE')) IN ('GOLD','SILVER','PLATINUM')
             AND TIBD.TRANS_ITEM_ID = qryValues 
         GROUP BY 
             TIBD.TRANS_ITEM_ID;
    
    ELSIF qryType = 'OTHER-FINDING-WEIGHT-MJ' THEN
         SELECT
             SUM(DECODE(IV.ITEM_STOCK_UOM_CODE,'WT',TIBD.QUANTITY,TIBD.QUANTITY * TIBD.CONVERSION_FACTOR)) 
             BULK COLLECT INTO T_VARCHAR_DATA
         FROM 
             T_TRANS_ITEM_BOM_DTL TIBD,V_ITEM_VARIANT_RTN_DTL IV
         WHERE 
             TIBD.BOM_VARIANT_ID = IV.VARIANT_ID
             AND IV.ITEM_TYPE_ID =  1003
             AND UPPER(F_GET_ATTRIBUTE_VALUE(IV.ATTRIB_TYPE_AND_VALUE,'MTLTYPE')) NOT IN ('GOLD','SILVER','PLATINUM')
             AND TIBD.TRANS_ITEM_ID = qryValues 
         GROUP BY 
             TIBD.TRANS_ITEM_ID;
             
     ELSIF qryType = 'OTHER-WEIGHT-STOCK-MJ' THEN
         SELECT
             SUM(DECODE(IV.ITEM_STOCK_UOM_CODE,'WT',S.QUANTITY,S.QUANTITY * S.CONVERSION_FACTOR)) 
             BULK COLLECT INTO T_VARCHAR_DATA
         FROM 
             T_STOCK_BOM_DTL S,V_ITEM_VARIANT_RTN_DTL IV
         WHERE 
             S.BOM_VARIANT_ID = IV.VARIANT_ID
             AND ( (IV.ITEM_TYPE_ID =  1003 AND UPPER(F_GET_ATTRIBUTE_VALUE(IV.ATTRIB_TYPE_AND_VALUE,'MTLTYPE')) NOT IN ('GOLD','SILVER','PLATINUM'))
                  OR IV.ITEM_TYPE_ID = 1063 )
             AND S.QUANTITY > 0
             AND S.STOCK_ID = qryValues 
         GROUP BY 
             S.STOCK_ID;
             
     ELSIF qryType = 'OTHER-METAL-WEIGHT-MJ' THEN
         SELECT
             SUM(DECODE(IV.ITEM_STOCK_UOM_CODE,'WT',TIBD.QUANTITY,TIBD.QUANTITY * TIBD.CONVERSION_FACTOR)) 
             BULK COLLECT INTO T_VARCHAR_DATA
         FROM 
             T_TRANS_ITEM_BOM_DTL TIBD,V_ITEM_VARIANT_RTN_DTL IV
         WHERE 
             TIBD.BOM_VARIANT_ID = IV.VARIANT_ID
             AND ( (IV.ITEM_TYPE_ID =  1003 AND UPPER(F_GET_ATTRIBUTE_VALUE(IV.ATTRIB_TYPE_AND_VALUE,'MTLTYPE')) NOT IN ('GOLD','SILVER','PLATINUM'))
                  OR IV.ITEM_TYPE_ID = 1063 )  
             AND TIBD.TRANS_ITEM_ID = qryValues 
         GROUP BY 
             TIBD.TRANS_ITEM_ID;
     
     ELSIF qryType = 'OTHER-METAL-WEIGHT-WITHOUT-SARAFA' THEN
         SELECT
             SUM(DECODE(IV.ITEM_STOCK_UOM_CODE,'WT',TIBD.QUANTITY,TIBD.QUANTITY * TIBD.CONVERSION_FACTOR)) 
             BULK COLLECT INTO T_VARCHAR_DATA
         FROM 
             T_TRANS_ITEM_BOM_DTL TIBD,V_ITEM_VARIANT_RTN_DTL IV
         WHERE 
             TIBD.BOM_VARIANT_ID = IV.VARIANT_ID
             AND ( (IV.ITEM_TYPE_ID =  1003 AND UPPER(F_GET_ATTRIBUTE_VALUE(IV.ATTRIB_TYPE_AND_VALUE,'MTLTYPE')) NOT IN ('GOLD','SILVER','PLATINUM'))
                  OR IV.ITEM_TYPE_ID = 1063 )
             AND UPPER(IV.ITEM_NAME) NOT LIKE ('SARAFA%')  
--              AND IV.ITEM_ID NOT IN (556197)
             AND TIBD.TRANS_ITEM_ID = qryValues 
         GROUP BY 
             TIBD.TRANS_ITEM_ID;
             
     ELSIF qryType = 'OTHER-METAL-WEIGHT-SARAFA' THEN
         SELECT
             SUM(DECODE(IV.ITEM_STOCK_UOM_CODE,'WT',TIBD.QUANTITY,TIBD.QUANTITY * TIBD.CONVERSION_FACTOR)) 
             BULK COLLECT INTO T_VARCHAR_DATA
         FROM 
             T_TRANS_ITEM_BOM_DTL TIBD,V_ITEM_VARIANT_RTN_DTL IV
         WHERE 
             TIBD.BOM_VARIANT_ID = IV.VARIANT_ID
             AND UPPER(IV.ITEM_NAME) LIKE ('SARAFA%')
--             AND IV.ITEM_ID = 556197  
             AND TIBD.TRANS_ITEM_ID = qryValues 
         GROUP BY 
             TIBD.TRANS_ITEM_ID;
             
     ELSIF qryType = 'OTHER-METAL-AMOUNT-MJ' THEN
         SELECT
             SUM(TIBDE.TRANS_BOM_AMOUNT) 
             BULK COLLECT INTO T_VARCHAR_DATA
         FROM 
             T_TRANS_ITEM_BOM_DTL TIBD,T_TRANS_ITEM_BOM_DTL_EXTD TIBDE,V_ITEM_VARIANT_RTN_DTL IV
         WHERE 
             TIBD.BOM_VARIANT_ID = IV.VARIANT_ID
             AND TIBD.TRANS_ITEM_BOM_ID = TIBDE.TRANS_ITEM_BOM_ID (+)
             AND ( (IV.ITEM_TYPE_ID =  1003 AND UPPER(F_GET_ATTRIBUTE_VALUE(IV.ATTRIB_TYPE_AND_VALUE,'MTLTYPE')) NOT IN ('GOLD','SILVER','PLATINUM'))
                  OR IV.ITEM_TYPE_ID = 1063 )  
             AND TIBD.TRANS_ITEM_ID = qryValues 
         GROUP BY 
             TIBD.TRANS_ITEM_ID;
      
    ELSIF qryType = 'OTHER-METAL-PCS-MJ' THEN
         SELECT
             SUM(DECODE(IV.ITEM_STOCK_UOM_CODE,'PCS',TIBD.QUANTITY,TIBD.QUANTITY * TIBD.CONVERSION_FACTOR)) 
             BULK COLLECT INTO T_VARCHAR_DATA
         FROM 
             T_TRANS_ITEM_BOM_DTL TIBD,V_ITEM_VARIANT_RTN_DTL IV
         WHERE 
             TIBD.BOM_VARIANT_ID = IV.VARIANT_ID
             AND ( (IV.ITEM_TYPE_ID =  1003 AND UPPER(F_GET_ATTRIBUTE_VALUE(IV.ATTRIB_TYPE_AND_VALUE,'MTLTYPE')) NOT IN ('GOLD','SILVER','PLATINUM'))
                  OR IV.ITEM_TYPE_ID = 1063 )  
             AND TIBD.TRANS_ITEM_ID = qryValues 
         GROUP BY 
             TIBD.TRANS_ITEM_ID;
                             
     ELSIF qryType = 'FINDING-PGWEIGHT-MJ' THEN
         SELECT
             SUM(DECODE(IV.ITEM_STOCK_UOM_CODE,'WT',TIBD.QUANTITY,TIBD.QUANTITY * TIBD.CONVERSION_FACTOR) * IV.FINENESS) 
             BULK COLLECT INTO T_VARCHAR_DATA
         FROM 
             T_TRANS_ITEM_BOM_DTL TIBD,V_ITEM_VARIANT_RTN_DTL IV
         WHERE 
             TIBD.BOM_VARIANT_ID = IV.VARIANT_ID
             AND IV.ITEM_TYPE_ID =  1003
             AND UPPER(F_GET_ATTRIBUTE_VALUE(IV.ATTRIB_TYPE_AND_VALUE,'MTLTYPE')) IN ('GOLD','SILVER','PLATINUM')
             AND TIBD.TRANS_ITEM_ID = qryValues 
         GROUP BY 
             TIBD.TRANS_ITEM_ID;
    
     ELSIF qryType = 'FINDING-AMOUNT-MJ' THEN
         SELECT
             SUM(TIBDE.TRANS_BOM_AMOUNT) 
             BULK COLLECT INTO T_VARCHAR_DATA
         FROM 
             T_TRANS_ITEM_BOM_DTL TIBD,T_TRANS_ITEM_BOM_DTL_EXTD TIBDE,V_ITEM_VARIANT_RTN_DTL IV
         WHERE 
             TIBD.BOM_VARIANT_ID = IV.VARIANT_ID
             AND TIBD.TRANS_ITEM_BOM_ID = TIBDE.TRANS_ITEM_BOM_ID
             AND IV.ITEM_TYPE_ID =  1003
             AND UPPER(F_GET_ATTRIBUTE_VALUE(IV.ATTRIB_TYPE_AND_VALUE,'MTLTYPE')) IN ('GOLD','SILVER','PLATINUM')
             AND TIBD.TRANS_ITEM_ID = qryValues 
         GROUP BY 
             TIBD.TRANS_ITEM_ID;
    
     ELSIF qryType = 'FINDING-VALUE-MJ' THEN
         SELECT
             SUM(TIBD.STOCK_VALUE) 
             BULK COLLECT INTO T_VARCHAR_DATA
         FROM 
             T_TRANS_ITEM_BOM_DTL TIBD,V_ITEM_VARIANT_RTN_DTL IV
         WHERE 
             TIBD.BOM_VARIANT_ID = IV.VARIANT_ID
             AND IV.ITEM_TYPE_ID =  1003
             AND UPPER(F_GET_ATTRIBUTE_VALUE(IV.ATTRIB_TYPE_AND_VALUE,'MTLTYPE')) IN ('GOLD','SILVER','PLATINUM')
             AND TIBD.TRANS_ITEM_ID = qryValues 
         GROUP BY 
             TIBD.TRANS_ITEM_ID;
    
     ELSIF qryType = 'FINDING-PCS-STOCK-MJ' THEN
         SELECT
             SUM(DECODE(IV.ITEM_STOCK_UOM_CODE,'PCS',S.QUANTITY,S.QUANTITY * S.CONVERSION_FACTOR)) 
             BULK COLLECT INTO T_VARCHAR_DATA
         FROM 
             T_STOCK_BOM_DTL S,V_ITEM_VARIANT_RTN_DTL IV
         WHERE 
             S.BOM_VARIANT_ID = IV.VARIANT_ID
             AND IV.ITEM_TYPE_ID =  1003
             AND UPPER(F_GET_ATTRIBUTE_VALUE(IV.ATTRIB_TYPE_AND_VALUE,'MTLTYPE')) IN ('GOLD','SILVER','PLATINUM')
             AND S.QUANTITY > 0
             AND S.STOCK_ID = qryValues 
         GROUP BY 
             S.STOCK_ID;
    
     ELSIF qryType = 'FINDING-WEIGHT-STOCK-MJ' THEN
         SELECT
             SUM(DECODE(IV.ITEM_STOCK_UOM_CODE,'WT',S.QUANTITY,S.QUANTITY * S.CONVERSION_FACTOR)) 
             BULK COLLECT INTO T_VARCHAR_DATA
         FROM 
             T_STOCK_BOM_DTL S,V_ITEM_VARIANT_RTN_DTL IV
         WHERE 
             S.BOM_VARIANT_ID = IV.VARIANT_ID
             AND IV.ITEM_TYPE_ID =  1003
             AND UPPER(F_GET_ATTRIBUTE_VALUE(IV.ATTRIB_TYPE_AND_VALUE,'MTLTYPE')) IN ('GOLD','SILVER','PLATINUM')
             AND S.QUANTITY > 0
             AND S.STOCK_ID = qryValues 
         GROUP BY 
             S.STOCK_ID;
    
     ELSIF qryType = 'FINDING-VALUE-STOCK-MJ' THEN
         SELECT
             SUM(S.STOCK_VALUE) 
             BULK COLLECT INTO T_VARCHAR_DATA
         FROM 
             T_STOCK_BOM_DTL S,V_ITEM_VARIANT_RTN_DTL IV
         WHERE 
             S.BOM_VARIANT_ID = IV.VARIANT_ID
             AND IV.ITEM_TYPE_ID =  1003
             AND UPPER(F_GET_ATTRIBUTE_VALUE(IV.ATTRIB_TYPE_AND_VALUE,'MTLTYPE')) IN ('GOLD','SILVER','PLATINUM')
             AND S.QUANTITY > 0
             AND S.STOCK_ID = qryValues 
         GROUP BY 
             S.STOCK_ID;
            
     ELSIF qryType = 'FINDING-PGWEIGHT-STOCK-MJ' THEN
         SELECT
             SUM(DECODE(IV.ITEM_STOCK_UOM_CODE,'WT',S.QUANTITY,S.QUANTITY * S.CONVERSION_FACTOR) * IV.FINENESS ) 
             BULK COLLECT INTO T_VARCHAR_DATA
         FROM 
             T_STOCK_BOM_DTL S,V_ITEM_VARIANT_RTN_DTL IV
         WHERE 
             S.BOM_VARIANT_ID = IV.VARIANT_ID
             AND IV.ITEM_TYPE_ID =  1003
             AND UPPER(F_GET_ATTRIBUTE_VALUE(IV.ATTRIB_TYPE_AND_VALUE,'MTLTYPE')) IN ('GOLD','SILVER','PLATINUM')
             AND S.QUANTITY > 0
             AND S.STOCK_ID = qryValues 
         GROUP BY 
             S.STOCK_ID;
                                
     ELSIF qryType = 'GET-SHAPESIZE-USED' THEN
         SELECT 
             DISTINCT F_GET_ATTRIBUTE_VALUE(IV.ATTRIB_TYPE_AND_CODE,'STNSHP')||'-'||RNG.PRANGE_CODE AS STN_SHAPE 
             BULK COLLECT INTO T_VARCHAR_DATA
         FROM 
             T_TRANS_ITEM_BOM_DTL SB, V_ITEM_VARIANT_DTL IV,  
             (     
                 SELECT 
                     SHP.ATTRIB_CODE AS SHAPE_CODE, 
                     SHP.ATTRIB_DESC AS SHAPE, 
                     ATTB.ATTRIB_CODE AS RANGE_CODE,
                     ATTB.ATTRIB_DESC AS RANGE, 
                     PATTB.ATTRIB_CODE AS PRANGE_CODE,    
                     PATTB.ATTRIB_DESC AS PRANGE  
                 FROM  
                     T_ITEM_ATTRIB_MASTER ATTB, T_ITEM_ATTRIB_MASTER_EXTD AEXTD, 
                     T_ITEM_ATTRIB_MASTER PATTB, T_ITEM_ATTRIB_MASTER SHP 
                 WHERE
                     ATTB.ATTRIB_ID = AEXTD.ATTRIB_ID(+) AND
                     AEXTD.SHAPE_ID = SHP.ATTRIB_ID(+) AND 
                     ATTB.PATTRIB_ID = PATTB.ATTRIB_ID(+) AND 
                     ATTB.ATTRIB_TYPE_ID = 11008 AND  
                     ATTB.ROW_STATUS > 0 
                 GROUP BY 
                     SHP.ATTRIB_CODE,ATTB.ATTRIB_CODE,ATTB.ATTRIB_DESC,PATTB.ATTRIB_CODE, 
                     PATTB.ATTRIB_DESC, SHP.ATTRIB_DESC                  
             ) RNG  
         WHERE 
             F_GET_ATTRIBUTE(IV.ATTRIB_TYPE_AND_CODE,'STNRNG') = RNG.RANGE_CODE AND
             F_GET_ATTRIBUTE(IV.ATTRIB_TYPE_AND_CODE,'STNSHP') = RNG.SHAPE_CODE AND
             SB.BOM_VARIANT_ID  = IV.VARIANT_ID(+) AND
             IV.ITEM_TYPE_ID = 1005  AND 
             SB.TRANS_ITEM_ID = arrData(1); 

    ELSIF qryType = 'FORMULA-RANGE-VALUE' THEN
        SELECT FRM.RANGE_DATA_TYPE_ID,FRLD.RANGE_FROM
        INTO RangeDataTypeId, RangeValueId
        FROM T_FORMULA_RANGE_MASTER FRM, T_FORMULA_RANGE_LOV_DTL FRLD
        WHERE FRLD.RANGE_ID = FRM.RANGE_ID
        AND FRLD.RANGE_DTL_ID = TO_NUMBER(qryValues);

        BEGIN
            ConfigId := 375;
            SELECT UPPER(CONFIG_VALUE) INTO strDataTypeDepdOn FROM T_CONFIG_GLOBAL WHERE CONFIG_ID = ConfigId;
        EXCEPTION
            WHEN NO_DATA_FOUND THEN
                strDataTypeDepdOn := 'CODE';
        END;

        IF RangeDataTypeId = 103 THEN
            SELECT CASE WHEN strDataTypeDepdOn = 'CODE' THEN ROLE_CODE
                WHEN strDataTypeDepdOn = 'DESC' THEN ROLE_NAME END
            BULK COLLECT INTO T_VARCHAR_DATA
            FROM T_AUTH_ROLE_MASTER
            WHERE ROLE_ID = RangeValueId;

        ELSIF RangeDataTypeId = 104 THEN
            SELECT CASE WHEN strDataTypeDepdOn = 'CODE' THEN EMPLOYEE_CODE
                WHEN strDataTypeDepdOn = 'DESC' THEN EMPLOYEE_NAME END
            BULK COLLECT INTO T_VARCHAR_DATA
            FROM T_AUTH_EMPLOYEE_MASTER
            WHERE ROW_STATUS = 1 AND EMPLOYEE_ID = RangeValueId;

        ELSIF RangeDataTypeId = 106 OR RangeDataTypeId = 133 THEN
            SELECT CASE WHEN strDataTypeDepdOn = 'CODE' THEN ATTRIB_CODE
                WHEN strDataTypeDepdOn = 'DESC' THEN ATTRIB_DESC END
            BULK COLLECT INTO T_VARCHAR_DATA
            FROM T_ITEM_ATTRIB_MASTER IAM
            WHERE ROW_STATUS = 1 AND IAM.ATTRIB_ID = RangeValueId;

        ELSIF RangeDataTypeId = 109 OR RangeDataTypeId = 110 OR RangeDataTypeId = 111 OR RangeDataTypeId = 112 OR RangeDataTypeId = 126 OR RangeDataTypeId = 128 THEN
            SELECT CASE WHEN strDataTypeDepdOn = 'CODE' THEN CONFIG_CODE
                WHEN strDataTypeDepdOn = 'DESC' THEN CONFIG_VALUE END
            BULK COLLECT INTO T_VARCHAR_DATA
            FROM T_CONFIG_FIXED_DATA CFD
            WHERE CONFIG_ID = RangeValueId;

        ELSIF RangeDataTypeId = 113 OR RangeDataTypeId = 114 OR RangeDataTypeId = 122 OR RangeDataTypeId = 137 OR RangeDataTypeId = 140 THEN
            SELECT CASE WHEN strDataTypeDepdOn = 'CODE' THEN PM.PARTY_CODE
                WHEN strDataTypeDepdOn = 'DESC' THEN PM.PARTY_NAME END
            BULK COLLECT INTO T_VARCHAR_DATA
            FROM T_PARTY_MASTER PM
            WHERE ROW_STATUS > -1 AND PM.PARTY_ID = RangeValueId;

        ELSIF RangeDataTypeId = 117 THEN
            SELECT VARIANT_NAME
            BULK COLLECT INTO T_VARCHAR_DATA
            FROM T_ITEM_VARIANT_MASTER
            WHERE ROW_STATUS = 1 AND VARIANT_ID = RangeValueId;

        ELSIF RangeDataTypeId = 118 THEN
            SELECT CASE WHEN strDataTypeDepdOn = 'CODE' THEN OPERATION_CODE
                WHEN strDataTypeDepdOn = 'DESC' THEN OPERATION_NAME END
            BULK COLLECT INTO T_VARCHAR_DATA
            FROM T_OPERATION_MASTER
            WHERE ROW_STATUS > -1 AND OPERATION_ID = RangeValueId;

        ELSIF RangeDataTypeId = 119 THEN
            SELECT CASE WHEN strDataTypeDepdOn = 'CODE' THEN ACCOUNT_CODE
                WHEN strDataTypeDepdOn = 'DESC' THEN ACCOUNT_NAME END
            BULK COLLECT INTO T_VARCHAR_DATA
            FROM T_FA_ACCOUNT_MASTER  
            WHERE ACCOUNT_ID = RangeValueId;
        
        ELSIF RangeDataTypeId = 120 THEN
            SELECT CASE WHEN strDataTypeDepdOn = 'CODE' THEN MRM.REGION_CODE
                WHEN strDataTypeDepdOn = 'DESC' THEN REGION_NAME END
            BULK COLLECT INTO T_VARCHAR_DATA
            FROM T_MISC_REGION_MASTER MRM
            WHERE MRM.REGION_ID = RangeValueId;

        ELSIF RangeDataTypeId = 130 OR RangeDataTypeId = 138 THEN
            SELECT ITEM_NAME
            BULK COLLECT INTO T_VARCHAR_DATA
            FROM T_ITEM_MASTER
            WHERE ROW_STATUS = 1 AND ITEM_ID = RangeValueId;

        ELSIF RangeDataTypeId = 131 THEN
            SELECT CASE WHEN strDataTypeDepdOn = 'CODE' THEN DATA_CODE
                WHEN strDataTypeDepdOn = 'DESC' THEN DATA_VALUE END
            BULK COLLECT INTO T_VARCHAR_DATA
            FROM T_MISC_COMMON_DATA_MASTER
            WHERE DATA_ID = RangeValueId;

        ELSIF RangeDataTypeId = 132 OR RangeDataTypeId = 134 THEN
            SELECT CASE WHEN strDataTypeDepdOn = 'CODE' THEN LOCATION_CODE
                WHEN strDataTypeDepdOn = 'DESC' THEN LOCATION_NAME END 
            BULK COLLECT INTO T_VARCHAR_DATA
            FROM T_APP_LOCATION_MASTER
            WHERE LOCATION_ID = RangeValueId;            
        END IF;

     ELSIF qryType = 'GET_TRACKING_NO' THEN
    
         /*
        
         SELECT TRACKING_NO
         BULK COLLECT INTO T_VARCHAR_DATA
         FROM T_TRANS_SHIPPING_DTL
         WHERE
             TRANS_ID = arrData(1);
            
         */
        
         NULL;  
                   
     ELSIF qryType = 'GET_PRANGE_SHAPEWISE' THEN
         SELECT 
             DISTINCT 
             IA.PRANGE_CODE BULK COLLECT INTO T_VARCHAR_DATA 
         FROM 
             T_TRANS_ITEM_BOM_DTL TIB, 
             V_ITEM_VARIANT_DTL IV,V_ITEM_ATTRIB_RANGE_VW IA 
         WHERE
             TIB.BOM_VARIANT_ID = IV.VARIANT_ID 
             AND F_GET_ATTRIBUTE(IV.ATTRIB_TYPE_AND_CODE,'STNSHP') = IA.SHAPE_CODE(+)
             AND F_GET_ATTRIBUTE(IV.ATTRIB_TYPE_AND_CODE,'STNRNG') = IA.RANGE_CODE(+)
             AND IV.ITEM_TYPE_ID = 1005
             AND TIB.QUANTITY* TIB.CONVERSION_FACTOR > 0
             AND TIB.QUANTITY /(TIB.QUANTITY* TIB.CONVERSION_FACTOR)  >= .20
             AND F_GET_ATTRIBUTE(IV.ATTRIB_TYPE_AND_CODE,'STNSHP') = ARRDATA(2) 
             AND TIB.TRANS_ITEM_ID = ARRDATA(1)
         GROUP BY
             TIB.TRANS_ITEM_ID, 
             IA.PRANGE_CODE,F_GET_ATTRIBUTE(IV.ATTRIB_TYPE_AND_CODE,'STNSHP') ;
    
     ELSIF qryType = 'GET_PRANGE(LOOSE)' THEN
         SELECT 
             DISTINCT 
             IA.PRANGE_CODE BULK COLLECT INTO T_VARCHAR_DATA 
         FROM 
             T_TRANS_ITEM_DTL TIB, 
             V_ITEM_VARIANT_DTL IV,V_ITEM_ATTRIB_RANGE_VW IA 
         WHERE
             TIB.VARIANT_ID = IV.VARIANT_ID 
             AND F_GET_ATTRIBUTE(IV.ATTRIB_TYPE_AND_CODE,'STNRNG') = IA.RANGE_CODE(+)
             AND IV.ITEM_TYPE_ID = 1005
             AND TIB.TRANS_ITEM_ID = ARRDATA(1) ;
      
     ELSIF qryType = 'FINDING_TYPE' THEN
         SELECT DISTINCT F_GET_ATTRIBUTE_VALUE(IV.ATTRIB_TYPE_AND_VALUE||'^'||IV.ATTRIB_TYPE_AND_VALUE_A,'FINDINGTYPE')
         BULK COLLECT INTO T_VARCHAR_DATA
         FROM T_TRANS_ITEM_BOM_DTL STB, V_ITEM_VARIANT_RTN_DTL IV 
         WHERE STB.BOM_VARIANT_ID  = IV.VARIANT_ID
         AND IV.ITEM_TYPE_ID = 1003 
         AND STB.TRANS_ITEM_ID = qryValues;
         
    ELSIF qryType = 'FINDING_TYPE_CHAIN' THEN
          
         SELECT DISTINCT F_GET_ATTRIBUTE_VALUE(IV.ATTRIB_TYPE_AND_VALUE, 'FINDINGTYPE')
         BULK COLLECT INTO T_VARCHAR_DATA
         FROM T_TRANS_ITEM_BOM_DTL STB, V_ITEM_VARIANT_RTN_DTL IV 
         WHERE STB.BOM_VARIANT_ID  = IV.VARIANT_ID
         AND IV.ITEM_TYPE_ID = 1003 
         AND UPPER(F_GET_ATTRIBUTE_VALUE(IV.ATTRIB_TYPE_AND_VALUE, 'FINDINGTYPE')) LIKE '%CHAIN%'
         AND STB.TRANS_ITEM_ID = qryValues;
    
     ELSIF qryType = 'METAL_KARAT' THEN
         SELECT DISTINCT MV.KARAT_CODE
         BULK COLLECT INTO T_VARCHAR_DATA
         FROM T_TRANS_ITEM_BOM_DTL STB, T_SMRY_ITEM_VARIANT_METAL MV 
         WHERE STB.BOM_VARIANT_ID  = MV.VARIANT_ID
         AND MV.BASE_ITEM_TYPE_ID = 1004 
         AND STB.TRANS_ITEM_ID = qryValues;
         
     ELSIF qryType = 'METAL_NAME' THEN
        SELECT IV.ITEM_NAME
        BULK COLLECT INTO T_VARCHAR_DATA
        FROM T_TRANS_ITEM_BOM_DTL TIBD,
             V_ITEM_VARIANT_RTN_DTL IV
        WHERE TIBD.BOM_VARIANT_ID = IV.VARIANT_ID
        AND IV.ITEM_TYPE_ID = 1004
        AND TIBD.TRANS_ITEM_ID = qryValues;
        
     ELSIF qryType = 'METAL_VARIANT_NAME' THEN
        SELECT IV.VARIANT_NAME
        BULK COLLECT INTO T_VARCHAR_DATA
        FROM T_TRANS_ITEM_BOM_DTL TIBD,
             V_ITEM_VARIANT_RTN_DTL IV
        WHERE TIBD.BOM_VARIANT_ID = IV.VARIANT_ID
        AND IV.ITEM_TYPE_ID = 1004
        AND TIBD.TRANS_ITEM_ID = qryValues;
                
     ELSIF qryType = 'METAL_NAME_STOCK' THEN
        SELECT IV.ITEM_NAME
        BULK COLLECT INTO T_VARCHAR_DATA
        FROM T_TRANS_ITEM_BOM_DTL TIBD,
             V_ITEM_VARIANT_RTN_DTL IV,
             T_TRANS_ITEM_DTL TID
        WHERE TIBD.BOM_VARIANT_ID = IV.VARIANT_ID
        AND TIBD.TRANS_ITEM_ID = TID.TRANS_ITEM_ID
        AND IV.ITEM_TYPE_ID = 1004
        AND TID.DEST_STOCK_ID = qryValues;        
         
     ELSIF qryType = 'METAL_VARIANT_NAME_STOCK' THEN
        SELECT IV.VARIANT_NAME
        BULK COLLECT INTO T_VARCHAR_DATA
        FROM T_TRANS_ITEM_BOM_DTL TIBD,
             V_ITEM_VARIANT_RTN_DTL IV,
             T_TRANS_ITEM_DTL TID
        WHERE TIBD.BOM_VARIANT_ID = IV.VARIANT_ID
        AND TIBD.TRANS_ITEM_ID = TID.TRANS_ITEM_ID
        AND IV.ITEM_TYPE_ID = 1004
        AND TID.DEST_STOCK_ID = qryValues; 
                
     ELSIF qryType = 'METAL_KARAT_DESC' THEN
         SELECT DISTINCT MV.KARAT_DESC
         BULK COLLECT INTO T_VARCHAR_DATA
         FROM T_TRANS_ITEM_BOM_DTL STB, T_SMRY_ITEM_VARIANT_METAL MV 
         WHERE STB.BOM_VARIANT_ID  = MV.VARIANT_ID
         AND MV.BASE_ITEM_TYPE_ID = 1004 
         AND STB.TRANS_ITEM_ID = qryValues;
        
     ELSIF qryType = 'LOOSE_METAL_PG_WEIGHT' THEN
         SELECT  MV.FINENESS * DECODE(IV.ITEM_STOCK_UOM_CODE,'WT',STB.QUANTITY,STB.QUANTITY * STB.CONVERSION_FACTOR)
         BULK COLLECT INTO T_VARCHAR_DATA
         FROM T_TRANS_ITEM_DTL STB, T_SMRY_ITEM_VARIANT_METAL MV,V_ITEM_VARIANT_RTN_DTL IV 
         WHERE STB.VARIANT_ID  = MV.VARIANT_ID
         AND STB.VARIANT_ID = IV.VARIANT_ID 
         AND STB.TRANS_ITEM_ID = qryValues;
    
     ELSIF qryType = 'GET_SKU' THEN
         SELECT
             DISTINCT PML.ADD_FLD1
             BULK COLLECT INTO T_VARCHAR_DATA
         FROM
             V_TRANS_HDR TH,
             T_TRANS_ITEM_DTL TID,
             T_PARTY_MISC_LINK PML
         WHERE
             TID.TRANS_ID = TH.TRANS_ID 
             AND TID.VARIANT_ID = PML.VARIANT_ID
             AND TH.PARTY_ID = PML.PARTY_ID 
             AND PML.LINK_TYPE = 'S'
             AND TID.TRANS_ITEM_ID = qryValues
             AND ROWNUM = 1 ;
     
     ELSIF qryType = 'GET_SKU(USCUST)' THEN
         SELECT
            DISTINCT PML.ADD_FLD1
            BULK COLLECT INTO T_VARCHAR_DATA
        FROM
            V_TRANS_HDR TH,
            T_TRANS_ITEM_DTL TID,
            V_TRANS_HDR SORTH,
            T_PARTY_MASTER PM,
            T_PARTY_MISC_LINK PML
        WHERE
            TID.TRANS_ID = TH.TRANS_ID 
            AND TID.VARIANT_ID = PML.VARIANT_ID
            AND TID.SOR_TRANS_ID = SORTH.TRANS_ID
            AND PML.PARTY_ID = PM.PARTY_ID  
            AND SORTH.CUSTOMER_PARTY_NAME = PM.PARTY_NAME 
            AND PML.LINK_TYPE = 'S'
            AND TID.TRANS_ITEM_ID = qryValues
            AND ROWNUM = 1 ;         
    
     ELSIF qryType = 'GET_RETAIL_PRICE(SKU)' THEN
         SELECT
            DISTINCT PML.ADD_NUM1
            BULK COLLECT INTO T_VARCHAR_DATA
        FROM
            V_TRANS_HDR TH,
            T_TRANS_ITEM_DTL TID,
            V_TRANS_HDR SORTH,
            T_PARTY_MASTER PM,
            T_PARTY_MISC_LINK PML
        WHERE
            TID.TRANS_ID = TH.TRANS_ID 
            AND TID.VARIANT_ID = PML.VARIANT_ID
            AND TID.SOR_TRANS_ID = SORTH.TRANS_ID
            AND PML.PARTY_ID = PM.PARTY_ID  
            AND SORTH.CUSTOMER_PARTY_NAME = PM.PARTY_NAME 
            AND PML.LINK_TYPE = 'S'
            AND TID.TRANS_ITEM_ID = qryValues
            AND ROWNUM = 1 ;
            
     ELSIF qryType = 'GET_UPC_CODE' THEN
         SELECT
             DISTINCT PML.ADD_FLD2
             BULK COLLECT INTO T_VARCHAR_DATA
         FROM
             V_TRANS_HDR TH,
             T_TRANS_ITEM_DTL TID,
             T_PARTY_MISC_LINK PML
         WHERE
             TID.TRANS_ID = TH.TRANS_ID 
             AND TID.VARIANT_ID = PML.VARIANT_ID
             AND TH.PARTY_ID = PML.PARTY_ID 
             AND PML.LINK_TYPE = 'S'
             AND TID.TRANS_ITEM_ID = qryValues 
             AND ROWNUM = 1;

     ELSIF qryType = 'GOLD_RATE(BOM)' THEN
         SELECT
             NVL(MAX(TIBDE.TRANS_BOM_RATE),0)     
             BULK COLLECT INTO T_VARCHAR_DATA
         FROM
             T_TRANS_ITEM_BOM_DTL TIBD,
             V_ITEM_VARIANT_RTN_DTL IV,
             T_TRANS_ITEM_BOM_DTL_EXTD TIBDE
         WHERE
             TIBD.TRANS_ITEM_BOM_ID = TIBDE.TRANS_ITEM_BOM_ID (+)
             AND TIBD.BOM_VARIANT_ID = IV.VARIANT_ID 
             AND IV.ITEM_TYPE_ID = 1004
             AND IV.ITEM_GROUP_ID = 1501
             AND TIBD.TRANS_ITEM_ID = qryValues
         GROUP BY 
             TIBD.TRANS_ITEM_ID;
                    
     ELSIF qryType = 'GOLD_AMOUNT(BOM)' THEN
         SELECT
             NVL(MAX(TIBDE.TRANS_BOM_AMOUNT),0)     
             BULK COLLECT INTO T_VARCHAR_DATA
         FROM
             T_TRANS_ITEM_BOM_DTL TIBD,
             V_ITEM_VARIANT_RTN_DTL IV,
             T_TRANS_ITEM_BOM_DTL_EXTD TIBDE
         WHERE
             TIBD.TRANS_ITEM_BOM_ID = TIBDE.TRANS_ITEM_BOM_ID (+)
             AND TIBD.BOM_VARIANT_ID = IV.VARIANT_ID 
             AND IV.ITEM_TYPE_ID = 1004
             AND IV.ITEM_GROUP_ID = 1501
             AND TIBD.TRANS_ITEM_ID = qryValues
         GROUP BY 
             TIBD.TRANS_ITEM_ID;
            
     ELSIF qryType = 'GOLD_KARAT' THEN
         SELECT DISTINCT MV.KARAT_CODE
         BULK COLLECT INTO T_VARCHAR_DATA
         FROM T_TRANS_ITEM_BOM_DTL STB, T_SMRY_ITEM_VARIANT_METAL MV 
         WHERE STB.BOM_VARIANT_ID  = MV.VARIANT_ID
         AND MV.BASE_ITEM_TYPE_ID = 1004
         AND MV.BASE_ITEM_GROUP_ID = 1501
         AND STB.TRANS_ITEM_ID = qryValues;
            
     ELSIF qryType = 'GOLD_KARAT_STOCK' THEN
         SELECT DISTINCT MV.KARAT_CODE
         BULK COLLECT INTO T_VARCHAR_DATA
         FROM T_STOCK_BOM_DTL STB, T_SMRY_ITEM_VARIANT_METAL MV 
         WHERE STB.BOM_VARIANT_ID  = MV.VARIANT_ID
         AND MV.BASE_ITEM_TYPE_ID = 1004
         AND MV.BASE_ITEM_GROUP_ID = 1501
         AND STB.STOCK_ID = qryValues;
                  
     ELSIF qryType = 'PLAT_KARAT' THEN
         SELECT DISTINCT MV.KARAT_CODE
         BULK COLLECT INTO T_VARCHAR_DATA
         FROM T_TRANS_ITEM_BOM_DTL STB, T_SMRY_ITEM_VARIANT_METAL MV 
         WHERE STB.BOM_VARIANT_ID  = MV.VARIANT_ID
         AND MV.BASE_ITEM_TYPE_ID = 1004
         AND MV.BASE_ITEM_GROUP_ID = 1502
         AND STB.TRANS_ITEM_ID = qryValues;
            
     ELSIF qryType = 'PLAT_KARAT_STOCK' THEN
         SELECT DISTINCT MV.KARAT_CODE
         BULK COLLECT INTO T_VARCHAR_DATA
         FROM T_STOCK_BOM_DTL STB, T_SMRY_ITEM_VARIANT_METAL MV 
         WHERE STB.BOM_VARIANT_ID  = MV.VARIANT_ID
         AND MV.BASE_ITEM_TYPE_ID = 1004
         AND MV.BASE_ITEM_GROUP_ID = 1502
         AND STB.STOCK_ID = qryValues;
         
     ELSIF qryType = 'METAL_TYPE' THEN
         SELECT DISTINCT CFD.CONFIG_VALUE  
         BULK COLLECT INTO T_VARCHAR_DATA
         FROM T_TRANS_ITEM_BOM_DTL STB, T_SMRY_ITEM_VARIANT_METAL MV ,T_CONFIG_FIXED_DATA CFD 
         WHERE STB.BOM_VARIANT_ID  = MV.VARIANT_ID
         AND MV.BASE_ITEM_GROUP_ID = CFD.CONFIG_ID     
         AND MV.BASE_ITEM_TYPE_ID = 1004 
         AND STB.TRANS_ITEM_ID = qryValues;
         
     
     ELSIF qryType = 'METAL_TYPE(STOCK_ID)' THEN
         SELECT DISTINCT CFD.CONFIG_VALUE  
         BULK COLLECT INTO T_VARCHAR_DATA
         FROM T_STOCK_BOM_DTL STB, T_SMRY_ITEM_VARIANT_METAL MV ,T_CONFIG_FIXED_DATA CFD 
         WHERE STB.BOM_VARIANT_ID  = MV.VARIANT_ID
         AND MV.BASE_ITEM_GROUP_ID = CFD.CONFIG_ID     
         AND MV.BASE_ITEM_TYPE_ID = 1004 
         AND STB.STOCK_ID = qryValues;
     
     
     ELSIF qryType = 'METAL_TYPE(STOCKID)' THEN
         SELECT DISTINCT CFD.ITEM_GROUP  
         BULK COLLECT INTO T_VARCHAR_DATA
         FROM T_STOCK_BOM_DTL STB, T_SMRY_ITEM_VARIANT_METAL MV ,V_ITEM_VARIANT_RTN_DTL CFD 
         WHERE STB.BOM_VARIANT_ID  = MV.VARIANT_ID
         AND STB.BOM_VARIANT_ID = CFD.VARIANT_ID     
         AND CFD.ITEM_TYPE_ID = 1004 
         AND STB.STOCK_ID = qryValues;
         
     ELSIF qryType = 'TREE_METAL_KARAT' THEN
         SELECT DISTINCT MV.KARAT_CODE
         BULK COLLECT INTO T_VARCHAR_DATA
         FROM T_TRANS_ITEM_BOM_DTL STB, T_SMRY_ITEM_VARIANT_METAL MV 
         WHERE STB.ACTUAL_VARIANT_ID = MV.VARIANT_ID
         AND STB.TRANS_ITEM_ID = qryValues;
    
    
     ELSIF qryType = 'TREE_METAL_COLOR' THEN
         SELECT DISTINCT MV.COLOR_CODE  
         BULK COLLECT INTO T_VARCHAR_DATA
         FROM T_TRANS_ITEM_BOM_DTL STB, T_SMRY_ITEM_VARIANT_METAL MV 
         WHERE STB.ACTUAL_VARIANT_ID = MV.VARIANT_ID
         AND STB.TRANS_ITEM_ID = qryValues;
     
     ELSIF qryType = 'STOCK_METAL_KARAT' THEN
    
         SELECT DISTINCT MV.KARAT_CODE
         BULK COLLECT INTO T_VARCHAR_DATA
         FROM T_STOCK_BOM_DTL STB, T_SMRY_ITEM_VARIANT_METAL MV 
         WHERE (CASE WHEN STB.ACTUAL_VARIANT_ID >0 THEN STB.ACTUAL_VARIANT_ID ELSE STB.BOM_VARIANT_ID END)  = MV.VARIANT_ID
         AND STB.STOCK_ID = qryValues;
    
     ELSIF qryType = 'MODEL-METAL-KARAT' THEN
         SELECT DISTINCT SIVM.KARAT_CODE
         BULK COLLECT INTO T_VARCHAR_DATA
         FROM T_TRANS_ITEM_BOM_DTL TIBD, T_SMRY_ITEM_VARIANT_METAL SIVM 
         WHERE TIBD.BOM_VARIANT_ID  = SIVM.VARIANT_ID AND TIBD.PARENT_VARIANT_ID = ARRDATA(1) AND TIBD.TRANS_ITEM_ID = ARRDATA(2);
         
     ELSIF qryType = 'METAL_COLOR' THEN
         SELECT DISTINCT F_Get_Attribute_Value(MV.ATTRIB_TYPE_AND_CODE, 'CLR')
         BULK COLLECT INTO T_VARCHAR_DATA
         FROM T_TRANS_ITEM_BOM_DTL STB,V_ITEM_VARIANT_RTN_DTL MV 
         WHERE STB.BOM_VARIANT_ID  = MV.VARIANT_ID
         AND MV.ITEM_TYPE_ID = 1004 
         AND STB.TRANS_ITEM_ID =  qryValues;
         
     ELSIF qryType = 'METAL_COLOR(STOCK)' THEN
        SELECT DISTINCT F_Get_Attribute_Value(MV.ATTRIB_TYPE_AND_CODE, 'CLR')
         BULK COLLECT INTO T_VARCHAR_DATA
         FROM T_STOCK_BOM_DTL STB,V_ITEM_VARIANT_RTN_DTL MV 
         WHERE STB.BOM_VARIANT_ID  = MV.VARIANT_ID
         AND MV.ITEM_TYPE_ID = 1004 
         AND STB.STOCK_ID =  qryValues;

     ELSIF qryType = 'LAST_TRANS' THEN
         SELECT  
            CONFIG_VALUE BULK COLLECT INTO T_VARCHAR_DATA
         FROM
         (
            SELECT
               CFD.CONFIG_VALUE,  
                ROW_NUMBER() OVER(ORDER BY TH.TRANS_DATE DESC,TH.TRANS_ID DESC) AS RNO 
            FROM 
                T_TRANS_ITEM_DTL TID,T_TRANS_HDR TH,T_CONFIG_FIXED_DATA CFD 
            WHERE 
                TH.TRANS_ID = TID.TRANS_ID 
                AND TH.TRANS_SUBTYPE_ID = CFD.CONFIG_ID
                AND TH.TRANS_TYPE IN ('INV','MSI','PKG','MSR')
                AND TID.ROW_STATUS = 1
                AND TID.STOCK_CODE =  qryValues 
         )
         WHERE RNO = 1 ;    
      
     ELSIF qryType = 'NEXT_OPERATION' THEN
         
        SELECT
            OM.OPERATION_NAME BULK COLLECT INTO T_VARCHAR_DATA
        FROM
            T_STOCK_BATCH_ROUTING_DTL SBRD,T_OPERATION_MASTER OM,
            (
                SELECT 
                    SBRD.BATCH_ID,
                    DECODE(SBRD.OPERATION_ID,374,SBRD.SEQUENCE_NO-1,SBRD.SEQUENCE_NO) AS SEQUENCE_NO
                FROM 
                    T_STOCK_BATCH_ROUTING_DTL SBRD,T_STOCK_BATCH_TRANS_LINK SBTL
                WHERE 
                    SBRD.BATCH_ID = SBTL.BATCH_ID
                    AND SBRD.OPERATION_ID = SBTL.OPERATION_ID
                    AND  SBRD.BATCH_ID = qryValues       
            )SBR
        WHERE
            SBRD.BATCH_ID = SBR.BATCH_ID AND SBRD.OPERATION_ID = OM.OPERATION_ID
            AND SBRD.SEQUENCE_NO = SBR.SEQUENCE_NO + 1 ;   
         
      ELSIF qryType = 'LAST_OPERATION' THEN
         SELECT  
            OPERATION_ID BULK COLLECT INTO T_VARCHAR_DATA
         FROM
         (
            SELECT OPERATION_ID,ROW_NUMBER() OVER(ORDER BY SEQUENCE_NO DESC ) AS RNO 
            FROM T_STOCK_BATCH_ROUTING_DTL 
            WHERE BATCH_ID  =  qryValues 
         )
         WHERE RNO = 1 ;
         
      ELSIF qryType = 'METAL_COLOR_DESC' THEN
         SELECT DISTINCT F_Get_Attribute_Value(MV.ATTRIB_TYPE_AND_VALUE, 'CLR')
         BULK COLLECT INTO T_VARCHAR_DATA
         FROM T_TRANS_ITEM_BOM_DTL STB,V_ITEM_VARIANT_RTN_DTL MV 
         WHERE STB.BOM_VARIANT_ID  = MV.VARIANT_ID
         AND MV.ITEM_TYPE_ID = 1004 
         AND STB.TRANS_ITEM_ID =  qryValues;

    ELSIF qryType = 'MIN_MMSIZE(MIN)' THEN
        SELECT PML.ATTRIB_ALIAS_NAME
        BULK COLLECT INTO T_VARCHAR_DATA
        FROM T_TRANS_ITEM_BOM_DTL TIBD,V_ITEM_VARIANT_RTN_DTL IV,T_PARTY_MISC_LINK PML
        WHERE TIBD.BOM_VARIANT_ID = IV.VARIANT_ID
        AND F_GET_ATTRIBUTE_ID(IV.ATTRIB_TYPE_AND_ATTRIB_ID||'^'||IV.ATTRIB_TYPE_AND_ATTRIB_ID_A,11004) = PML.ATTRIB_ID1
        AND F_GET_ATTRIBUTE_ID(IV.ATTRIB_TYPE_AND_ATTRIB_ID||'^'||IV.ATTRIB_TYPE_AND_ATTRIB_ID_A,11008) = PML.ATTRIB_ID2
        AND IV.ITEM_TYPE_ID = 1005 AND PML.LINK_TYPE = 'SS' 
        AND TIBD.TRANS_ITEM_BOM_ID =  qryValues;

    ELSIF qryType = 'MAX_MMSIZE(MAX)' THEN
        SELECT PML.REMITT_INSTRUCTION
        BULK COLLECT INTO T_VARCHAR_DATA
        FROM T_TRANS_ITEM_BOM_DTL TIBD,V_ITEM_VARIANT_RTN_DTL IV,T_PARTY_MISC_LINK PML
        WHERE TIBD.BOM_VARIANT_ID = IV.VARIANT_ID
        AND F_GET_ATTRIBUTE_ID(IV.ATTRIB_TYPE_AND_ATTRIB_ID||'^'||IV.ATTRIB_TYPE_AND_ATTRIB_ID_A,11004) = PML.ATTRIB_ID1
        AND F_GET_ATTRIBUTE_ID(IV.ATTRIB_TYPE_AND_ATTRIB_ID||'^'||IV.ATTRIB_TYPE_AND_ATTRIB_ID_A,11008) = PML.ATTRIB_ID2
        AND IV.ITEM_TYPE_ID = 1005 AND PML.LINK_TYPE = 'SS' 
        AND TIBD.TRANS_ITEM_BOM_ID =  qryValues;

    ELSIF qryType = 'MIN_MMSIZE' THEN
        SELECT PML.NOTES_1
        BULK COLLECT INTO T_VARCHAR_DATA
        FROM T_TRANS_ITEM_BOM_DTL TIBD,V_ITEM_VARIANT_RTN_DTL IV,T_PARTY_MISC_LINK PML
        WHERE TIBD.BOM_VARIANT_ID = IV.VARIANT_ID
        AND F_GET_ATTRIBUTE_ID(IV.ATTRIB_TYPE_AND_ATTRIB_ID||'^'||IV.ATTRIB_TYPE_AND_ATTRIB_ID_A,11004) = PML.ATTRIB_ID1
        AND F_GET_ATTRIBUTE_ID(IV.ATTRIB_TYPE_AND_ATTRIB_ID||'^'||IV.ATTRIB_TYPE_AND_ATTRIB_ID_A,11008) = PML.ATTRIB_ID2
        AND IV.ITEM_TYPE_ID = 1005 AND PML.LINK_TYPE = 'SS' 
        AND TIBD.TRANS_ITEM_BOM_ID =  qryValues;
         
     ELSIF qryType = 'PIW_VARIANT_DESC' THEN
         SELECT 
            NVL(CASE WHEN SUBSTR(TRIM(TO_CHAR(ROUND(STIB.WEIGHT_1504,3),'999999999999999.99')),1,1) ='.' THEN '0'||TRIM(TO_CHAR(ROUND(STIB.WEIGHT_1504,3),'999999999999999.99')) ELSE TRIM(TO_CHAR(ROUND(STIB.WEIGHT_1504,3),'999999999999999.99')) END,'0.00') ||'CT '||
               F_CONCAT_STRING('GET-PARTYWISE-STONE-ATTRIBUTE(TRANS_ITEM_ID)',TID.TRANS_ITEM_ID||':QU:'||THEX.PARTY_ID||':11007') ||' '||
               FNGETKARATFROMKARATCOLOR(REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(TID.KARAT_COLOR ,'G18.05KT','G18KT'),'G9.05KT','G9KT'),'G10.05KT','G10KT'),'G14.05KT','G14KT'),'G14.10KT','G14KT')) ||' '||F_CONCAT_STRING('METAL_COLOR_DESC',TID.TRANS_ITEM_ID)||' '||
               F_CONCAT_STRING('METAL_TYPE_NEW',TID.TRANS_ITEM_ID)||' '||F_GET_ATTRIBUTE_VALUE(IV.ATTRIB_TYPE_AND_VALUE||'^'||IV.ATTRIB_TYPE_AND_VALUE_A,'SUBCAT')||' '||
               F_GET_ATTRIBUTE_VALUE(IV.ATTRIB_TYPE_AND_VALUE||'^'||IV.ATTRIB_TYPE_AND_VALUE_A,'CATG') ||' '||
               CASE WHEN F_CONCAT_STRING('FINDING_TYPE_CHAIN',TID.TRANS_ITEM_ID) LIKE '%CHAIN%'
                THEN 'WITH '|| F_CONCAT_STRING('FINDING_TYPE_CHAIN',TID.TRANS_ITEM_ID) ELSE '' END
               BULK COLLECT INTO T_VARCHAR_DATA
            FROM T_TRANS_ITEM_DTL TID,T_SMRY_TRANS_ITEM_BOM STIB,V_ITEM_VARIANT_RTN_DTL IV,T_TRANS_HDR_EXTD THEX 
            WHERE TID.TRANS_ITEM_ID  = STIB.TRANS_ITEM_ID
               AND TID.VARIANT_ID = IV.VARIANT_ID
               AND TID.TRANS_ID = THEX.TRANS_ID (+)
         AND TID.TRANS_ITEM_ID =  qryValues;
         
    ELSIF qryType = 'GET-FINDING-TYPE(MAPPING)' THEN
        SELECT PML.ATTRIB_ALIAS_NAME
        BULK COLLECT INTO T_VARCHAR_DATA
        FROM T_TRANS_ITEM_BOM_DTL TIBD,V_ITEM_VARIANT_RTN_DTL IV,T_PARTY_MISC_LINK PML
        WHERE TIBD.BOM_VARIANT_ID = IV.VARIANT_ID
        AND F_GET_ATTRIBUTE_ID(IV.ATTRIB_TYPE_AND_ATTRIB_ID||'^'||IV.ATTRIB_TYPE_AND_ATTRIB_ID_A,11197) = PML.ATTRIB_ID1
        AND IV.ITEM_TYPE_ID = 1003 AND PML.LINK_TYPE = 'FT' 
        AND TIBD.TRANS_ITEM_BOM_ID =  qryValues;   
         
    ELSIF qryType = 'METAL_TYPE_NEW' THEN
         SELECT DISTINCT CFD.CONFIG_VALUE  
         BULK COLLECT INTO T_VARCHAR_DATA
         FROM T_TRANS_ITEM_BOM_DTL STB, T_SMRY_ITEM_VARIANT_METAL MV ,T_CONFIG_FIXED_DATA CFD,
               V_ITEM_VARIANT_RTN_DTL IV 
         WHERE STB.BOM_VARIANT_ID  = MV.VARIANT_ID
         AND STB.BOM_VARIANT_ID = IV.VARIANT_ID
         AND MV.BASE_ITEM_GROUP_ID = CFD.CONFIG_ID     
         AND IV.ITEM_TYPE_ID = 1004 
         AND STB.TRANS_ITEM_ID = qryValues;
         
    ELSIF qryType = 'GET-PARTYWISE-ITEM-GROUP(TRANSITEMID)' THEN 

         SELECT DISTINCT PML.ATTRIB_ALIAS_NAME 
         BULK COLLECT INTO T_VARCHAR_DATA
         FROM T_PARTY_MISC_LINK PML,T_TRANS_ITEM_BOM_DTL TIBD,V_ITEM_VARIANT_RTN_DTL IV 
         WHERE 
         TIBD.BOM_VARIANT_ID = IV.VARIANT_ID AND
         PML.ITEM_GROUP_ID = IV.ITEM_GROUP_ID AND
         PML.PARTY_ID = arrData(1) AND
         TIBD.TRANS_ITEM_ID = arrData(2) AND
         PML.LINK_TYPE = 'IG';     
         
    ELSIF qryType = 'GET-PARTYWISE-METAL-ITEM-GROUP(TRANSITEMID)' THEN 

         SELECT DISTINCT PML.ATTRIB_ALIAS_NAME 
         BULK COLLECT INTO T_VARCHAR_DATA
         FROM T_PARTY_MISC_LINK PML,T_TRANS_ITEM_BOM_DTL TIBD,V_ITEM_VARIANT_RTN_DTL IV 
         WHERE 
         TIBD.BOM_VARIANT_ID = IV.VARIANT_ID AND
         PML.ITEM_GROUP_ID = IV.ITEM_GROUP_ID AND
         IV.ITEM_TYPE_ID = 1004 AND
         PML.PARTY_ID = arrData(1) AND
         TIBD.TRANS_ITEM_ID = arrData(2) AND
         PML.LINK_TYPE = 'IG';

    ELSIF qryType = 'STONE_CODE' THEN
         SELECT DISTINCT F_GET_ATTRIBUTE_VALUE(MV.ATTRIB_TYPE_AND_VALUE,'ENHANCE')
         BULK COLLECT INTO T_VARCHAR_DATA
         FROM T_TRANS_ITEM_BOM_DTL STB,V_ITEM_VARIANT_DTL MV 
         WHERE STB.BOM_VARIANT_ID  = MV.VARIANT_ID
         AND MV.ITEM_TYPE_ID = 1005         
         AND STB.TRANS_ITEM_ID = qryValues;
         
     ELSIF qryType = 'CLS_ITEMGROUP(TRANSITEMID)' THEN
         SELECT 
            DISTINCT IV.ITEM_GROUP
            BULK COLLECT INTO T_VARCHAR_DATA  
        FROM 
            T_TRANS_ITEM_BOM_DTL TIBD,
            V_ITEM_VARIANT_RTN_DTL IV 
        WHERE 
            TIBD.BOM_VARIANT_ID = IV.VARIANT_ID 
            AND IV.ITEM_TYPE_ID = 1005 
            AND IV.ITEM_GROUP_ID <> 1504
            AND TIBD.TRANS_ITEM_ID = qryValues;
            
     ELSIF qryType = 'STONE_ITEMGROUP(TRANSITEMID)' THEN
         SELECT 
            DISTINCT IV.ITEM_GROUP
            BULK COLLECT INTO T_VARCHAR_DATA  
        FROM 
            T_TRANS_ITEM_BOM_DTL TIBD,
            V_ITEM_VARIANT_RTN_DTL IV 
        WHERE 
            TIBD.BOM_VARIANT_ID = IV.VARIANT_ID 
            AND IV.ITEM_TYPE_ID = 1005 
            AND TIBD.TRANS_ITEM_ID = qryValues;       
    
     ELSIF qryType = 'STONE_COLOR' THEN
         SELECT DISTINCT F_GET_ATTRIBUTE_VALUE(MV.ATTRIB_TYPE_AND_VALUE,'STNCLR')
         BULK COLLECT INTO T_VARCHAR_DATA
         FROM T_TRANS_ITEM_BOM_DTL STB,V_ITEM_VARIANT_DTL MV 
         WHERE STB.BOM_VARIANT_ID  = MV.VARIANT_ID
         AND MV.ITEM_TYPE_ID = 1005 
         AND STB.TRANS_ITEM_ID = qryValues;
    
     ELSIF qryType = 'STONE_COLOR_CODE' THEN
         SELECT DISTINCT F_GET_ATTRIBUTE_VALUE(MV.ATTRIB_TYPE_AND_CODE,'STNCLR')
         BULK COLLECT INTO T_VARCHAR_DATA
         FROM T_TRANS_ITEM_BOM_DTL STB,V_ITEM_VARIANT_DTL MV 
         WHERE STB.BOM_VARIANT_ID  = MV.VARIANT_ID
         AND MV.ITEM_TYPE_ID = 1005 
         AND STB.TRANS_ITEM_ID = qryValues;
    
     ELSIF qryType = 'STONE_COLOR_CODE-RD' THEN
         SELECT DISTINCT F_GET_ATTRIBUTE_VALUE(MV.ATTRIB_TYPE_AND_CODE,'STNCLR')
         BULK COLLECT INTO T_VARCHAR_DATA
         FROM T_TRANS_ITEM_BOM_DTL STB,V_ITEM_VARIANT_DTL MV 
         WHERE F_GET_ATTRIBUTE_VALUE(MV.ATTRIB_TYPE_AND_CODE,'STNSHP') = 'RD' 
         AND STB.BOM_VARIANT_ID  = MV.VARIANT_ID
         AND MV.ITEM_TYPE_ID = 1005 
         AND STB.TRANS_ITEM_ID = qryValues;   
                 
     ELSIF qryType = 'STONE_COLOR(DIAMONDS)' THEN
         SELECT DISTINCT F_GET_ATTRIBUTE_VALUE(MV.ATTRIB_TYPE_AND_VALUE,'STNCLR')
         BULK COLLECT INTO T_VARCHAR_DATA
         FROM T_TRANS_ITEM_BOM_DTL STB,V_ITEM_VARIANT_DTL MV 
         WHERE STB.BOM_VARIANT_ID  = MV.VARIANT_ID
         AND MV.ITEM_GROUP_ID = 1504 
         AND STB.TRANS_ITEM_ID = qryValues;
    
     ELSIF qryType = 'STONE_COLOR-QLTY(STOCK)' THEN
         SELECT DISTINCT F_GET_ATTRIBUTE_VALUE(MV.ATTRIB_TYPE_AND_VALUE,'STNCLR')||'-'||F_GET_ATTRIBUTE_VALUE(MV.ATTRIB_TYPE_AND_VALUE,'STNQLTY') 
         BULK COLLECT INTO T_VARCHAR_DATA
         FROM T_STOCK_BOM_DTL STB,V_ITEM_VARIANT_DTL MV 
         WHERE STB.BOM_VARIANT_ID  = MV.VARIANT_ID
         AND MV.ITEM_GROUP_ID = 1504 
         AND STB.STOCK_ID = qryValues;
         
     ELSIF qryType = 'STONE_COLOR-QLTY(TRANSITEMID)' THEN
         SELECT DISTINCT F_GET_ATTRIBUTE_VALUE(MV.ATTRIB_TYPE_AND_VALUE,'STNCLR')||'-'||F_GET_ATTRIBUTE_VALUE(MV.ATTRIB_TYPE_AND_VALUE,'STNQLTY') 
         BULK COLLECT INTO T_VARCHAR_DATA
         FROM T_TRANS_ITEM_BOM_DTL STB,V_ITEM_VARIANT_DTL MV 
         WHERE STB.BOM_VARIANT_ID  = MV.VARIANT_ID
         AND MV.ITEM_GROUP_ID = 1504 
         AND STB.TRANS_ITEM_ID = qryValues;
         
     ELSIF qryType = 'STONE_COLOR-QLTY(TEMPTRANSITEMID)' THEN
         SELECT DISTINCT F_GET_ATTRIBUTE_VALUE(MV.ATTRIB_TYPE_AND_VALUE,'STNCLR')||'-'||F_GET_ATTRIBUTE_VALUE(MV.ATTRIB_TYPE_AND_VALUE,'STNQLTY')
         BULK COLLECT INTO T_VARCHAR_DATA
         FROM T_TEMP_TRANS_ITEM_BOM_DTL STB,V_ITEM_VARIANT_DTL MV
         WHERE STB."BomVariantId"  = MV.VARIANT_ID
         AND MV.ITEM_GROUP_ID = 1504
         AND STB."TransItemId" = qryValues;         
             
     ELSIF qryType = 'STONE_CLS_COLOR-QLTY(TRANSITEMID)' THEN
         SELECT DISTINCT F_GET_ATTRIBUTE_VALUE(MV.ATTRIB_TYPE_AND_VALUE,'STNCLR')||'-'||F_GET_ATTRIBUTE_VALUE(MV.ATTRIB_TYPE_AND_VALUE,'STNQLTY') 
         BULK COLLECT INTO T_VARCHAR_DATA
         FROM T_TRANS_ITEM_BOM_DTL STB,V_ITEM_VARIANT_DTL MV 
         WHERE STB.BOM_VARIANT_ID  = MV.VARIANT_ID
         AND MV.ITEM_TYPE_ID = 1005 AND MV.ITEM_GROUP_ID <> 1504 
         AND STB.TRANS_ITEM_ID = qryValues;
          
     ELSIF qryType = 'STONE_NAME' THEN
         SELECT DISTINCT MV.ITEM_NAME  
         BULK COLLECT INTO T_VARCHAR_DATA
         FROM T_TRANS_ITEM_BOM_DTL STB,V_ITEM_VARIANT_DTL MV 
         WHERE STB.BOM_VARIANT_ID  = MV.VARIANT_ID
         AND MV.ITEM_TYPE_ID = 1005 
         AND STB.TRANS_ITEM_ID = qryValues;
    
     ELSIF qryType = 'STONE_QUALITY' THEN
         SELECT DISTINCT F_GET_ATTRIBUTE_VALUE(MV.ATTRIB_TYPE_AND_VALUE,'STNQLTY')
         BULK COLLECT INTO T_VARCHAR_DATA
         FROM T_TRANS_ITEM_BOM_DTL STB,V_ITEM_VARIANT_RTN_DTL MV 
         WHERE STB.BOM_VARIANT_ID  = MV.VARIANT_ID
         AND MV.ITEM_TYPE_ID = 1005 
         AND STB.TRANS_ITEM_ID = qryValues;
    
     ELSIF qryType = 'STONE_SHAPE' THEN
         SELECT DISTINCT F_GET_ATTRIBUTE_VALUE(MV.ATTRIB_TYPE_AND_VALUE,'STNSHP')
         BULK COLLECT INTO T_VARCHAR_DATA
         FROM T_TRANS_ITEM_BOM_DTL STB,V_ITEM_VARIANT_RTN_DTL MV 
         WHERE STB.BOM_VARIANT_ID  = MV.VARIANT_ID
         AND MV.ITEM_TYPE_ID = 1005 
         AND STB.TRANS_ITEM_ID = qryValues;
    
     ELSIF qryType = 'STONE_SHAPE(DIAMOND)' THEN
         SELECT DISTINCT F_GET_ATTRIBUTE_VALUE(MV.ATTRIB_TYPE_AND_CODE,'STNSHP')
         BULK COLLECT INTO T_VARCHAR_DATA
         FROM T_TRANS_ITEM_BOM_DTL STB,V_ITEM_VARIANT_RTN_DTL MV 
         WHERE STB.BOM_VARIANT_ID  = MV.VARIANT_ID
         AND MV.ITEM_GROUP_ID = 1504 
         AND STB.TRANS_ITEM_ID = qryValues;
    
    
     ELSIF qryType = 'STONE_CUT' THEN
         SELECT DISTINCT F_GET_ATTRIBUTE_VALUE(MV.ATTRIB_TYPE_AND_VALUE||'^'||MV.ATTRIB_TYPE_AND_VALUE_A,'STNCUT')
         BULK COLLECT INTO T_VARCHAR_DATA
         FROM T_TRANS_ITEM_BOM_DTL STB,V_ITEM_VARIANT_RTN_DTL MV 
         WHERE STB.BOM_VARIANT_ID  = MV.VARIANT_ID
         AND MV.ITEM_TYPE_ID = 1005 
         AND STB.TRANS_ITEM_ID = qryValues;
    
     ELSIF qryType = 'DIAMONDS_SPLIT' THEN
         SELECT DISTINCT F_GET_ATTRIBUTE_VALUE(IVD.ATTRIB_TYPE_AND_VALUE||'^'||IVD.ATTRIB_TYPE_AND_VALUE_A,'STNCUT')||'-'||
                         ROUND(DECODE(IVD.ITEM_STOCK_UOM_CODE,'PCS',TIBD.QUANTITY,TIBD.QUANTITY*TIBD.CONVERSION_FACTOR))||'/'||
                         ROUND(DECODE(IVD.ITEM_STOCK_UOM_CODE,'WT',TIBD.QUANTITY,TIBD.QUANTITY*TIBD.CONVERSION_FACTOR),3)
         BULK COLLECT INTO T_VARCHAR_DATA
        FROM T_TRANS_ITEM_DTL TID, T_TRANS_ITEM_BOM_DTL TIBD, V_ITEM_VARIANT_RTN_DTL IVD
        WHERE TID.TRANS_ITEM_ID = TIBD.TRANS_ITEM_ID
        AND TIBD.BOM_VARIANT_ID = IVD.VARIANT_ID
        AND TID.ROW_STATUS = 1
        AND IVD.ITEM_GROUP_ID = 1504
        AND TID.TRANS_ITEM_ID = qryValues;
             
     ELSIF qryType = 'COLOR_STONES_SPLIT' THEN
         SELECT DISTINCT F_GET_ATTRIBUTE_VALUE(IVD.ATTRIB_TYPE_AND_VALUE||'^'||IVD.ATTRIB_TYPE_AND_VALUE_A,'STNCUT')||'-'||
                         ROUND(DECODE(IVD.ITEM_STOCK_UOM_CODE,'PCS',TIBD.QUANTITY,TIBD.QUANTITY*TIBD.CONVERSION_FACTOR))||'/'||
                         ROUND(DECODE(IVD.ITEM_STOCK_UOM_CODE,'WT',TIBD.QUANTITY,TIBD.QUANTITY*TIBD.CONVERSION_FACTOR),3)
         BULK COLLECT INTO T_VARCHAR_DATA
        FROM T_TRANS_ITEM_DTL TID, T_TRANS_ITEM_BOM_DTL TIBD, V_ITEM_VARIANT_RTN_DTL IVD
        WHERE TID.TRANS_ITEM_ID = TIBD.TRANS_ITEM_ID
        AND TIBD.BOM_VARIANT_ID = IVD.VARIANT_ID
        AND TID.ROW_STATUS = 1
        AND IVD.ITEM_GROUP_ID = 1005
        AND TID.TRANS_ITEM_ID = qryValues;
        
     ELSIF qryType = 'BATCH_LAST_TRANS' THEN
         IF TO_NUMBER(qryValues) = 0 THEN
             RETURN NULL;
         END IF;

         SELECT TO_CHAR(MAX(TRANS_DATE),'DD/MM/YYYY') AS TRANS_DATE
         BULK COLLECT INTO T_VARCHAR_DATA
         FROM T_TRANS_HDR TH
         WHERE EXISTS (
             SELECT 1
             FROM T_TRANS_ITEM_DTL TID
             WHERE TID.TRANS_ID = TH.TRANS_ID 
             AND TID.DEST_BATCH_ID = TO_NUMBER(qryValues)
         );

     ELSIF qryType = 'GET-TRANS-KARAT' THEN
         SELECT DISTINCT FNGETKARATFROMKARATCOLOR(KARAT_COLOR)
         BULK COLLECT INTO T_VARCHAR_DATA
         FROM T_TRANS_ITEM_DTL 
         WHERE ROW_STATUS = 1 AND TRANS_ID = qryValues;
    
     ELSIF qryType = 'GET-TRANS-COLOR' THEN
         SELECT DISTINCT FNGETCOLORFROMKARATCOLOR(KARAT_COLOR)
         BULK COLLECT INTO T_VARCHAR_DATA
         FROM T_TRANS_ITEM_DTL 
         WHERE ROW_STATUS = 1 AND TRANS_ID = qryValues;
             
     ELSIF qryType = 'GET-BATCH-FOR-ORDER' THEN
     	IF INSTR(strData,'11.') > 0 THEN
             EXECUTE IMMEDIATE
             'SELECT LISTAGG(SBD.BATCH_NO) WITHIN GROUP(ORDER BY SBD.BATCH_NO)
             FROM T_STOCK_BATCH_DTL SBD,T_STOCK_BATCH_TRANS_LINK SBTL 
             WHERE SBD.BATCH_ID = SBTL.BATCH_ID 
                   AND SBD.BATCH_TYPE_ID = 1  
                   AND SBD.ROW_STATUS NOT IN (-1,-2)
                   AND SBTL.SOR_TRANS_ITEM_ID >0  
                   AND SBTL.SOR_TRANS_ITEM_ID = :V1
             GROUP BY SBTL.SOR_TRANS_ITEM_ID'
             INTO strReturn 
             USING TO_NUMBER(qryValues);

         ELSE
             SELECT LISTAGG_CLOB(SBD.BATCH_NO)
             INTO strReturn 
             FROM T_STOCK_BATCH_DTL SBD,T_STOCK_BATCH_TRANS_LINK SBTL 
             WHERE SBD.BATCH_ID = SBTL.BATCH_ID 
                   AND SBD.BATCH_TYPE_ID  = 1  
                   AND SBD.ROW_STATUS NOT IN (-1,-2)  
                   AND SBTL.SOR_TRANS_ITEM_ID >0
                   AND SBTL.SOR_TRANS_ITEM_ID = qryValues;
         END IF;

         RETURN strReturn;

     ELSIF qryType = 'GET-REF-TRANS-DATE' THEN
         SELECT DISTINCT REFTH.TRANS_DATE
         BULK COLLECT INTO T_VARCHAR_DATA
         FROM T_TRANS_HDR REFTH,T_TRANS_ITEM_DTL REFTID,T_TRANS_ITEM_DTL TID
         WHERE TID.REF_TRANS_ITEM_ID = REFTID.TRANS_ITEM_ID
         AND REFTID.TRANS_ID = REFTH.TRANS_ID
         AND TID.REF_TRANS_ITEM_ID > 0 AND TID.TRANS_ID = qryValues;
        
     ELSIF qryType = 'GET-OPERATION_TYPE' THEN    
         SELECT CFD.CONFIG_VALUE  BULK COLLECT INTO T_VARCHAR_DATA
         FROM T_TRANS_ITEM_DTL TID,T_CONFIG_FIXED_DATA CFD,T_TRANS_ITEM_OPERATION_DTL OPD
         WHERE TID.TRANS_ITEM_ID = OPD.TRANS_ITEM_ID AND 
               OPD.OPERATION_TYPE_ID = CFD.CONFIG_ID AND 
               OPD.OPERATION_TYPE_ID > 0 AND 
               TID.TRANS_ITEM_ID = qryValues
         GROUP BY CFD.CONFIG_VALUE ;        
      
     ELSIF qryType = 'ITEMNAME-SHAPEWISE-STONEWT' THEN
         IF arrData(2) = '1504' THEN
             strTemp := strTemp||' AND VD.ITEM_GROUP_ID = 1504';
         ELSE
             strTemp := strTemp||' AND VD.ITEM_GROUP_ID <> 1504';
         END IF;

         strSql :=
         'SELECT 
             VD.ITEM_NAME||STN.SHAPE_CODE||'' - ''||round(SUM(TIB.QUANTITY*TIB.CONVERSION_FACTOR))||'' Pcs - ''||trim(to_char(SUM(TIB.QUANTITY),''999999999999999.999''))||'' WT ''
         FROM 
             T_TRANS_ITEM_DTL TID, T_TRANS_ITEM_BOM_DTL TIB,
             T_SMRY_ITEM_VARIANT_STONE STN, V_ITEM_VARIANT_DTL VD
         WHERE 
             STN.VARIANT_ID = VD.VARIANT_ID AND
             TIB.BOM_VARIANT_ID  = STN.VARIANT_ID AND
             TID.TRANS_ITEM_ID = TIB.TRANS_ITEM_ID AND
             TID.TRANS_ID = '||arrData(1)||strTemp||'
         GROUP BY VD.ITEM_NAME, STN.SHAPE_CODE';

         EXECUTE IMMEDIATE
         strSql
         BULK COLLECT INTO T_VARCHAR_DATA;

     ELSIF qryType = 'GET-ATTRIB-CODE' THEN
         SELECT IAM.ATTRIB_CODE
         BULK COLLECT INTO T_VARCHAR_DATA
         FROM T_ITEM_VARIANT_ATTRIB_DTL IVAD, T_ITEM_ATTRIB_CONFIG IAC,
         T_ITEM_ATTRIB_MASTER IAM
         WHERE
         IVAD.ATTRIB_ID = IAM.ATTRIB_ID AND
         IAC.ITEM_ATTRIB_CONFIG_ID = IVAD.ITEM_ATTRIB_CONFIG_ID(+) AND
         IVAD.VARIANT_ID = qryValues
         ORDER BY IAC.ATTRIB_TYPE_ID;
         
     ELSIF qryType = 'GET-ATTRIB-CODE(DISTINCT)' THEN
         SELECT DISTINCT ATTRIB_CODE
         BULK COLLECT INTO T_VARCHAR_DATA
         FROM
         (
             SELECT
             IAM.ATTRIB_CODE
             FROM T_ITEM_VARIANT_ATTRIB_DTL IVAD, T_ITEM_ATTRIB_CONFIG IAC,
             T_ITEM_ATTRIB_MASTER IAM
             WHERE
             IVAD.ATTRIB_ID = IAM.ATTRIB_ID AND
             IAC.ITEM_ATTRIB_CONFIG_ID = IVAD.ITEM_ATTRIB_CONFIG_ID(+) AND
             IVAD.VARIANT_ID = qryValues
             ORDER BY IAC.ATTRIB_TYPE_ID
         );    

     ELSIF qryType = 'OPN-TYPE-WISE-BOM-QTY' THEN
         SELECT NVL(ROUND(SUM(WAX_SET_PCS),0),0)||','||NVL(ROUND(SUM(WAX_SET_WT),3),0)||','||NVL(ROUND(SUM(HAND_SET_PCS),0),0)||','||NVL(ROUND(SUM(HAND_SET_WT),3),0)||','||(NVL(ROUND(SUM(WAX_SET_PCS),0),0)+NVL(ROUND(SUM(HAND_SET_PCS),0),0))||','||(NVL(ROUND(SUM(WAX_SET_WT),3),0)+NVL(ROUND(SUM(HAND_SET_WT),3),0))
             ||','||NVL(ROUND(SUM(DIA_PCS),0),0)||','||NVL(ROUND(SUM(DIA_WT),3),0)||','||NVL(ROUND(SUM(CLS_PCS),0),0)||','||NVL(ROUND(SUM(CLS_WT),3),0)
         BULK COLLECT INTO T_VARCHAR_DATA
         FROM (
             SELECT 
                 CASE WHEN OPERATION_TYPE_ID = 46007 THEN 'WS' ELSE NULL END AS WAX_SET,
                 CASE WHEN OPERATION_TYPE_ID = 46008 THEN 'HS' ELSE NULL END AS HAND_SET,
                 CASE WHEN OPERATION_TYPE_ID = 46007 THEN PCS ELSE 0 END AS WAX_SET_PCS,
                 CASE WHEN OPERATION_TYPE_ID = 46008 THEN PCS ELSE 0 END AS HAND_SET_PCS,
                 CASE WHEN OPERATION_TYPE_ID = 46007 THEN WT ELSE 0 END AS WAX_SET_WT,
                 CASE WHEN OPERATION_TYPE_ID = 46008 THEN WT ELSE 0 END AS HAND_SET_WT,
                 CASE WHEN ITEM_GROUP_ID = 1504 THEN PCS ELSE 0 END AS DIA_PCS,
                 CASE WHEN ITEM_GROUP_ID <> 1504 THEN PCS ELSE 0 END AS CLS_PCS,
                 CASE WHEN ITEM_GROUP_ID = 1504 THEN WT ELSE 0 END AS DIA_WT,
                 CASE WHEN ITEM_GROUP_ID <> 1504 THEN WT ELSE 0 END AS CLS_WT
             FROM (
                 SELECT TIOD.OPERATION_TYPE_ID, IVD.ITEM_GROUP_ID,SUM(DECODE(IVD.ITEM_STOCK_UOM_CODE,'PCS',TIBD.QUANTITY,(TIBD.QUANTITY*TIBD.CONVERSION_FACTOR))) AS PCS,
                 SUM(DECODE(IVD.ITEM_STOCK_UOM_CODE,'WT',TIBD.QUANTITY,(TIBD.QUANTITY*TIBD.CONVERSION_FACTOR))) AS WT
                 FROM V_ITEM_VARIANT_RTN_DTL IVD, T_TRANS_ITEM_OPERATION_DTL TIOD, T_TRANS_ITEM_BOM_DTL TIBD 
                 WHERE TIBD.TRANS_ITEM_BOM_ID = TIOD.LABOUR_CALC_TRANS_ITEM_BOM_ID
                 AND TIBD.BOM_VARIANT_ID = IVD.VARIANT_ID
                 AND TIOD.OPERATION_TYPE_ID IN (46007,46008)
                 AND IVD.ITEM_TYPE_ID = 1005
                 AND TIBD.TRANS_ITEM_ID = TO_NUMBER(qryValues)
                 GROUP BY TIOD.OPERATION_TYPE_ID, IVD.ITEM_GROUP_ID
             )
         );

     ELSIF qryType = 'KARAT-COLOR-GROUP-BATCH' THEN
    
         SELECT * BULK COLLECT INTO T_VARCHAR_DATA
         FROM
         (
             SELECT IVD.KARAT_CODE||'-'||IVD.COLOR_CODE AS KARAT_COLOR
             FROM T_STOCK_BOM_DTL SBD,T_SMRY_ITEM_VARIANT_METAL IVD 
             WHERE SBD.ACTUAL_VARIANT_ID = IVD.VARIANT_ID 
             AND SBD.ACTUAL_VARIANT_ID > 0
             AND SBD.STOCK_ID = TO_NUMBER(qryValues)
             UNION ALL
             SELECT IVD.KARAT_CODE||'-'||IVD.COLOR_CODE AS KARAT_COLOR
             FROM T_STOCK_BOM_DTL SBD,T_SMRY_ITEM_VARIANT_METAL IVD 
             WHERE SBD.BOM_VARIANT_ID = IVD.VARIANT_ID 
             AND SBD.ACTUAL_VARIANT_ID = 0
             AND SBD.STOCK_ID = TO_NUMBER(qryValues)
         );

     ELSIF qryType = 'STOCK_BOM_STONE_QLTY' THEN
         SELECT DISTINCT QUALITY_DESC
         BULK COLLECT INTO T_VARCHAR_DATA
         FROM T_STOCK_BOM_DTL SBD,T_SMRY_ITEM_VARIANT_STONE IVD 
         WHERE SBD.BOM_VARIANT_ID = IVD.VARIANT_ID
         AND SBD.QUANTITY > 0 AND IVD.VARIANT_ID > 0
         AND SBD.STOCK_ID = qryValues;         

     ELSIF qryType = 'STOCK_BOM_DIA_QLTY' THEN
         SELECT DISTINCT QUALITY_CODE
         BULK COLLECT INTO T_VARCHAR_DATA
         FROM T_STOCK_BOM_DTL SBD,T_SMRY_ITEM_VARIANT_STONE IVD 
         WHERE SBD.BOM_VARIANT_ID = IVD.VARIANT_ID
         AND SBD.QUANTITY > 0 AND IVD.ITEM_GROUP_ID = 1504
         AND SBD.STOCK_ID = qryValues;         

     ELSIF qryType = 'STOCK_BOM_STONE_QLTY_CODE' THEN
         SELECT DISTINCT QUALITY_CODE
         BULK COLLECT INTO T_VARCHAR_DATA
         FROM T_STOCK_BOM_DTL SBD,T_SMRY_ITEM_VARIANT_STONE IVD 
         WHERE SBD.BOM_VARIANT_ID = IVD.VARIANT_ID
         AND SBD.QUANTITY > 0 AND IVD.VARIANT_ID > 0
         AND SBD.STOCK_ID = qryValues;         

     ELSIF qryType = 'STOCK_BOM_STONE_SHAPE_CODE' THEN
         SELECT DISTINCT SHAPE_CODE
         BULK COLLECT INTO T_VARCHAR_DATA
         FROM T_STOCK_BOM_DTL SBD,T_SMRY_ITEM_VARIANT_STONE IVD 
         WHERE SBD.BOM_VARIANT_ID = IVD.VARIANT_ID
         AND SBD.QUANTITY > 0 AND IVD.VARIANT_ID > 0
         AND SBD.STOCK_ID = qryValues;         

     ELSIF qryType = 'STOCK_BOM_STONE_COLOR_CODE' THEN
         SELECT DISTINCT COLOR_CODE
         BULK COLLECT INTO T_VARCHAR_DATA
         FROM T_STOCK_BOM_DTL SBD,T_SMRY_ITEM_VARIANT_STONE IVD 
         WHERE SBD.BOM_VARIANT_ID = IVD.VARIANT_ID
         AND SBD.QUANTITY > 0 AND IVD.VARIANT_ID > 0
         AND SBD.STOCK_ID = qryValues;         

     ELSIF qryType = 'VARIANT_TOP_SELLING_CRITERIA' THEN
         SELECT COUNT(QUANTITY)
         BULK COLLECT INTO T_VARCHAR_DATA
         FROM T_TRANS_HDR TH,T_TRANS_ITEM_DTL TID 
         WHERE TID.TRANS_ID = TH.TRANS_ID
         AND TO_DATE(TO_CHAR(TH.TRANS_DATE,'DD/MM/YYYY'),'DD/MM/YYYY') BETWEEN TO_DATE(TO_CHAR(F_GET_DATE_DBTIMEZONE-180,'DD/MM/YYYY'),'DD/MM/YYYY') AND TO_DATE(TO_CHAR(F_GET_DATE_DBTIMEZONE,'DD/MM/YYYY'),'DD/MM/YYYY')
         AND TH.TRANS_TYPE = 'INV'
         AND TID.ROW_STATUS = 1 
         AND TID.VARIANT_ID = qryValues;         

     ELSIF qryType = 'FETCH-IN-STOCK-QUANTITY' THEN
         SELECT SUM(QUANTITY) AS QUANTITY
         BULK COLLECT INTO T_VARCHAR_DATA
         FROM T_STOCK S, T_STOCK_DTL SD
         WHERE S.STOCK_ID = SD.STOCK_ID AND S.QUANTITY > 0 AND S.STOCK_CODE IS NOT NULL AND SD.BATCH_ID <= (SD.BATCH_ID * 0) AND SD.PARTY_ID <= (SD.PARTY_ID * 0) AND 
               S.OWNER_PARTY_ID <= (S.OWNER_PARTY_ID * 0) AND EXISTS (SELECT 1 FROM T_STOCK_TRANS_LINK STL WHERE S.STOCK_ID = STL.STOCK_ID AND STL.SOR_TRANS_ITEM_ID <= (STL.SOR_TRANS_ITEM_ID * 0)) AND
               S.VARIANT_ID = qryValues;

     ELSIF qryType = 'FETCH-IN-STOCK-AVAILABLE-SIZES' THEN
     	IF INSTR(strData,'11.') > 0 THEN
             EXECUTE IMMEDIATE
             'SELECT LISTAGG(STYLE_SIZE) WITHIN GROUP(ORDER BY STYLE_SIZE)
             FROM (
                   SELECT DISTINCT F_GET_ATTRIBUTE(WITEGOLD.F_CONCAT_STRING(''STOCK_ATTRIB_CODE'',S.STOCK_ID,''^''), ''SIZE_A'') AS STYLE_SIZE
                   FROM T_STOCK S, T_STOCK_DTL SD
                   WHERE S.STOCK_ID = SD.STOCK_ID AND S.QUANTITY > 0 AND S.STOCK_CODE IS NOT NULL AND SD.BATCH_ID <= (SD.BATCH_ID * 0) AND SD.PARTY_ID <= (SD.PARTY_ID * 0) AND 
                         S.OWNER_PARTY_ID <= (S.OWNER_PARTY_ID * 0) AND EXISTS (SELECT 1 FROM T_STOCK_TRANS_LINK STL WHERE S.STOCK_ID = STL.STOCK_ID AND STL.SOR_TRANS_ITEM_ID <= (STL.SOR_TRANS_ITEM_ID * 0)) AND
                         S.VARIANT_ID = :V1
                  )
             GROUP BY STYLE_SIZE'
             BULK COLLECT INTO T_VARCHAR_DATA
             USING qryValues;

         ELSE
             SELECT LISTAGG_CLOB(STYLE_SIZE)
             BULK COLLECT INTO T_VARCHAR_DATA
             FROM (
                   SELECT DISTINCT F_GET_ATTRIBUTE(F_CONCAT_STRING('STOCK_ATTRIB_CODE',S.STOCK_ID,'^'), 'SIZE_A') AS STYLE_SIZE
                   FROM T_STOCK S, T_STOCK_DTL SD
                   WHERE S.STOCK_ID = SD.STOCK_ID AND S.QUANTITY > 0 AND S.STOCK_CODE IS NOT NULL AND SD.BATCH_ID <= (SD.BATCH_ID * 0) AND SD.PARTY_ID <= (SD.PARTY_ID * 0) AND 
                         S.OWNER_PARTY_ID <= (S.OWNER_PARTY_ID * 0) AND EXISTS (SELECT 1 FROM T_STOCK_TRANS_LINK STL WHERE S.STOCK_ID = STL.STOCK_ID AND STL.SOR_TRANS_ITEM_ID <= (STL.SOR_TRANS_ITEM_ID * 0)) AND
                         S.VARIANT_ID = qryValues
                  );
         END IF;

     ELSIF qryType = 'FETCH-VARIANT-STONE-INFO' THEN
     	IF INSTR(strData,'11.') > 0 THEN
             EXECUTE IMMEDIATE
             'SELECT LISTAGG(STONE_INFO) WITHIN GROUP (ORDER BY STONE_INFO)
             FROM (
                   SELECT SHAPE||''|''||QUALITY||''|''||SUM(PIECES)||''|''||SUM(WEIGHT) AS STONE_INFO
                   FROM (
                         SELECT F_GET_ATTRIBUTE(IVD.ATTRIB_TYPE_AND_VALUE||''^''||IVD.ATTRIB_TYPE_AND_VALUE_A, ''STNSHP'') AS SHAPE,
                                F_GET_ATTRIBUTE(IVD.ATTRIB_TYPE_AND_VALUE||''^''||IVD.ATTRIB_TYPE_AND_VALUE_A, ''STNQLTY'') AS QUALITY,
                                ROUND(IVBD.CONVERSION_FACTOR * IVBD.QUANTITY) AS PIECES, IVBD.QUANTITY AS WEIGHT
                         FROM T_ITEM_VARIANT_BOM_DTL IVBD, V_ITEM_VARIANT_DTL IVD
                         WHERE IVBD.BOM_VARIANT_ID = IVD.VARIANT_ID AND IVD.ITEM_TYPE_ID = 1005 AND IVBD.MAIN_VARIANT_ID = :V1
                        )
                   GROUP BY SHAPE, QUALITY
                  )
             GROUP BY STONE_INFO'
             BULK COLLECT INTO T_VARCHAR_DATA
             USING qryValues;

         ELSE
             SELECT LISTAGG_CLOB(STONE_INFO)
             BULK COLLECT INTO T_VARCHAR_DATA
             FROM (
                   SELECT SHAPE||'|'||QUALITY||'|'||SUM(PIECES)||'|'||SUM(WEIGHT) AS STONE_INFO
                   FROM (
                         SELECT F_GET_ATTRIBUTE(IVD.ATTRIB_TYPE_AND_VALUE||'^'||IVD.ATTRIB_TYPE_AND_VALUE_A, 'STNSHP') AS SHAPE,
                                F_GET_ATTRIBUTE(IVD.ATTRIB_TYPE_AND_VALUE||'^'||IVD.ATTRIB_TYPE_AND_VALUE_A, 'STNQLTY') AS QUALITY,
                                ROUND(IVBD.CONVERSION_FACTOR * IVBD.QUANTITY) AS PIECES, IVBD.QUANTITY AS WEIGHT
                         FROM T_ITEM_VARIANT_BOM_DTL IVBD, V_ITEM_VARIANT_DTL IVD
                         WHERE IVBD.BOM_VARIANT_ID = IVD.VARIANT_ID AND IVD.ITEM_TYPE_ID = 1005 AND IVBD.MAIN_VARIANT_ID = qryValues
                        )
                   GROUP BY SHAPE, QUALITY
                  );
         END IF;

     ELSIF qryType = 'FETCH-VARIANT-STONE-INFO-FROM-STOCK' THEN
     	IF INSTR(strData,'11.') > 0 THEN
             EXECUTE IMMEDIATE
             'SELECT LISTAGG(STONE_INFO) WITHIN GROUP (ORDER BY STONE_INFO)
             FROM (
                   SELECT SHAPE||''|''||QUALITY||''|''||SUM(PIECES)||''|''||SUM(WEIGHT) AS STONE_INFO
                   FROM (
                         SELECT F_GET_ATTRIBUTE(IVD.ATTRIB_TYPE_AND_VALUE||''^''||IVD.ATTRIB_TYPE_AND_VALUE_A, ''STNSHP'') AS SHAPE,
                                F_GET_ATTRIBUTE(IVD.ATTRIB_TYPE_AND_VALUE||''^''||IVD.ATTRIB_TYPE_AND_VALUE_A, ''STNQLTY'') AS QUALITY,
                                ROUND(SBD.CONVERSION_FACTOR * SBD.QUANTITY) AS PIECES, SBD.QUANTITY AS WEIGHT
                         FROM T_STOCK_BOM_DTL SBD, V_ITEM_VARIANT_DTL IVD
                         WHERE SBD.BOM_VARIANT_ID = IVD.VARIANT_ID AND IVD.ITEM_TYPE_ID = 1005 AND SBD.STOCK_ID = qryValues
                        )
                   GROUP BY SHAPE, QUALITY
                  )
             GROUP BY STONE_INFO'
             BULK COLLECT INTO T_VARCHAR_DATA
             USING qryValues;

         ELSE
             SELECT LISTAGG_CLOB(STONE_INFO)
             BULK COLLECT INTO T_VARCHAR_DATA
             FROM (
                   SELECT SHAPE||'|'||QUALITY||'|'||SUM(PIECES)||'|'||SUM(WEIGHT) AS STONE_INFO
                   FROM (
                         SELECT F_GET_ATTRIBUTE(IVD.ATTRIB_TYPE_AND_VALUE||'^'||IVD.ATTRIB_TYPE_AND_VALUE_A, 'STNSHP') AS SHAPE,
                                F_GET_ATTRIBUTE(IVD.ATTRIB_TYPE_AND_VALUE||'^'||IVD.ATTRIB_TYPE_AND_VALUE_A, 'STNQLTY') AS QUALITY,
                                ROUND(SBD.CONVERSION_FACTOR * SBD.QUANTITY) AS PIECES, SBD.QUANTITY AS WEIGHT
                         FROM T_STOCK_BOM_DTL SBD, V_ITEM_VARIANT_DTL IVD
                         WHERE SBD.BOM_VARIANT_ID = IVD.VARIANT_ID AND IVD.ITEM_TYPE_ID = 1005 AND SBD.STOCK_ID = qryValues
                        )
                   GROUP BY SHAPE, QUALITY
                  );
         END IF;

     ELSIF qryType = 'GWTRANGE-STOCK' THEN
         SELECT MCDM.DATA_REMARK
         BULK COLLECT INTO T_VARCHAR_DATA
         FROM T_MISC_COMMON_DATA_MASTER MCDM
         WHERE TO_NUMBER(qryValues) BETWEEN TO_NUMBER(MCDM.DATA_CODE) AND TO_NUMBER(MCDM.DATA_VALUE) 
         AND DATA_TYPE_ID = 2230;

     ELSIF qryType = 'GWTRANGE-SALE' THEN
         SELECT MCDM.DATA_REMARK
         BULK COLLECT INTO T_VARCHAR_DATA
         FROM T_MISC_COMMON_DATA_MASTER MCDM
         WHERE TO_NUMBER(qryValues) BETWEEN TO_NUMBER(MCDM.DATA_CODE) AND TO_NUMBER(MCDM.DATA_VALUE) 
         AND DATA_TYPE_ID = 2231;

     ELSIF qryType = 'MRPRANGE-STOCK' THEN
         SELECT MCDM.DATA_REMARK
         BULK COLLECT INTO T_VARCHAR_DATA
         FROM T_MISC_COMMON_DATA_MASTER MCDM
         WHERE TO_NUMBER(qryValues) BETWEEN TO_NUMBER(MCDM.DATA_CODE) AND TO_NUMBER(MCDM.DATA_VALUE) 
         AND DATA_TYPE_ID = 2232;

     ELSIF qryType = 'MRPRANGE-SALE' THEN
    -- RAISE_APPLICATION_ERROR(-20100,'*'||qryValues);
         SELECT MCDM.DATA_REMARK
         BULK COLLECT INTO T_VARCHAR_DATA
         FROM T_MISC_COMMON_DATA_MASTER MCDM
         WHERE TO_NUMBER(qryValues) BETWEEN TO_NUMBER(MCDM.DATA_CODE) AND TO_NUMBER(MCDM.DATA_VALUE) 
         AND DATA_TYPE_ID = 2233;
        
     ELSIF qryType = 'STONEAVGWT-SALE' THEN
         SELECT MCDM.DATA_REMARK
         BULK COLLECT INTO T_VARCHAR_DATA
         FROM T_MISC_COMMON_DATA_MASTER MCDM
         WHERE TO_NUMBER(qryValues) BETWEEN TO_NUMBER(MCDM.DATA_CODE) AND TO_NUMBER(MCDM.DATA_VALUE) 
         AND DATA_TYPE_ID = 2234;
        
     ELSIF qryType = 'STONE_COUNT_SOR' THEN   
          SELECT COUNT(*) 
          BULK COLLECT INTO T_VARCHAR_DATA
          FROM
              T_TRANS_ITEM_BOM_DTL TIBD,
              T_STOCK_BATCH_DTL SBD,
              T_STOCK_BATCH_TRANS_LINK SBTL,
              V_ITEM_VARIANT_DTL IVD,
              T_TRANS_ITEM_DTL TID,
              T_TRANS_HDR TH
          WHERE
              TH.TRANS_ID = TID.TRANS_ID AND
              TID.TRANS_ITEM_ID = TIBD.TRANS_ITEM_ID AND
              TID.TRANS_ITEM_ID = SBTL.SOR_TRANS_ITEM_ID AND
              SBTL.BATCH_ID = SBD.BATCH_ID AND
              TIBD.BOM_VARIANT_ID = IVD.VARIANT_ID AND
              TID.QUANTITY > 0 AND
              IVD.ITEM_TYPE_ID = 1005 AND
              TID.ROW_STATUS = 1 AND
              TH.ROW_STATUS = 1 AND
              TH.TRANS_TYPE = 'SOR'AND 
              SBD.BATCH_ID = TO_NUMBER(qryValues) 
          GROUP BY SBD.BATCH_ID ; 

     ELSIF qryType = 'STOCK-ITEM-NAME' THEN
         SELECT DISTINCT VD.ITEM_NAME
         BULK COLLECT INTO T_VARCHAR_DATA
         FROM V_ITEM_VARIANT_DTL VD,T_STOCK_BOM_DTL SBD
         WHERE SBD.BOM_VARIANT_ID = VD.VARIANT_ID AND VD.ITEM_TYPE_ID = arrData(1)
         AND SBD.STOCK_ID = arrData(2);
    
     ELSIF qryType = 'GET-SPECIAL-CHARACTER' THEN
         SELECT DISTINCT IVBD.SPECIAL_CHARACTER 
         BULK COLLECT INTO T_VARCHAR_DATA    
         FROM T_ITEM_VARIANT_BOM_DTL IVBD,V_ITEM_VARIANT_RTN_DTL IV 
         WHERE IVBD.QUANTITY > 0    
               AND IVBD.BOM_VARIANT_ID = IV.VARIANT_ID 
               AND IV.ITEM_TYPE_ID = 1005 
               AND IVBD.MAIN_VARIANT_ID = TO_NUMBER(qryValues) ;
    
     ELSIF qryType = 'GET-BATCH-CREATION-DATE' THEN
         SELECT TRANS_DATE  
         BULK COLLECT INTO T_VARCHAR_DATA
         FROM (
             SELECT TRANS_DATE
             FROM T_TRANS_HDR TH,T_TRANS_ITEM_DTL TID,T_STOCK_BATCH_DTL SBD 
             WHERE TH.TRANS_ID = TID.TRANS_ID 
                   AND TID.DEST_BATCH_ID = SBD.BATCH_ID 
                   AND TID.QUANTITY > 0 
                   AND SBD.ROW_STATUS NOT IN (-1,-2)
                   AND SBD.BATCH_TYPE_ID = 1 
                   AND TH.TRANS_TYPE = 'BAG'
                   AND EXISTS (SELECT 1 FROM T_STOCK_BATCH_TRANS_LINK SBTL,T_TRANS_ITEM_DTL STID WHERE SBTL.BATCH_ID = SBD.BATCH_ID AND SBTL.SOR_TRANS_ITEM_ID = STID.TRANS_ITEM_ID AND STID.TRANS_ID = TO_NUMBER(qryValues))
             ORDER BY TH.TRANS_ID ASC
         )
         WHERE ROWNUM = 1; 
        
        
     ELSIF qryType = 'GET-BATCH-WCGROUP(BATCH_ID)' THEN 
         SELECT WGM.WCGROUP_NAME   
         BULK COLLECT INTO T_VARCHAR_DATA
         FROM T_TRANS_HDR TH,T_TRANS_ITEM_DTL TID,T_STOCK_BATCH_DTL SBD,t_workCENTER_GROUP_MASTER WGM  
         WHERE TH.TRANS_ID = TID.TRANS_ID 
               AND TID.DEST_BATCH_ID = SBD.BATCH_ID 
               AND TID.QUANTITY > 0 
               AND TID.DEST_WCGROUP_ID = WGM.WCGROUP_ID 
               AND SBD.ROW_STATUS NOT IN (-1,-2)
               AND SBD.BATCH_TYPE_ID = 1 
               AND TH.TRANS_TYPE = 'BAG' 
               AND SBD.BATCH_ID =TO_NUMBER(qryValues);   
     
     ELSIF qryType = 'GET-BATCH-CREATION-DATE-SORTRANSITEMID' THEN
         SELECT DISTINCT TRANS_DATE
         BULK COLLECT INTO T_VARCHAR_DATA
         FROM 
             (SELECT TRANS_DATE ,TH.TRANS_ID
             FROM T_TRANS_HDR TH,T_TRANS_ITEM_DTL TID,T_STOCK_BATCH_DTL SBD 
             WHERE TH.TRANS_ID = TID.TRANS_ID 
                   AND TID.DEST_BATCH_ID = SBD.BATCH_ID 
                   AND TID.QUANTITY > 0 
                   AND SBD.ROW_STATUS NOT IN (-1,-2)
                   AND SBD.BATCH_TYPE_ID = 1 
                   AND TH.TRANS_TYPE = 'BAG'
                   AND EXISTS (SELECT 1 FROM T_STOCK_BATCH_TRANS_LINK SBTL WHERE SBTL.BATCH_ID = SBD.BATCH_ID AND SBTL.SOR_TRANS_ITEM_ID = TO_NUMBER(qryValues))
             ORDER BY TH.TRANS_ID ) ;
        
     ELSIF qryType = 'ITEM_NAME(STOCK)' THEN
         SELECT DISTINCT VD.ITEM_NAME
         BULK COLLECT INTO T_VARCHAR_DATA
         FROM V_ITEM_VARIANT_DTL VD,T_STOCK_BOM_DTL TIBD 
         WHERE TIBD.BOM_VARIANT_ID = VD.VARIANT_ID 
         AND VD.ITEM_TYPE_ID = 1005 
         AND TIBD.STOCK_ID = qryValues;
    
     ELSIF qryType = 'GET-SOR-DOC-NO(TRANSID)' THEN
    
         SELECT DISTINCT OTH.DOC_NO  
         BULK COLLECT INTO T_VARCHAR_DATA
         FROM T_TRANS_ITEM_DTL TID,V_STOCK_BATCH_DTL SBD,V_TRANS_HDR OTH 
         WHERE TID.DEST_BATCH_ID = SBD.BATCH_ID
               AND SBD.SOR_TRANS_ID = OTH.TRANS_ID 
               AND TID.QUANTITY > 0 
               AND TID.DEST_BATCH_ID > 0 
               AND TID.ROW_STATUS = 1  
               AND TID.TRANS_ID = qryValues ;
    
     ELSIF qryType = 'GET-SOR-DATE(TRANSID)' THEN
    
         SELECT DISTINCT OTH.TRANS_DATE   
         BULK COLLECT INTO T_VARCHAR_DATA
         FROM T_TRANS_ITEM_DTL TID,V_STOCK_BATCH_DTL SBD,V_TRANS_HDR OTH 
         WHERE TID.DEST_BATCH_ID = SBD.BATCH_ID
               AND SBD.SOR_TRANS_ID = OTH.TRANS_ID 
               AND TID.QUANTITY > 0 
               AND TID.DEST_BATCH_ID > 0 
               AND TID.ROW_STATUS = 1  
               AND TID.TRANS_ID = qryValues;
    
     ELSIF qryType = 'GET-SOR-SHPIMENT(TRANSID)' THEN
    
         SELECT DISTINCT  OTH.SHIPMENT_DATE   
         BULK COLLECT INTO T_VARCHAR_DATA 
         FROM T_TRANS_ITEM_DTL TID,V_STOCK_BATCH_DTL SBD,V_TRANS_HDR OTH 
         WHERE TID.DEST_BATCH_ID = SBD.BATCH_ID
               AND SBD.SOR_TRANS_ID = OTH.TRANS_ID 
               AND TID.QUANTITY > 0 
               AND TID.DEST_BATCH_ID > 0 
               AND TID.ROW_STATUS = 1  
               AND TID.TRANS_ID = qryValues ; 
              
     ELSIF qryType = 'GET-TRANSFER-PRICE-DIAMOND(TRANS_STUDED)' THEN
        
       
         dblDiaRate := 0;
         dblClsRate := 0;
        
         BEGIN
            ConfigId := 177;
             SELECT CONFIG_VALUE INTO strWh1 
             FROM T_CONFIG_GLOBAL WHERE CONFIG_ID = ConfigId;
            
             arrData1 := F_FILL_STRING_TABLE(iData => strWh1);
            
             dblDiaRate := arrData1(1);
             dblClsRate := arrData1(2); 
         EXCEPTION
             WHEN NO_DATA_FOUND THEN
                 dblDiaRate := 0;
                 dblClsRate := 0;
             WHEN OTHERS THEN
                 dblDiaRate := 0;
                 dblClsRate := 0;
         END;

         SELECT NVL(SUM(DECODE(TID.SOR_TRANS_ITEM_BOM_ID,0,TID.STOCK_VALUE,(SOR.TRANS_BOM_RATE *  TH.TRANS_EXCH_RATE) - dblDiaRate) * TID.QUANTITY),0)    
         BULK COLLECT INTO T_VARCHAR_DATA 
         FROM V_TRANS_ITEM_BOM_DTL TID, V_TRANS_ITEM_BOM_DTL SOR ,
              V_ITEM_VARIANT_RTN_DTL IV ,  T_TRANS_ITEM_DTL SORTID,V_TRANS_HDR TH  
         WHERE TID.SOR_TRANS_ITEM_BOM_ID = SOR.TRANS_ITEM_BOM_ID  
               AND SOR.TRANS_ITEM_ID = SORTID.TRANS_ITEM_ID
               AND SORTID.TRANS_ID = TH.TRANS_ID 
               AND TH.TRANS_TYPE = 'SOR'  
               AND TID.BOM_VARIANT_ID = IV.VARIANT_ID 
               AND IV.ITEM_GROUP_ID = 1504  
               AND TID.QUANTITY > 0    
               AND TID.TRANS_ITEM_ID = qryValues ;   
              
     ELSIF qryType = 'GET-TRANSFER-PRICE-CLS-STONE(TRANS_STUDED)' THEN
        
         dblDiaRate := 0;
         dblClsRate := 0;
        
         BEGIN
            ConfigId := 177;
             SELECT CONFIG_VALUE INTO strWh1 
             FROM T_CONFIG_GLOBAL WHERE CONFIG_ID = ConfigId;
            
             arrData1 := F_FILL_STRING_TABLE(iData => strWh1);
            
             dblDiaRate := arrData1(1);
             dblClsRate := arrData1(2); 
         EXCEPTION
             WHEN NO_DATA_FOUND THEN
                 dblDiaRate := 0;
                 dblClsRate := 0;
             WHEN OTHERS THEN
                 dblDiaRate := 0;
                 dblClsRate := 0;
         END;

         SELECT NVL(SUM(DECODE(IV.ITEM_GROUP_ID,1504,0,DECODE(TID.SOR_TRANS_ITEM_BOM_ID,0,TID.STOCK_VALUE,(SOR.TRANS_BOM_RATE * TH.TRANS_EXCH_RATE) - ((SOR.TRANS_BOM_RATE * TH.TRANS_EXCH_RATE) * dblClsRate))) * TID.QUANTITY),0)  
         BULK COLLECT INTO T_VARCHAR_DATA 
         FROM V_TRANS_ITEM_BOM_DTL TID, V_TRANS_ITEM_BOM_DTL SOR , V_ITEM_VARIANT_RTN_DTL IV , 
              T_TRANS_ITEM_DTL SORTID,V_TRANS_HDR TH  
         WHERE TID.SOR_TRANS_ITEM_BOM_ID = SOR.TRANS_ITEM_BOM_ID  
               AND SOR.TRANS_ITEM_ID = SORTID.TRANS_ITEM_ID
               AND SORTID.TRANS_ID = TH.TRANS_ID 
               AND TH.TRANS_TYPE = 'SOR'  
               AND TID.BOM_VARIANT_ID = IV.VARIANT_ID  
               AND IV.ITEM_TYPE_ID = 1005 
               AND TID.QUANTITY > 0    
               AND TID.TRANS_ITEM_ID = qryValues ;       
              
              
     ELSIF qryType = 'GET-TRANSFER-PRICE-DIAMOND-LOSE' THEN
         
         dblDiaRate := 0;
         dblClsRate := 0;
        
         BEGIN
            ConfigId := 177;
             SELECT CONFIG_VALUE INTO strWh1 
             FROM T_CONFIG_GLOBAL WHERE CONFIG_ID = ConfigId;
            
             arrData1 := F_FILL_STRING_TABLE(iData => strWh1);
            
             dblDiaRate := arrData1(1);
             dblClsRate := arrData1(2); 
         EXCEPTION
             WHEN NO_DATA_FOUND THEN
                 dblDiaRate := 0;
                 dblClsRate := 0;
             WHEN OTHERS THEN
                 dblDiaRate := 0;
                 dblClsRate := 0;
         END;

         SELECT NVL(SUM(DECODE(STL.SOR_TRANS_ITEM_BOM_ID,0,TIBD.STOCK_VALUE,(TIBDE.TRANS_BOM_RATE* TH.TRANS_EXCH_RATE) - dblDiaRate)),0)  
                 BULK COLLECT INTO T_VARCHAR_DATA  
         FROM T_STOCK_TRANS_LINK STL,T_TRANS_ITEM_BOM_DTL_EXTD TIBDE,T_TRANS_ITEM_BOM_DTL TIBD,V_ITEM_VARIANT_RTN_DTL IV ,
              T_TRANS_ITEM_BOM_DTL OTIBD, T_TRANS_ITEM_DTL TID,V_TRANS_HDR TH
         WHERE 
              STL.SOR_TRANS_ITEM_BOM_ID = TIBD.TRANS_ITEM_BOM_ID
              AND TIBD.TRANS_ITEM_BOM_ID = TIBDE.TRANS_ITEM_BOM_ID
              AND TIBDE.TRANS_ITEM_BOM_ID = OTIBD.TRANS_ITEM_BOM_ID
              AND OTIBD.TRANS_ITEM_ID = TID.TRANS_ITEM_ID
              AND TID.TRANS_ID = TH.TRANS_ID 
              AND TH.TRANS_TYPE = 'SOR' 
              AND TIBD.BOM_VARIANT_ID = IV.VARIANT_ID
              AND IV.ITEM_GROUP_ID = 1504 
              AND STL.STOCK_ID = qryValues;  
    
    
     ELSIF qryType = 'GET-TRANSFER-PRICE-CLS-STONE-LOSE' THEN
        
     
         dblDiaRate := 0;
         dblClsRate := 0;
        
         BEGIN
            ConfigId := 177;
             SELECT CONFIG_VALUE INTO strWh1 
             FROM T_CONFIG_GLOBAL WHERE CONFIG_ID = ConfigId;
            
             arrData1 := F_FILL_STRING_TABLE(iData => strWh1);
            
             dblDiaRate := arrData1(1);
             dblClsRate := arrData1(2); 
         EXCEPTION
             WHEN NO_DATA_FOUND THEN
                 dblDiaRate := 0;
                 dblClsRate := 0;
             WHEN OTHERS THEN
                 dblDiaRate := 0;
                 dblClsRate := 0;
        END;

         SELECT NVL(SUM(DECODE(IV.ITEM_GROUP_ID,1504,0,DECODE(STL.SOR_TRANS_ITEM_BOM_ID,0,TIBD.STOCK_VALUE,((TIBDE.TRANS_BOM_RATE* TH.TRANS_EXCH_RATE)-((TIBDE.TRANS_BOM_RATE*TH.TRANS_EXCH_RATE) * dblClsRate))))*TIBD.QUANTITY),0)   
                 BULK COLLECT INTO T_VARCHAR_DATA  
         FROM T_STOCK_TRANS_LINK STL,T_TRANS_ITEM_BOM_DTL_EXTD TIBDE  ,T_TRANS_ITEM_BOM_DTL TIBD,V_ITEM_VARIANT_RTN_DTL IV , 
              T_TRANS_ITEM_BOM_DTL OTIBD, T_TRANS_ITEM_DTL TID,V_TRANS_HDR TH
         WHERE 
              STL.SOR_TRANS_ITEM_BOM_ID = TIBD.TRANS_ITEM_BOM_ID
              AND TIBD.TRANS_ITEM_BOM_ID = TIBDE.TRANS_ITEM_BOM_ID 
              AND TIBD.BOM_VARIANT_ID = IV.VARIANT_ID
              AND TIBDE.TRANS_ITEM_BOM_ID = OTIBD.TRANS_ITEM_BOM_ID
              AND OTIBD.TRANS_ITEM_ID = TID.TRANS_ITEM_ID
              AND TID.TRANS_ID = TH.TRANS_ID 
              AND TH.TRANS_TYPE = 'SOR' 
              AND IV.ITEM_TYPE_ID = 1005              
              AND STL.STOCK_ID = qryValues;   
              
     ELSIF qryType = 'GET-TRANSFER-PRICE-DIAMOND(STOCK_STUDED)' THEN
       
         dblDiaRate := 0;
         dblClsRate := 0;
        
         BEGIN
            ConfigId := 177;
             SELECT CONFIG_VALUE INTO strWh1 
             FROM T_CONFIG_GLOBAL WHERE CONFIG_ID = ConfigId;
            
             arrData1 := F_FILL_STRING_TABLE(iData => strWh1);
            
             dblDiaRate := arrData1(1);
             dblClsRate := arrData1(2); 
         EXCEPTION
             WHEN NO_DATA_FOUND THEN
                 dblDiaRate := 0;
                 dblClsRate := 0;
             WHEN OTHERS THEN
                 dblDiaRate := 0;
                 dblClsRate := 0;
         END;

         SELECT NVL(SUM(DECODE(TSBTL.SOR_TRANS_ITEM_BOM_ID,0,SBD.STOCK_VALUE,((TIBDE.TRANS_BOM_RATE * TH.TRANS_EXCH_RATE) - dblDiaRate)*SBD.QUANTITY)),0)   
         BULK COLLECT INTO T_VARCHAR_DATA  
         FROM T_STOCK_BOM_DTL SBD, T_STOCK_BOM_TRANS_LINK TSBTL,T_TRANS_ITEM_BOM_DTL_EXTD TIBDE , 
              V_ITEM_VARIANT_RTN_DTL IV , T_TRANS_ITEM_BOM_DTL TIBD, T_TRANS_ITEM_DTL TID,V_TRANS_HDR TH 
         WHERE SBD.STOCK_BOM_ID = TSBTL.STOCK_BOM_ID
               AND TSBTL.SOR_TRANS_ITEM_BOM_ID = TIBDE.TRANS_ITEM_BOM_ID 
               AND SBD.BOM_VARIANT_ID = IV.VARIANT_ID 
               AND TIBDE.TRANS_ITEM_BOM_ID = TIBD.TRANS_ITEM_BOM_ID
               AND TIBD.TRANS_ITEM_ID = TID.TRANS_ITEM_ID
               AND TID.TRANS_ID = TH.TRANS_ID 
               AND TH.TRANS_TYPE = 'SOR'
               AND IV.ITEM_GROUP_ID =1504   
               AND SBD.QUANTITY > 0    
               AND SBD.STOCK_ID = qryValues ;   
              
     ELSIF qryType = 'GET-TRANSFER-PRICE-CLS-STONE(STOCK_STUDED)' THEN
         dblDiaRate := 0;
         dblClsRate := 0;
        
         BEGIN
            ConfigId := 177;
             SELECT CONFIG_VALUE INTO strWh1 
             FROM T_CONFIG_GLOBAL WHERE CONFIG_ID = ConfigId;
            
             arrData1 := F_FILL_STRING_TABLE(iData => strWh1);
            
             dblDiaRate := arrData1(1);
             dblClsRate := arrData1(2); 
         EXCEPTION
             WHEN NO_DATA_FOUND THEN
                 dblDiaRate := 0;
                 dblClsRate := 0;
             WHEN OTHERS THEN
                 dblDiaRate := 0;
                 dblClsRate := 0;
         END;

         SELECT NVL(SUM(DECODE(IV.ITEM_GROUP_ID,1504,0,DECODE(TSBTL.SOR_TRANS_ITEM_BOM_ID,0,SBD.STOCK_VALUE,((TIBDE.TRANS_BOM_RATE* TH.TRANS_EXCH_RATE)-((TIBDE.TRANS_BOM_RATE* TH.TRANS_EXCH_RATE)*dblClsRate)))*SBD.QUANTITY)),0)  
         BULK COLLECT INTO T_VARCHAR_DATA  
         FROM T_STOCK_BOM_DTL SBD, T_STOCK_BOM_TRANS_LINK TSBTL,
              T_TRANS_ITEM_BOM_DTL_EXTD TIBDE ,T_TRANS_ITEM_BOM_DTL TIBD, T_TRANS_ITEM_DTL TID,V_TRANS_HDR TH  , 
              V_ITEM_VARIANT_RTN_DTL IV   
         WHERE SBD.STOCK_BOM_ID = TSBTL.STOCK_BOM_ID
               AND TSBTL.SOR_TRANS_ITEM_BOM_ID = TIBDE.TRANS_ITEM_BOM_ID
               AND TIBDE.TRANS_ITEM_BOM_ID = TIBD.TRANS_ITEM_BOM_ID
               AND TIBD.TRANS_ITEM_ID = TID.TRANS_ITEM_ID
               AND TID.TRANS_ID = TH.TRANS_ID 
               AND TH.TRANS_TYPE = 'SOR'
               AND SBD.BOM_VARIANT_ID = IV.VARIANT_ID 
               AND IV.ITEM_TYPE_ID = 1005 
               AND SBD.QUANTITY > 0    
               AND SBD.STOCK_ID = qryValues ;                    

     ELSIF qryType = 'GET-ROUTING-DETAIL' THEN
         SELECT OM.OPERATION_NAME
         BULK COLLECT INTO T_VARCHAR_DATA 
         FROM T_OPERATION_ROUTING_MASTER ORM, T_OPERATION_ROUTING_DTL ORD, T_OPERATION_MASTER OM
         WHERE ORM.ROUTING_ID = ORD.ROUTING_ID AND ORD.OPERATION_ID = OM.OPERATION_ID AND ORM.ROUTING_ID = arrData(1)
         ORDER BY ORD.SEQUENCE_NO;
        
     ELSIF qryType = 'GET-CATEGORY(KARATWISE)' THEN
         SELECT DISTINCT F_GET_ATTRIBUTE_VALUE(IVD.ATTRIB_TYPE_AND_VALUE,'CATG') 
         BULK COLLECT INTO T_VARCHAR_DATA  
         FROM T_TRANS_ITEM_DTL TID,V_ITEM_VARIANT_RTN_DTL IVD 
         WHERE TID.VARIANT_ID = IVD.VARIANT_ID
                AND IVD.ITEM_TYPE_ID = 1001 
                AND TID.QUANTITY>0 
                AND TID.TRANS_ID = ARRDATA(1)
                AND F_CONCAT_STRING('METAL_KARAT',tid.TRANS_ITEM_ID) =  ARRDATA(2);
               
     ELSIF qryType = 'GET-CATEGORY(TRANS_ID)' THEN
         SELECT DISTINCT F_GET_ATTRIBUTE_VALUE(IVD.ATTRIB_TYPE_AND_VALUE,'CATG') 
         BULK COLLECT INTO T_VARCHAR_DATA  
         FROM T_TRANS_ITEM_DTL TID,V_ITEM_VARIANT_RTN_DTL IVD 
         WHERE TID.VARIANT_ID = IVD.VARIANT_ID
                AND IVD.ITEM_TYPE_ID = 1001 
                AND TID.QUANTITY>0 
                AND TID.ROW_STATUS = 1 
                AND TID.TRANS_ID = ARRDATA(1) ; 

     ELSIF qryType = 'GET-CATEGORY-STOCK-GROUP(TRANS_ID)' THEN
         SELECT DISTINCT F_GET_ATTRIBUTE_VALUE(IVD.ATTRIB_TYPE_AND_VALUE,'CATG') 
         BULK COLLECT INTO T_VARCHAR_DATA  
         FROM T_TRANS_ITEM_DTL TID,V_ITEM_VARIANT_RTN_DTL IVD,T_TRANS_ITEM_DTL_EXTD TIDE 
         WHERE TID.VARIANT_ID = IVD.VARIANT_ID AND TID.TRANS_ITEM_ID = TIDE.TRANS_ITEM_ID
         AND IVD.ITEM_TYPE_ID = 1001 
         AND TID.QUANTITY>0 
         AND TID.ROW_STATUS = 1
         AND TIDE.STOCK_GROUPING_ID <> 0 
         AND TID.TRANS_ID||TIDE.STOCK_GROUPING_ID = ARRDATA(1) ;
                    
     ELSIF qryType = 'GET-CATEGORY-PCS/PRS(TRANS_ID)' THEN
         SELECT DECODE(F_GET_ATTRIBUTE_VALUE(IVD.ATTRIB_TYPE_AND_VALUE,'CATG'),'EARRING','PRS','PCS')
         BULK COLLECT INTO T_VARCHAR_DATA  
         FROM T_TRANS_ITEM_DTL TID,V_ITEM_VARIANT_RTN_DTL IVD 
         WHERE TID.VARIANT_ID = IVD.VARIANT_ID
                AND IVD.ITEM_TYPE_ID = 1001 
                AND TID.QUANTITY>0 
                AND TID.ROW_STATUS = 1 
                AND TID.TRANS_ID = ARRDATA(1) 
         GROUP BY DECODE(F_GET_ATTRIBUTE_VALUE(IVD.ATTRIB_TYPE_AND_VALUE,'CATG'),'EARRING','PRS','PCS');     
              
                
     ELSIF qryType = 'GET_LRANGE_FOR_SHAPE_RANGE' THEN
         SELECT ATTBE.LRANGE 
         BULK COLLECT INTO T_VARCHAR_DATA  
         FROM T_ITEM_ATTRIB_MASTER ATTB, 
              T_ITEM_ATTRIB_MASTER_EXTD ATTBE, 
              T_ITEM_ATTRIB_MASTER PATTB, 
              T_ITEM_ATTRIB_MASTER SHP 
         WHERE ATTBE.SHAPE_ID = SHP.ATTRIB_ID(+) AND 
               ATTB.PATTRIB_ID = PATTB.ATTRIB_ID(+) AND 
               ATTB.ATTRIB_ID = ATTBE.ATTRIB_ID AND 
               ATTB.ATTRIB_TYPE_ID = 11008 AND 
               ATTB.ROW_STATUS = 1 AND 
               SHP.ATTRIB_CODE = ARRDATA(1) AND 
               ATTB.ATTRIB_CODE = ARRDATA(2)
         GROUP BY ATTB.ATTRIB_ID,SHP.ATTRIB_CODE,ATTB.ATTRIB_CODE,ATTB.ATTRIB_DESC, 
                  PATTB.ATTRIB_CODE,PATTB.ATTRIB_DESC, 
                  ATTBE.LRANGE, ATTBE.HRANGE,SHP.ATTRIB_DESC ;
    
                  
     ELSIF qryType = 'GET_HRANGE_FOR_SHAPE_RANGE' THEN
         SELECT ATTBE.LRANGE 
         BULK COLLECT INTO T_VARCHAR_DATA  
         FROM T_ITEM_ATTRIB_MASTER ATTB, 
              T_ITEM_ATTRIB_MASTER_EXTD ATTBE, 
              T_ITEM_ATTRIB_MASTER PATTB, 
              T_ITEM_ATTRIB_MASTER SHP 
         WHERE ATTBE.SHAPE_ID = SHP.ATTRIB_ID(+) AND 
               ATTB.PATTRIB_ID = PATTB.ATTRIB_ID(+) AND 
               ATTB.ATTRIB_ID = ATTBE.ATTRIB_ID AND 
               ATTB.ATTRIB_TYPE_ID = 11008 AND 
               ATTB.ROW_STATUS = 1 AND 
               SHP.ATTRIB_CODE = ARRDATA(1) AND 
               ATTB.ATTRIB_CODE = ARRDATA(2)
         GROUP BY ATTB.ATTRIB_ID,SHP.ATTRIB_CODE,ATTB.ATTRIB_CODE,ATTB.ATTRIB_DESC, 
                  PATTB.ATTRIB_CODE,PATTB.ATTRIB_DESC, 
                  ATTBE.LRANGE, ATTBE.HRANGE,SHP.ATTRIB_DESC ;
    
     ELSIF qryType = 'GET_PRANGE_FOR_SHAPE_RANGE' THEN
         SELECT PATTB.ATTRIB_CODE 
         BULK COLLECT INTO T_VARCHAR_DATA  
         FROM T_ITEM_ATTRIB_MASTER ATTB, 
              T_ITEM_ATTRIB_MASTER_EXTD ATTBE, 
              T_ITEM_ATTRIB_MASTER PATTB, 
              T_ITEM_ATTRIB_MASTER SHP 
         WHERE ATTBE.SHAPE_ID = SHP.ATTRIB_ID(+) AND 
               ATTB.PATTRIB_ID = PATTB.ATTRIB_ID(+) AND 
               ATTB.ATTRIB_ID = ATTBE.ATTRIB_ID AND 
               ATTB.ATTRIB_TYPE_ID = 11008 AND 
               ATTB.ROW_STATUS = 1 AND 
               SHP.ATTRIB_CODE = ARRDATA(1) AND 
               ATTB.ATTRIB_CODE = ARRDATA(2)
         GROUP BY ATTB.ATTRIB_ID,SHP.ATTRIB_CODE,ATTB.ATTRIB_CODE,ATTB.ATTRIB_DESC, 
                  PATTB.ATTRIB_CODE,PATTB.ATTRIB_DESC, 
                  ATTBE.LRANGE, ATTBE.HRANGE,SHP.ATTRIB_DESC      ;        
      
                 
     ELSIF qryType = 'FETCH-TREE-TYPE' THEN
         BEGIN
             SELECT 'METAL'
             INTO strReturn
             FROM T_SMRY_ITEM_VARIANT_METAL SIVM,T_STOCK S,V_STOCK_DTL SD
             WHERE SIVM.VARIANT_ID = S.VARIANT_ID
             AND S.STOCK_ID = SD.STOCK_ID
             AND S.QUANTITY > 0
             AND SIVM.BASE_ITEM_TYPE_ID = 1004
             AND SD.BATCH_ID = qryValues;
         EXCEPTION
             WHEN NO_DATA_FOUND THEN
                 strReturn := 'WAX';
         END;
        
        
     ELSIF qryType = 'GET-OPERATION-CODE-BATCH' THEN
         SELECT OPERATION_CODE 
         BULK COLLECT INTO T_VARCHAR_DATA
         FROM 
         (
         SELECT OP.OPERATION_CODE  
         FROM T_TRANS_HDR TH , T_TRANS_ITEM_DTL TID,T_OPERATION_MASTER OP 
         WHERE TH.OPERATION_ID = OP.OPERATION_ID
               AND TH.TRANS_ID = TID.TRANS_ID 
               AND TH.TRANS_TYPE = 'ISS'
               AND TID.SRC_BATCH_ID = qryValues 
         )WHERE ROWNUM =1 ; 
        
      ELSIF qryType = 'GET-BUNCH_QLTY(BATCHID)' THEN
         SELECT DISTINCT MV.QUALITY_CODE  
         BULK COLLECT INTO T_VARCHAR_DATA 
         FROM T_TRANS_HDR TH,T_TRANS_ITEM_DTL TID,T_SMRY_ITEM_VARIANT_STONE MV  , T_STOCK_BATCH_DTL SBD 
         WHERE TH.TRANS_ID = TID.TRANS_ID
               AND TID.VARIANT_ID = MV.VARIANT_ID
               AND TH.TRANS_TYPE = 'BUN'
               AND TID.QUANTITY > 0 
               AND TID.DEST_BATCH_ID = SBD.BATCH_ID
               AND SBD.PBATCH_ID = qryValues ;
              
     ELSIF qryType = 'GET-PLATING-INSTR(VARIANTID)' THEN
         SELECT ATTRIB_DESC
         BULK COLLECT INTO T_VARCHAR_DATA 
         FROM T_ITEM_ATTRIB_MASTER AM,T_ITEM_VARIANT_ATTRIB_DTL IVAD ,T_ITEM_ATTRIB_CONFIG IAC 
         WHERE IVAD.ATTRIB_ID = AM.ATTRIB_ID(+) AND
         IVAD.ITEM_ATTRIB_CONFIG_ID = IAC.ITEM_ATTRIB_CONFIG_ID(+) AND 
         IAC.ITEM_CONFIG_ID = 25 AND 
         IAC.ATTRIB_TYPE_ID = 11196 AND 
         AM.ATTRIB_TYPE_ID = 11196 AND  
         IVAD.VARIANT_ID = qryValues; 
    
     ELSIF qryType = 'GET-SIZE(TRANSITEMID)' THEN
         SELECT IAM.ATTRIB_DESC
         BULK COLLECT INTO T_VARCHAR_DATA   
         FROM T_TRANS_ITEM_ATTRIB_DTL TIAD, T_ITEM_ATTRIB_MASTER IAM 
         WHERE TIAD.ATTRIB_ID = IAM.ATTRIB_ID AND 
               TIAD.ATTRIB_TYPE_ID(+) = 11002 AND 
               TIAD.TRANS_ITEM_ID = qryValues ; 
    
     ELSIF qryType = 'GET-SIZE(TEMPTRANSITEMID)' THEN
         SELECT IAM.ATTRIB_DESC
         BULK COLLECT INTO T_VARCHAR_DATA
         FROM T_TEMP_TRANS_ATTRIB_DTL TIAD, T_ITEM_ATTRIB_MASTER IAM
         WHERE TIAD."AttribId" = IAM.ATTRIB_ID AND
               TIAD."AttribTypeId"(+) = 11002 AND
               TIAD."TransItemId" = qryValues ;
                   
    ELSIF qryType = 'GET-REPAIR_CODR(TRANSITEMID)' THEN
         SELECT IAM.ATTRIB_DESC
         BULK COLLECT INTO T_VARCHAR_DATA   
         FROM T_TRANS_ITEM_ATTRIB_DTL TIAD, T_ITEM_ATTRIB_MASTER IAM 
         WHERE TIAD.ATTRIB_ID = IAM.ATTRIB_ID AND 
               TIAD.ATTRIB_TYPE_ID(+) = 11210 AND 
               TIAD.TRANS_ITEM_ID = qryValues ; 
     
     ELSIF qryType = 'GET-MULTIUSE-CODE(TRANSITEMID)' THEN
         SELECT IAM.ATTRIB_CODE
         BULK COLLECT INTO T_VARCHAR_DATA   
         FROM T_TRANS_ITEM_ATTRIB_DTL TIAD, T_ITEM_ATTRIB_MASTER IAM 
         WHERE TIAD.ATTRIB_ID = IAM.ATTRIB_ID AND 
               TIAD.ATTRIB_TYPE_ID(+) = 11178 AND 
               TIAD.TRANS_ITEM_ID = qryValues ;
    
     ELSIF qryType = 'GET-MULTIUSE-VALUE(TRANSITEMID)' THEN
         SELECT IAM.ATTRIB_DESC
         BULK COLLECT INTO T_VARCHAR_DATA   
         FROM T_TRANS_ITEM_ATTRIB_DTL TIAD, T_ITEM_ATTRIB_MASTER IAM 
         WHERE TIAD.ATTRIB_ID = IAM.ATTRIB_ID AND 
               TIAD.ATTRIB_TYPE_ID(+) = 11178 AND 
               TIAD.TRANS_ITEM_ID = qryValues ;
                                  
     ELSIF qryType = 'GET-SIZE_CODE(TRANSITEMID)' THEN
         SELECT IAM.ATTRIB_CODE 
         BULK COLLECT INTO T_VARCHAR_DATA   
         FROM T_TRANS_ITEM_ATTRIB_DTL TIAD, T_ITEM_ATTRIB_MASTER IAM 
         WHERE TIAD.ATTRIB_ID = IAM.ATTRIB_ID AND 
               TIAD.ATTRIB_TYPE_ID(+) = 11002 AND 
               TIAD.TRANS_ITEM_ID = qryValues ; 
              
      ELSIF qryType = 'GET-STYLEQLTY(TRANSITEMID)' THEN
         SELECT IAM.ATTRIB_DESC 
         BULK COLLECT INTO T_VARCHAR_DATA   
         FROM T_TRANS_ITEM_ATTRIB_DTL TIAD, T_ITEM_ATTRIB_MASTER IAM 
         WHERE TIAD.ATTRIB_ID = IAM.ATTRIB_ID AND 
               TIAD.ATTRIB_TYPE_ID(+) = 11075 AND 
               TIAD.TRANS_ITEM_ID = qryValues ; 
      
     ELSIF qryType = 'GET-STYLEQLTY_CODE(TRANSITEMID)' THEN
         SELECT IAM.ATTRIB_CODE 
         BULK COLLECT INTO T_VARCHAR_DATA   
         FROM T_TRANS_ITEM_ATTRIB_DTL TIAD, T_ITEM_ATTRIB_MASTER IAM 
         WHERE TIAD.ATTRIB_ID = IAM.ATTRIB_ID AND 
               TIAD.ATTRIB_TYPE_ID(+) = 11075 AND 
               TIAD.TRANS_ITEM_ID = qryValues ;                    
          
     ELSIF qryType = 'GET-STYLEQLTY(TRANSID)' THEN
         SELECT IAM.ATTRIB_CODE 
         BULK COLLECT INTO T_VARCHAR_DATA   
         FROM T_TRANS_ITEM_ATTRIB_DTL TIAD, T_ITEM_ATTRIB_MASTER IAM, T_TRANS_ITEM_DTL TID 
         WHERE TIAD.ATTRIB_ID = IAM.ATTRIB_ID AND 
               TIAD.TRANS_ITEM_ID = TID.TRANS_ITEM_ID AND
               TIAD.ATTRIB_TYPE_ID(+) = 11075 AND 
               TID.TRANS_ID = qryValues ;   
               
     ELSIF qryType = 'GET-STYLEQLTY-STOCK-GROUP(TRANSID)' THEN
         SELECT IAM.ATTRIB_CODE 
         BULK COLLECT INTO T_VARCHAR_DATA   
         FROM T_TRANS_ITEM_ATTRIB_DTL TIAD, T_ITEM_ATTRIB_MASTER IAM, T_TRANS_ITEM_DTL TID, T_TRANS_ITEM_DTL_EXTD TIDE 
         WHERE TIAD.ATTRIB_ID = IAM.ATTRIB_ID AND 
               TIAD.TRANS_ITEM_ID = TID.TRANS_ITEM_ID AND
               TID.TRANS_ITEM_ID = TIDE.TRANS_ITEM_ID AND
               TIAD.ATTRIB_TYPE_ID(+) = 11075 AND
               TIDE.STOCK_GROUPING_ID <> 0 AND 
               TID.TRANS_ID||TIDE.STOCK_GROUPING_ID = qryValues ;                  
                        
     ELSIF qryType = 'GET-FINDING-TYPE(TRANSITEMID)' THEN
         SELECT IAM.ATTRIB_DESC 
         BULK COLLECT INTO T_VARCHAR_DATA   
         FROM T_TRANS_ITEM_ATTRIB_DTL TIAD, T_ITEM_ATTRIB_MASTER IAM 
         WHERE TIAD.ATTRIB_ID = IAM.ATTRIB_ID AND 
               TIAD.ATTRIB_TYPE_ID(+) = 11197 AND 
               TIAD.TRANS_ITEM_ID = qryValues ; 
                           
     ELSIF qryType = 'GET-FINALSIZE(TRANSITEMID)' THEN
         SELECT IAM.ATTRIB_DESC
         BULK COLLECT INTO T_VARCHAR_DATA   
         FROM T_TRANS_ITEM_ATTRIB_DTL TIAD, T_ITEM_ATTRIB_MASTER IAM 
         WHERE TIAD.ATTRIB_ID = IAM.ATTRIB_ID AND 
               TIAD.ATTRIB_TYPE_ID(+) = 11169 AND 
               TIAD.TRANS_ITEM_ID = qryValues ;

     ELSIF qryType = 'GET-ORDERREQ(TRANSITEMID)' THEN
         SELECT IAM.ATTRIB_DESC
         BULK COLLECT INTO T_VARCHAR_DATA   
         FROM T_TRANS_ITEM_ATTRIB_DTL TIAD, T_ITEM_ATTRIB_MASTER IAM 
         WHERE TIAD.ATTRIB_ID = IAM.ATTRIB_ID AND 
               TIAD.ATTRIB_TYPE_ID(+) = 11184 AND 
               TIAD.TRANS_ITEM_ID = qryValues ;    

     ELSIF qryType = 'GET-VALUEADD(TRANSITEMID)' THEN
         SELECT IAM.ATTRIB_DESC
         BULK COLLECT INTO T_VARCHAR_DATA   
         FROM T_TRANS_ITEM_ATTRIB_DTL TIAD, T_ITEM_ATTRIB_MASTER IAM 
         WHERE TIAD.ATTRIB_ID = IAM.ATTRIB_ID AND 
               TIAD.ATTRIB_TYPE_ID(+) = 11117 AND 
               TIAD.TRANS_ITEM_ID = qryValues ; 
                
    ELSIF qryType = 'GET-EX_NO(TRANSITEMID)' THEN
         SELECT IAM.ATTRIB_DESC
         BULK COLLECT INTO T_VARCHAR_DATA   
         FROM T_TRANS_ITEM_ATTRIB_DTL TIAD, T_ITEM_ATTRIB_MASTER IAM 
         WHERE TIAD.ATTRIB_ID = IAM.ATTRIB_ID AND 
               TIAD.ATTRIB_TYPE_ID(+) = 11463 AND 
               TIAD.TRANS_ITEM_ID = qryValues ; 

     ELSIF qryType = 'GET-VALADDLOSS-(TRANSITEMID)' THEN
         SELECT TIAD.ATTRIB_VALUE 
         BULK COLLECT INTO T_VARCHAR_DATA   
         FROM T_TRANS_ITEM_ATTRIB_DTL TIAD, T_ITEM_ATTRIB_MASTER IAM 
         WHERE TIAD.ATTRIB_ID = IAM.ATTRIB_ID AND 
               TIAD.ATTRIB_TYPE_ID(+) = 11117 AND 
               TIAD.TRANS_ITEM_ID = qryValues ; 
     /*      
     ELSIF qryType = 'GET-VALADDLOSS-(STOCKID)' THEN
         SELECT TIAD.ATTRIB_VALUE 
         BULK COLLECT INTO T_VARCHAR_DATA   
         FROM T_STOCK_ATTRIB_DTL TIAD, T_ITEM_ATTRIB_MASTER IAM 
         WHERE TIAD.ATTRIB_ID = IAM.ATTRIB_ID AND 
               TIAD.ATTRIB_TYPE_ID(+) = 11117 AND 
               TIAD.TRANS_ITEM_ID = qryValues ; 
       */
     ELSIF qryType = 'GET-SIZE-CODE(TRANSITEMID)' THEN
         SELECT IAM.ATTRIB_CODE
         BULK COLLECT INTO T_VARCHAR_DATA   
         FROM T_TRANS_ITEM_ATTRIB_DTL TIAD, T_ITEM_ATTRIB_MASTER IAM 
         WHERE TIAD.ATTRIB_ID = IAM.ATTRIB_ID AND 
               TIAD.ATTRIB_TYPE_ID(+) = 11002 AND 
               TIAD.TRANS_ITEM_ID = qryValues ;  

     ELSIF qryType = 'GET-GOLD-TROUNC(TRANSID)' THEN
         WITH TIBD AS (
             SELECT MAX(TIBD.TRANS_ITEM_BOM_ID) AS TRANS_ITEM_BOM_ID
             FROM V_ITEM_VARIANT_RTN_DTL IV,T_TRANS_ITEM_BOM_DTL TIBD,T_TRANS_ITEM_DTL TID
             WHERE TID.TRANS_ITEM_ID = TIBD.TRANS_ITEM_ID
             AND TIBD.BOM_VARIANT_ID = IV.VARIANT_ID
             AND IV.ITEM_GROUP_ID = 1501 
             AND TID.TRANS_ID = TO_NUMBER(arrData(1))
         )
         SELECT MAX(STP.ROW_VALUE) 
         BULK COLLECT INTO T_VARCHAR_DATA   
         FROM T_FORMULA_PROCEDURE_DTL PD,T_CONFIG_FORMULA_FIXED_DATA CFD,T_TRANS_ITEM_BOM_FORMULA_DTL STP,TIBD
         WHERE
         STP.PROCEDURE_ID = PD.PROCEDURE_ID 
         AND STP.ROW_NO = PD.ROW_NO 
         AND PD.ROW_TYPE_ID = CFD.CONFIG_ID 
         AND STP.TRANS_ITEM_BOM_ID = TIBD.TRANS_ITEM_BOM_ID
         AND CFD.CONFIG_CODE = 'TROUNC';
    
    ELSIF qryType = 'GET-PLAT-TROUNC(TRANSID)' THEN
         WITH TIBD AS (
             SELECT MAX(TIBD.TRANS_ITEM_BOM_ID) AS TRANS_ITEM_BOM_ID
             FROM V_ITEM_VARIANT_RTN_DTL IV,T_TRANS_ITEM_BOM_DTL TIBD,T_TRANS_ITEM_DTL TID
             WHERE TID.TRANS_ITEM_ID = TIBD.TRANS_ITEM_ID
             AND TIBD.BOM_VARIANT_ID = IV.VARIANT_ID
             AND IV.ITEM_GROUP_ID = 1502 
             AND TID.TRANS_ID = TO_NUMBER(arrData(1))
         )
         SELECT MAX(STP.ROW_VALUE) 
         BULK COLLECT INTO T_VARCHAR_DATA   
         FROM T_FORMULA_PROCEDURE_DTL PD,T_CONFIG_FORMULA_FIXED_DATA CFD,T_TRANS_ITEM_BOM_FORMULA_DTL STP,TIBD
         WHERE
         STP.PROCEDURE_ID = PD.PROCEDURE_ID 
         AND STP.ROW_NO = PD.ROW_NO 
         AND PD.ROW_TYPE_ID = CFD.CONFIG_ID 
         AND STP.TRANS_ITEM_BOM_ID = TIBD.TRANS_ITEM_BOM_ID
         AND CFD.CONFIG_CODE = 'TROUNC';
        
     ELSIF qryType = 'GET-GOLD-RATE(TRANSITEMID)' THEN
         SELECT  
              MAX(F_GETTRANSPRICEVALUE(0,0,TIBD.TRANS_ITEM_BOM_ID,0,'BASERATE'))  BULK COLLECT INTO T_VARCHAR_DATA   
         FROM T_TRANS_ITEM_DTL TID,T_TRANS_ITEM_BOM_DTL TIBD,
              V_ITEM_VARIANT_DTL IV
         WHERE TIBD.BOM_VARIANT_ID = IV.VARIANT_ID AND   
               TID.TRANS_ITEM_ID = TIBD.TRANS_ITEM_ID(+) AND  
               TIBD.QUANTITY > 0 AND  
               IV.ITEM_TYPE_ID = 1004 AND 
               TID.TRANS_ITEM_ID =qryValues ;

     ELSIF qryType = 'GET-SILVER-TROUNC(TRANSID)' THEN
         SELECT  
               MAX(F_GETTRANSPRICEVALUE(0,0,TIBD.TRANS_ITEM_BOM_ID,0,'TROUNC'))  BULK COLLECT INTO T_VARCHAR_DATA   
         FROM T_TRANS_ITEM_DTL TID,T_TRANS_ITEM_BOM_DTL TIBD,
              V_ITEM_VARIANT_DTL IV
         WHERE TIBD.BOM_VARIANT_ID = IV.VARIANT_ID AND   
               TID.TRANS_ITEM_ID = TIBD.TRANS_ITEM_ID(+) AND  
               TIBD.QUANTITY > 0 AND  
               IV.ITEM_TYPE_ID = 1004 AND 
               IV.ITEM_GROUP_ID = 1503 AND
               TID.TRANS_ID =qryValues ;

     ELSIF qryType = 'GET-PLATINUM-TROUNC(TRANSID)' THEN
         SELECT  
               MAX(F_GETTRANSPRICEVALUE(0,0,TIBD.TRANS_ITEM_BOM_ID,0,'TROUNC'))  BULK COLLECT INTO T_VARCHAR_DATA   
         FROM T_TRANS_ITEM_DTL TID,T_TRANS_ITEM_BOM_DTL TIBD,
              V_ITEM_VARIANT_DTL IV
         WHERE TIBD.BOM_VARIANT_ID = IV.VARIANT_ID AND   
               TID.TRANS_ITEM_ID = TIBD.TRANS_ITEM_ID(+) AND  
               TIBD.QUANTITY > 0 AND  
               IV.ITEM_TYPE_ID = 1004 AND 
               IV.ITEM_GROUP_ID = 1502 AND 
               TID.TRANS_ID =qryValues ;

     ELSIF qryType = 'GET-VARIANT-PLATING' THEN          
         SELECT ATTRIB_DESC 
         BULK COLLECT INTO T_VARCHAR_DATA  
         FROM T_ITEM_ATTRIB_MASTER AM,T_ITEM_VARIANT_ATTRIB_DTL IVAD ,T_ITEM_ATTRIB_CONFIG IAC 
         WHERE IVAD.ATTRIB_ID = AM.ATTRIB_ID(+) AND
             IVAD.ITEM_ATTRIB_CONFIG_ID = IAC.ITEM_ATTRIB_CONFIG_ID(+) AND 
             IAC.ITEM_CONFIG_ID = 25 AND 
             IAC.ATTRIB_TYPE_ID = 11196 AND 
             AM.ATTRIB_TYPE_ID = 11196 AND  
             IVAD.VARIANT_ID =qryValues ; 
    
     ELSIF qryType = 'GET-TROUNC(TRANSID)' THEN
    
         /*SELECT  
               MAX(F_GETTRANSPRICEVALUE(0,0,TIBD.TRANS_ITEM_BOM_ID,0,'TROUNC'))  BULK COLLECT INTO T_VARCHAR_DATA   
         FROM T_TRANS_ITEM_DTL TID,T_TRANS_ITEM_BOM_DTL TIBD,
              V_ITEM_VARIANT_DTL IV
         WHERE TIBD.BOM_VARIANT_ID = IV.VARIANT_ID AND   
               TID.TRANS_ITEM_ID = TIBD.TRANS_ITEM_ID(+) AND  
               TIBD.QUANTITY > 0 AND  
               IV.ITEM_TYPE_ID = 1004 AND                
               TID.TRANS_ID = qryValues ; 
         */              
              

         SELECT  
             MAX(STP.ROW_VALUE)  
         BULK COLLECT INTO T_VARCHAR_DATA   
         FROM 
             T_TRANS_ITEM_DTL TID,T_TRANS_ITEM_BOM_DTL TIBD,T_TRANS_ITEM_BOM_FORMULA_DTL STP,T_FORMULA_PROCEDURE_DTL PD
         WHERE 
             STP.PROCEDURE_ID = PD.PROCEDURE_ID
             AND STP.ROW_NO = PD.ROW_NO
             AND TIBD.TRANS_ITEM_BOM_ID = STP.TRANS_ITEM_BOM_ID
             AND TID.TRANS_ITEM_ID = TIBD.TRANS_ITEM_ID
             AND PD.ROW_TYPE_ID = 1007  
             AND TID.TRANS_ID = qryValues ; 
    
    ELSIF qryType = 'GET-FORMULA-ROW-1(TRANSID)' THEN
        SELECT  
              MAX(F_GETTRANSPRICEVALUE(0,0,TIBD.TRANS_ITEM_BOM_ID,0,'FORMULA-ROW-1'))  BULK COLLECT INTO T_VARCHAR_DATA   
        FROM T_TRANS_ITEM_DTL TID,T_TRANS_ITEM_BOM_DTL TIBD,
             V_ITEM_VARIANT_DTL IV
        WHERE TIBD.BOM_VARIANT_ID = IV.VARIANT_ID AND   
              TID.TRANS_ITEM_ID = TIBD.TRANS_ITEM_ID(+) AND  
              TIBD.QUANTITY > 0 AND  
              IV.ITEM_TYPE_ID = 1004 AND  
              TID.TRANS_ID =qryValues ;               
              
    
     ELSIF qryType = 'GET-TROUNC(TRANS_ITEM_ID)' THEN
         SELECT  
               MAX(F_GETTRANSPRICEVALUE(0,0,TIBD.TRANS_ITEM_BOM_ID,0,'TROUNC'))  BULK COLLECT INTO T_VARCHAR_DATA   
         FROM T_TRANS_ITEM_DTL TID,T_TRANS_ITEM_BOM_DTL TIBD,
              V_ITEM_VARIANT_DTL IV
         WHERE TIBD.BOM_VARIANT_ID = IV.VARIANT_ID AND   
               TID.TRANS_ITEM_ID = TIBD.TRANS_ITEM_ID(+) AND  
               TIBD.QUANTITY > 0 AND  
               IV.ITEM_TYPE_ID = 1004 AND  
               TID.TRANS_ITEM_ID =qryValues ;
                        
     ELSIF qryType = 'GET-BOE-DETAILS' THEN
         SELECT DISTINCT  CS.BOE_NO||' DT: '||CS.BOE_DATE BULK COLLECT INTO T_VARCHAR_DATA
         FROM T_VA_TRANS_HDR VH,T_VA_TRANS_DTL VTD,
             T_VA_TRANS_CUSTOM_DTL VTCD,V_ITEM_VARIANT_RTN_DTL MV,
             T_CUSTOM_STOCK CS, T_TRANS_ITEM_BOM_DTL TIBD  
         WHERE  VH.VA_TRANS_ID = VTD.VA_TRANS_ID
               AND VH.VA_TRANS_ID = VTCD.VA_TRANS_ID
               AND VTCD.CUSTOM_STOCK_ID = CS.CUSTOM_STOCK_ID
               AND VTCD.TRANS_ITEM_BOM_ID = TIBD.TRANS_ITEM_BOM_ID
               AND TIBD.BOM_VARIANT_ID = MV.VARIANT_ID
               AND MV.ITEM_TYPE_ID = 1004 
               AND VH.REF_TRANS_ID = qryValues   
          GROUP BY CS.BOE_NO||' DT: '||CS.BOE_DATE  ;
         
                
     ELSIF qryType = 'GET-BOE-PARTY' THEN
         SELECT DISTINCT PM.PARTY_NAME BULK COLLECT INTO T_VARCHAR_DATA
         FROM T_VA_TRANS_HDR VH,T_VA_TRANS_DTL VTD,
             T_VA_TRANS_CUSTOM_DTL VTCD,V_ITEM_VARIANT_RTN_DTL MV,
             T_CUSTOM_STOCK CS, T_TRANS_ITEM_BOM_DTL TIBD  ,T_TRANS_HDR_EXTD TH,T_PARTY_MASTER PM 
         WHERE  VH.VA_TRANS_ID = VTD.VA_TRANS_ID
               AND VH.VA_TRANS_ID = VTCD.VA_TRANS_ID
               AND VTCD.CUSTOM_STOCK_ID = CS.CUSTOM_STOCK_ID
               AND VTCD.TRANS_ITEM_BOM_ID = TIBD.TRANS_ITEM_BOM_ID
               AND CS.REF_TRANS_ID  = TH.TRANS_ID
               AND TH.PARTY_ID = PM.PARTY_ID 
               AND TIBD.BOM_VARIANT_ID = MV.VARIANT_ID
               AND MV.ITEM_TYPE_ID = 1004 
               AND VH.REF_TRANS_ID = qryValues   
          GROUP BY PM.PARTY_NAME    ;
        
        
     ELSIF qryType = 'GET-KNOCKOFF-WT' THEN
         SELECT  SUM(VTCD.CUSTOM_STOCK_QUANTITY) BULK COLLECT INTO T_VARCHAR_DATA
         FROM T_VA_TRANS_HDR VH, T_TRANS_ITEM_BOM_DTL TIBD,
             T_VA_TRANS_CUSTOM_DTL VTCD,V_ITEM_VARIANT_RTN_DTL MV 
         WHERE  VH.VA_TRANS_ID = VTCD.VA_TRANS_ID 
               AND VTCD.TRANS_ITEM_BOM_ID  = TIBD.TRANS_ITEM_BOM_ID 
               AND TIBD.BOM_VARIANT_ID = MV.VARIANT_ID 
               AND MV.ITEM_TYPE_ID = 1004 
               AND VH.REF_TRANS_ID = qryValues;
            
     ELSIF qryType = 'FETCH-STOCK-WITH-PARTY' THEN
         SELECT SUM(QUANTITY)
         BULK COLLECT INTO T_VARCHAR_DATA
         FROM T_STOCK S,V_STOCK_DTL SD
         WHERE S.STOCK_ID = SD.STOCK_ID
         AND S.VARIANT_ID = TO_NUMBER(arrDAta(1))
         AND SD.PARTY_ID = TO_NUMBER(arrDAta(2))
         AND S.QUANTITY >0;
            
     ELSIF qryType = 'GET-ITEM-IMAGE-FILE' THEN    
         SELECT IMAGE_FILE_NAME 
         BULK COLLECT INTO T_VARCHAR_DATA
         FROM T_ITEM_VARIANT_IMAGE_DTL
         WHERE VARIANT_ID = qryValues;


     ELSIF qryType = 'GET-METAL-CODE(BOM-SET-NO)' THEN    

         SELECT
             MTL.KARAT_CODE
         BULK COLLECT INTO T_VARCHAR_DATA             
         FROM 
             T_TRANS_ITEM_BOM_DTL TIBD,T_SMRY_ITEM_VARIANT_METAL MTL
         WHERE
             TIBD.BOM_VARIANT_ID = MTL.VARIANT_ID
             AND TIBD.PARENT_SET_NO = arrDAta(2)
             AND TIBD.TRANS_ITEM_ID = arrDAta(1);
            
     ELSIF qryType = 'GET-STOCK-BOM-METAL-OWNERSHIP' THEN
    
         SELECT SUM(CASE WHEN SBTL.OWNER_PARTY_ID > 0 THEN 1 ELSE 0 END) AS OWNER_PARTY_ID
         INTO strReturn
         FROM V_ITEM_VARIANT_DTL SIVM,T_STOCK_BOM_TRANS_LINK SBTL,T_STOCK_BOM_DTL SBD
         WHERE SBD.STOCK_BOM_ID = SBTL.STOCK_BOM_ID 
         AND SBD.BOM_VARIANT_ID = SIVM.VARIANT_ID
         AND SIVM.ITEM_TYPE_ID = 1004
         AND SBD.STOCK_ID = TO_NUMBER(arrData(1));
    
         IF strReturn IS NULL THEN
             strReturn := '-1';
         ELSE
             IF NVL(strReturn,0) >0 THEN
                 strReturn := '1';
             ELSE
                 strReturn := '0';            
             END IF;                
         END IF;
    
         RETURN strReturn;

     ELSIF qryType = 'GET-STOCK-BOM-FINDING-OWNERSHIP' THEN
    
         SELECT SUM(CASE WHEN SBTL.OWNER_PARTY_ID > 0 THEN 1 ELSE 0 END) AS OWNER_PARTY_ID
         INTO strReturn
         FROM V_ITEM_VARIANT_DTL SIVM,T_STOCK_BOM_TRANS_LINK SBTL,T_STOCK_BOM_DTL SBD
         WHERE SBD.STOCK_BOM_ID = SBTL.STOCK_BOM_ID 
         AND SBD.BOM_VARIANT_ID = SIVM.VARIANT_ID
         AND SIVM.ITEM_TYPE_ID = 1003
         AND SBD.STOCK_ID = TO_NUMBER(arrData(1));
    
         IF strReturn IS NULL THEN
             strReturn := '-1';
         ELSE
             IF NVL(strReturn,0) >0 THEN
                 strReturn := '1';
             ELSE
                 strReturn := '0';            
             END IF;                
         END IF;
    
         RETURN strReturn;
    

     ELSIF qryType = 'GET-FINDING-VARIANT(TRANS_ITEM_ID)' THEN    

         SELECT IV.VARIANT_NAME BULK COLLECT INTO T_VARCHAR_DATA 
         FROM V_ITEM_VARIANT_RTN_DTL IV , T_TRANS_ITEM_BOM_DTL TIBD 
         WHERE TIBD.BOM_VARIANT_ID = IV.VARIANT_ID 
               AND IV.ITEM_TYPE_ID = 1003   
               AND TIBD.TRANS_ITEM_ID = arrDAta(1);  

     ELSIF qryType = 'GET-CATGWISE-PCS' THEN    

         SELECT CATG||' '||SUM(PCS)
         BULK COLLECT INTO T_VARCHAR_DATA
         FROM
         (
             SELECT F_GET_ATTRIBUTE_VALUE(VD.ATTRIB_TYPE_AND_VALUE,'CATG') AS CATG,(DECODE(VD.ITEM_STOCK_UOM_CODE,'PCS',TID.QUANTITY,ROUND(TID.QUANTITY*TID.CONVERSION_FACTOR,0))) AS PCS
             FROM T_TRANS_ITEM_DTL TID, V_ITEM_VARIANT_DTL VD
             WHERE TID.VARIANT_ID = VD.VARIANT_ID AND TID.ROW_STATUS = 1 AND TID.TRANS_ID = qryValues
         )
         GROUP BY CATG;

     ELSIF qryType = 'GET-QLTYWISE-WT(SORWISE-ISS)' THEN    

         SELECT 
             F_GET_ATTRIBUTE_VALUE(VD.ATTRIB_TYPE_AND_CODE,'STNQLTY')||' '||SUM(TID.QUANTITY)
             BULK COLLECT INTO T_VARCHAR_DATA
         FROM
             T_TRANS_HDR TH,
             T_TRANS_ITEM_DTL TID,
             V_ITEM_VARIANT_DTL VD
         WHERE
             TID.VARIANT_ID = VD.VARIANT_ID AND
             VD.ITEM_TYPE_ID = 1005 AND
             TH.TRANS_ID = TID.TRANS_ID AND 
             TH.TRANS_TYPE = 'ISS' AND
             TID.SOR_TRANS_ID = qryValues
         GROUP BY F_GET_ATTRIBUTE_VALUE(VD.ATTRIB_TYPE_AND_CODE,'STNQLTY');        

     ELSIF qryType = 'METAL_COLOR_DESC' THEN
         SELECT DISTINCT MV.COLOR_DESC
         BULK COLLECT INTO T_VARCHAR_DATA
         FROM T_TRANS_ITEM_BOM_DTL STB,T_SMRY_ITEM_VARIANT_METAL MV 
         WHERE STB.BOM_VARIANT_ID  = MV.VARIANT_ID
         AND STB.TRANS_ITEM_ID = qryValues;

     ELSIF qryType = 'METAL_COLOR_DESC(STOCKID)' THEN
         SELECT DISTINCT MV.COLOR_DESC
         BULK COLLECT INTO T_VARCHAR_DATA
         FROM T_STOCK_BOM_DTL STB,T_SMRY_ITEM_VARIANT_METAL MV 
         WHERE STB.BOM_VARIANT_ID  = MV.VARIANT_ID
         AND STB.STOCK_ID = qryValues;
         
     ELSIF qryType = 'LAST-TRANSFER-DATE' THEN
 		SELECT TRANS_DATE
         BULK COLLECT INTO T_VARCHAR_DATA
         FROM (
             SELECT TO_CHAR(TH.TRANS_DATE,'DD/MM/YYYY') AS TRANS_DATE
             FROM T_TRANS_HDR TH,T_TRANS_ITEM_DTL TID 
             WHERE TH.TRANS_ID = TID.TRANS_ID
             AND TH.TRANS_TYPE = 'TRN'
             AND TID.STOCK_CODE = qryValues
             ORDER BY TH.TRANS_ID DESC
         )
         WHERE ROWNUM = 1;
        
     ELSIF qryType = 'BATCH-ISSUE-DATE' THEN
    
         SELECT DISTINCT TO_CHAR(TH.TRANS_DATE,'DD/MM/YYYY') AS TRANS_DATE
         BULK COLLECT INTO T_VARCHAR_DATA
         FROM T_TRANS_HDR TH,V_TRANS_ITEM_DTL TID,T_STOCK_BATCH_DTL SBD 
         WHERE TID.DEST_BATCH_ID = SBD.BATCH_ID 
         AND TH.TRANS_ID = TID.TRANS_ID
         AND SBD.BATCH_TYPE_ID = 1
         AND TH.TRANS_TYPE = 'ISS'
         AND TID.SRC_BATCH_ID = qryValues;
        
     ELSIF qryType = 'BUNCH-ISSUE-DATE' THEN
    
         SELECT DISTINCT TO_CHAR(NVL(TID.ADD_DATE1,TH.TRANS_DATE),'DD/MM/YYYY') AS TRANS_DATE
         BULK COLLECT INTO T_VARCHAR_DATA
         FROM T_TRANS_HDR TH,V_TRANS_ITEM_DTL TID,T_STOCK_BATCH_DTL SBD 
         WHERE TID.DEST_BATCH_ID = SBD.BATCH_ID 
         AND TH.TRANS_ID = TID.TRANS_ID
         AND SBD.BATCH_TYPE_ID = 2
         AND TH.TRANS_TYPE = 'ISS'
         AND SBD.PBATCH_ID = qryValues;

     ELSIF qryType = 'STONE-WITH-PARTY' THEN
    
         SELECT NVL(SUM(S.QUANTITY * S.CONVERSION_FACTOR),0)
         BULK COLLECT INTO T_VARCHAR_DATA
         FROM T_STOCK S,T_STOCK_TRANS_LINK STL,V_STOCK_DTL SD,T_SMRY_ITEM_VARIANT_STONE STN
         WHERE S.STOCK_ID = STL.STOCK_ID
         AND S.VARIANT_ID = STN.VARIANT_ID
         AND S.STOCK_ID = SD.STOCK_ID
         AND SD.PARTY_ID >0
         AND S.QUANTITY >0
         AND STL.SOR_TRANS_ITEM_ID = qryValues; 
    
     ELSIF qryType = 'QCC-OPERATION-TYPE-DATE' THEN
        
 		SELECT OPERATION_TYPE_DATE
         BULK COLLECT INTO T_VARCHAR_DATA
         FROM 
         (
             SELECT 
                 OM.OPERATION_NAME ||' '||CFD.CONFIG_VALUE||' '|| TO_CHAR(TH.TRANS_DATE,'DD/MM/YYYY') AS OPERATION_TYPE_DATE
             FROM 
                 T_TRANS_HDR TH,
                 T_TRANS_ITEM_DTL TID,
                 T_OPERATION_MASTER OM,
                 T_CONFIG_FIXED_DATA CFD
             WHERE 
                 TH.TRANS_ID = TID.TRANS_ID
                 AND TH.OPERATION_ID = OM.OPERATION_ID (+)
                 AND TH.TRANS_CATEGORY_LINK_ID = CFD.CONFIG_ID (+)
                 AND TH.TRANS_SUBTYPE_ID = 533
                 AND TID.DEST_BATCH_ID = qryValues           
             ORDER BY 
                 TH.TRANS_ID DESC
         )
         WHERE ROWNUM = 1;
                    
     ELSIF qryType = 'QCC-PARTY-NAME' THEN
        
         SELECT PARTY_NAME
         BULK COLLECT INTO T_VARCHAR_DATA
         FROM 
         (
             SELECT 
                 PM.PARTY_NAME
             FROM 
                 V_TRANS_HDR TH,
                 T_PARTY_MASTER PM,
                 T_TRANS_ITEM_DTL TID
             WHERE 
                 TH.TRANS_ID = TID.TRANS_ID
                 AND TH.PARTY_ID = PM.PARTY_ID
                 AND TH.TRANS_SUBTYPE_ID = 533
                 AND TID.DEST_BATCH_ID = qryValues           
             ORDER BY 
                 TH.TRANS_ID DESC
         )
         WHERE ROWNUM = 1;     
    
     ELSIF qryType = 'QCC-DONE-BY' THEN
        
         SELECT EMPLOYEE_NAME
         BULK COLLECT INTO T_VARCHAR_DATA
         FROM 
         (
             SELECT 
                 AEM.EMPLOYEE_NAME
             FROM 
                 V_TRANS_HDR TH,
                 T_TRANS_ITEM_DTL TID,
                 T_AUTH_EMPLOYEE_MASTER AEM
             WHERE 
                 TH.TRANS_ID = TID.TRANS_ID
                 AND TH.CREATED_BY = AEM.EMPLOYEE_ID
                 AND TH.TRANS_SUBTYPE_ID = 533
                 AND TID.DEST_BATCH_ID = qryValues           
             ORDER BY 
                 TH.TRANS_ID DESC
         )
         WHERE ROWNUM = 1;
    
     ELSIF qryType = 'QCC-REMARK' THEN
        
         SELECT TRANS_REMARK
         BULK COLLECT INTO T_VARCHAR_DATA
         FROM 
         (
             SELECT 
                 TH.TRANS_REMARK
             FROM 
                 T_TRANS_HDR TH,
                 T_TRANS_ITEM_DTL TID
             WHERE 
                 TH.TRANS_ID = TID.TRANS_ID
                 AND TH.TRANS_SUBTYPE_ID = 533
                 AND TID.DEST_BATCH_ID = qryValues           
             ORDER BY 
                 TH.TRANS_ID DESC
         )
         WHERE ROWNUM = 1;
                   
     ELSIF qryType = 'GHAT-INWARD-DATE' THEN
        
         IF TO_NUMBER(arrData(1)) = 0 THEN
     		SELECT TRANS_DATE
             BULK COLLECT INTO T_VARCHAR_DATA
             FROM 
             (
                 SELECT TO_CHAR(TH.TRANS_DATE,'DD/MM/YYYY') AS TRANS_DATE
                 FROM T_TRANS_HDR TH,T_TRANS_ITEM_DTL TID 
                 WHERE TH.TRANS_ID = TID.TRANS_ID
                 AND TH.OPERATION_ID = (SELECT OPERATION_ID FROM T_OPERATION_MASTER WHERE OPERATION_CODE = 'GHAT')
                 AND TH.TRANS_TYPE = 'QCC'
                 AND TH.TRANS_CATEGORY_LINK_ID = 859
                 AND TID.SOR_TRANS_ITEM_ID = TO_NUMBER(arrData(2))            
                 ORDER BY TH.TRANS_ID DESC
             )
             WHERE ROWNUM = 1;
         ELSE
     		SELECT TRANS_DATE
             BULK COLLECT INTO T_VARCHAR_DATA
             FROM 
             (
                 SELECT TO_CHAR(TH.TRANS_DATE,'DD/MM/YYYY') AS TRANS_DATE
                 FROM T_TRANS_HDR TH,T_TRANS_ITEM_DTL TID 
                 WHERE TH.TRANS_ID = TID.TRANS_ID
                 AND TH.OPERATION_ID = (SELECT OPERATION_ID FROM T_OPERATION_MASTER WHERE OPERATION_CODE = 'GHAT')
                 AND TH.TRANS_TYPE = 'QCC'
                 AND TH.TRANS_CATEGORY_LINK_ID = 859
                 AND TID.DEST_BATCH_ID = TO_NUMBER(arrData(1))            
                 ORDER BY TH.TRANS_ID DESC
             )
             WHERE ROWNUM = 1;
         END IF;            

     ELSIF qryType = 'GHAT-OUTWARD-DATE' THEN
        
         IF TO_NUMBER(arrData(1)) = 0 THEN    
     		SELECT TRANS_DATE
             BULK COLLECT INTO T_VARCHAR_DATA
             FROM 
             (
                 SELECT TO_CHAR(TH.TRANS_DATE,'DD/MM/YYYY') AS TRANS_DATE
                 FROM T_TRANS_HDR TH,T_TRANS_ITEM_DTL TID 
                 WHERE TH.TRANS_ID = TID.TRANS_ID
                 AND TH.OPERATION_ID = (SELECT OPERATION_ID FROM T_OPERATION_MASTER WHERE OPERATION_CODE = 'GHAT')
                 AND TH.TRANS_TYPE = 'QCC'
                 AND TH.TRANS_CATEGORY_LINK_ID = 860
                 AND TID.SOR_TRANS_ITEM_ID = TO_NUMBER(arrData(2))            
                 ORDER BY TH.TRANS_ID DESC
             )
             WHERE ROWNUM = 1;
         ELSE
     		SELECT TRANS_DATE
             BULK COLLECT INTO T_VARCHAR_DATA
             FROM 
             (
                 SELECT TO_CHAR(TH.TRANS_DATE,'DD/MM/YYYY') AS TRANS_DATE
                 FROM T_TRANS_HDR TH,T_TRANS_ITEM_DTL TID 
                 WHERE TH.TRANS_ID = TID.TRANS_ID
                 AND TH.OPERATION_ID = (SELECT OPERATION_ID FROM T_OPERATION_MASTER WHERE OPERATION_CODE = 'GHAT')
                 AND TH.TRANS_TYPE = 'QCC'
                 AND TH.TRANS_CATEGORY_LINK_ID = 860
                 AND TID.DEST_BATCH_ID = TO_NUMBER(arrData(1))            
                 ORDER BY TH.TRANS_ID DESC
             )
             WHERE ROWNUM = 1;
         END IF;            

     ELSIF qryType = 'QC-INWARD-DATE' THEN
    
         IF TO_NUMBER(arrData(1)) = 0 THEN
             SELECT DISTINCT TO_CHAR(TH.TRANS_DATE,'DD/MM/YYYY') AS TRANS_DATE
             BULK COLLECT INTO T_VARCHAR_DATA
             FROM T_TRANS_HDR TH,T_TRANS_ITEM_DTL TID 
             WHERE TH.TRANS_ID = TID.TRANS_ID
             AND TH.OPERATION_ID = (SELECT OPERATION_ID FROM T_OPERATION_MASTER WHERE OPERATION_CODE = 'FINAL-QC')
             AND TH.TRANS_TYPE = 'QCC'
             AND TH.TRANS_CATEGORY_LINK_ID = 859
             AND TID.SOR_TRANS_ITEM_ID = TO_NUMBER(arrData(2));
         ELSE
             SELECT DISTINCT TO_CHAR(TH.TRANS_DATE,'DD/MM/YYYY') AS TRANS_DATE
             BULK COLLECT INTO T_VARCHAR_DATA
             FROM T_TRANS_HDR TH,T_TRANS_ITEM_DTL TID 
             WHERE TH.TRANS_ID = TID.TRANS_ID
             AND TH.OPERATION_ID = (SELECT OPERATION_ID FROM T_OPERATION_MASTER WHERE OPERATION_CODE = 'FINAL-QC')
             AND TH.TRANS_TYPE = 'QCC'
             AND TH.TRANS_CATEGORY_LINK_ID = 859
             AND TID.DEST_BATCH_ID = TO_NUMBER(arrData(1));
         END IF;
                                

     ELSIF qryType = 'QC-OUTWARD-DATE' THEN
    
         IF TO_NUMBER(arrData(1)) = 0 THEN
             SELECT DISTINCT TO_CHAR(TH.TRANS_DATE,'DD/MM/YYYY') AS TRANS_DATE
             BULK COLLECT INTO T_VARCHAR_DATA
             FROM T_TRANS_HDR TH,T_TRANS_ITEM_DTL TID 
             WHERE TH.TRANS_ID = TID.TRANS_ID
             AND TH.OPERATION_ID = (SELECT OPERATION_ID FROM T_OPERATION_MASTER WHERE OPERATION_CODE = 'FINAL-QC')
             AND TH.TRANS_TYPE = 'QCC'
             AND TH.TRANS_CATEGORY_LINK_ID = 860
             AND TID.SOR_TRANS_ITEM_ID = TO_NUMBER(arrData(2));
         ELSE
             SELECT DISTINCT TO_CHAR(TH.TRANS_DATE,'DD/MM/YYYY') AS TRANS_DATE
             BULK COLLECT INTO T_VARCHAR_DATA
             FROM T_TRANS_HDR TH,T_TRANS_ITEM_DTL TID 
             WHERE TH.TRANS_ID = TID.TRANS_ID
             AND TH.OPERATION_ID = (SELECT OPERATION_ID FROM T_OPERATION_MASTER WHERE OPERATION_CODE = 'FINAL-QC')
             AND TH.TRANS_TYPE = 'QCC'
             AND TH.TRANS_CATEGORY_LINK_ID = 860
             AND TID.DEST_BATCH_ID = TO_NUMBER(arrData(1));
         END IF;
                                

     ELSIF qryType = 'LAST-OUTWARD-DATE' THEN
    
         IF TO_NUMBER(arrData(1)) = 0 THEN
             SELECT DISTINCT TO_CHAR(MAX(TH.TRANS_DATE),'DD/MM/YYYY') AS TRANS_DATE
             BULK COLLECT INTO T_VARCHAR_DATA
             FROM T_TRANS_HDR TH,T_TRANS_ITEM_DTL TID 
             WHERE TH.TRANS_ID = TID.TRANS_ID
             AND TH.TRANS_TYPE = 'QCC'
             AND TH.TRANS_CATEGORY_LINK_ID = 860
             AND TID.SOR_TRANS_ITEM_ID = TO_NUMBER(arrData(2));
         ELSE
             SELECT DISTINCT TO_CHAR(MAX(TH.TRANS_DATE),'DD/MM/YYYY') AS TRANS_DATE
             BULK COLLECT INTO T_VARCHAR_DATA
             FROM T_TRANS_HDR TH,T_TRANS_ITEM_DTL TID 
             WHERE TH.TRANS_ID = TID.TRANS_ID
             AND TH.TRANS_TYPE = 'QCC'
             AND TH.TRANS_CATEGORY_LINK_ID = 860
             AND TID.DEST_BATCH_ID = TO_NUMBER(arrData(1));
         END IF;
                                

     ELSIF qryType = 'QC-DAYS' THEN
    
         IF TO_NUMBER(arrData(1)) = 0 THEN
             SELECT DISTINCT TH.TRANS_EXCH_RATE AS TRANS_DATE
             BULK COLLECT INTO T_VARCHAR_DATA
             FROM V_TRANS_HDR TH,T_TRANS_ITEM_DTL TID 
             WHERE TH.TRANS_ID = TID.TRANS_ID
             AND TH.TRANS_TYPE = 'QCC'
             AND TH.TRANS_EXCH_RATE >0
             AND TH.TRANS_CATEGORY_LINK_ID = 860
             AND TID.SOR_TRANS_ITEM_ID = TO_NUMBER(arrData(2));
         ELSE
             SELECT DISTINCT TH.TRANS_EXCH_RATE AS TRANS_DATE
             BULK COLLECT INTO T_VARCHAR_DATA
             FROM V_TRANS_HDR TH,T_TRANS_ITEM_DTL TID 
             WHERE TH.TRANS_ID = TID.TRANS_ID
             AND TH.TRANS_TYPE = 'QCC'
             AND TH.TRANS_EXCH_RATE >0
             AND TH.TRANS_CATEGORY_LINK_ID = 860
             AND TID.DEST_BATCH_ID = TO_NUMBER(arrData(1));
         END IF;                        

     ELSIF qryType = 'NO-OF-QC-DONE' THEN
    
         IF TO_NUMBER(arrData(1)) = 0 THEN
             SELECT COUNT(*) 
             BULK COLLECT INTO T_VARCHAR_DATA
             FROM V_TRANS_HDR TH,T_TRANS_ITEM_DTL TID 
             WHERE TH.TRANS_ID = TID.TRANS_ID
             AND TH.TRANS_TYPE = 'QCC'
             AND TH.TRANS_EXCH_RATE >0
             AND TH.TRANS_CATEGORY_LINK_ID = 860
             AND TID.SOR_TRANS_ITEM_ID = TO_NUMBER(arrData(2));
         ELSE
             SELECT COUNT(*) 
             BULK COLLECT INTO T_VARCHAR_DATA
             FROM V_TRANS_HDR TH,T_TRANS_ITEM_DTL TID 
             WHERE TH.TRANS_ID = TID.TRANS_ID
             AND TH.TRANS_TYPE = 'QCC'
             AND TH.TRANS_EXCH_RATE >0
             AND TH.TRANS_CATEGORY_LINK_ID = 860
             AND TID.DEST_BATCH_ID = TO_NUMBER(arrData(1));
         END IF;
        
     ELSIF qryType = 'LAST-INWARD-DATE(HO)' THEN
    
         IF TO_NUMBER(arrData(1)) = 0 THEN
             SELECT DISTINCT TO_CHAR(MAX(TH.TRANS_DATE),'DD/MM/YYYY') AS TRANS_DATE 
             BULK COLLECT INTO T_VARCHAR_DATA
             FROM V_TRANS_HDR TH,T_TRANS_ITEM_DTL TID,V_ITEM_VARIANT_RTN_DTL IVD 
             WHERE TID.VARIANT_ID = IVD.VARIANT_ID 
             AND TH.TRANS_ID = TID.TRANS_ID   
             AND IVD.ITEM_TYPE_ID = 1001         
             AND TH.TRANS_TYPE IN('PRI','ILI')
             AND TID.SRC_BATCH_ID <= (TID.SRC_BATCH_ID * 0) 
             AND TID.DEST_BATCH_ID <= (TID.DEST_BATCH_ID * 0)
             AND TH.LOCATION_ID = 1
             AND TID.SOR_TRANS_ITEM_ID = TO_NUMBER(arrData(2));
         ELSE
             SELECT DISTINCT TO_CHAR(MAX(TH.TRANS_DATE),'DD/MM/YYYY') AS TRANS_DATE 
             BULK COLLECT INTO T_VARCHAR_DATA
             FROM V_TRANS_HDR TH,T_TRANS_ITEM_DTL TID,V_ITEM_VARIANT_RTN_DTL IVD 
             WHERE TID.VARIANT_ID = IVD.VARIANT_ID 
             AND TH.TRANS_ID = TID.TRANS_ID   
             AND IVD.ITEM_TYPE_ID = 1001   
             AND TH.LOCATION_ID = 1      
             AND TH.TRANS_TYPE IN('PRI','ILI','RTN')
             AND TID.DEST_BATCH_ID = TO_NUMBER(arrData(1));
         END IF;         

     ELSIF qryType = 'LAST-INWARD-DATE(DEPT)' THEN
    
         IF TO_NUMBER(arrData(1)) = 0 THEN
             SELECT DISTINCT TO_CHAR(MAX(TH.TRANS_DATE),'DD/MM/YYYY') AS TRANS_DATE 
             BULK COLLECT INTO T_VARCHAR_DATA
             FROM V_TRANS_HDR TH,T_TRANS_ITEM_DTL TID,V_ITEM_VARIANT_RTN_DTL IVD,T_WORKCENTER_GROUP_MASTER WGM 
             WHERE TID.VARIANT_ID = IVD.VARIANT_ID 
             AND TH.TRANS_ID = TID.TRANS_ID   
             AND IVD.ITEM_TYPE_ID = 1001
             AND TID.DEST_WCGROUP_ID = WGM.WCGROUP_ID
             AND WGM.WCGROUP_CODE = arrData(3)          
             AND TH.TRANS_TYPE IN('ILI','TRO','TRN')
             AND TID.SRC_BATCH_ID <= (TID.SRC_BATCH_ID * 0) 
             AND TID.DEST_BATCH_ID <= (TID.DEST_BATCH_ID * 0)
             AND TID.SOR_TRANS_ITEM_ID = TO_NUMBER(arrData(2));
         ELSE
             SELECT DISTINCT TO_CHAR(MAX(TH.TRANS_DATE),'DD/MM/YYYY') AS TRANS_DATE 
             BULK COLLECT INTO T_VARCHAR_DATA
             FROM V_TRANS_HDR TH,T_TRANS_ITEM_DTL TID,V_ITEM_VARIANT_RTN_DTL IVD,T_WORKCENTER_GROUP_MASTER WGM 
             WHERE TID.VARIANT_ID = IVD.VARIANT_ID 
             AND TH.TRANS_ID = TID.TRANS_ID
             AND WGM.WCGROUP_CODE = arrData(3)   
             AND TID.DEST_WCGROUP_ID = WGM.WCGROUP_ID   
             AND IVD.ITEM_TYPE_ID = 1001
             AND TH.TRANS_TYPE IN('ILI','TRO','TRN')
             AND TID.DEST_BATCH_ID = TO_NUMBER(arrData(1));
         END IF;         

     ELSIF qryType = 'LAST-OUTWARD-DATE(DEPT)' THEN
    
         IF TO_NUMBER(arrData(1)) = 0 THEN
             SELECT DISTINCT TO_CHAR(MAX(TH.TRANS_DATE),'DD/MM/YYYY') AS TRANS_DATE 
             BULK COLLECT INTO T_VARCHAR_DATA
             FROM V_TRANS_HDR TH,T_TRANS_ITEM_DTL TID,V_ITEM_VARIANT_RTN_DTL IVD,T_WORKCENTER_GROUP_MASTER WGM 
             WHERE TID.VARIANT_ID = IVD.VARIANT_ID 
             AND TH.TRANS_ID = TID.TRANS_ID   
             AND IVD.ITEM_TYPE_ID = 1001
             AND TID.SRC_WCGROUP_ID = WGM.WCGROUP_ID
             AND WGM.WCGROUP_CODE = arrData(3)          
             AND TH.TRANS_TYPE  IN('ILO','TRO','TRN')
             AND TID.SRC_BATCH_ID <= (TID.SRC_BATCH_ID * 0) 
             AND TID.DEST_BATCH_ID <= (TID.DEST_BATCH_ID * 0)
             AND TH.LOCATION_ID = 1
             AND TID.SOR_TRANS_ITEM_ID = TO_NUMBER(arrData(2));
         ELSE
             SELECT DISTINCT TO_CHAR(MAX(TH.TRANS_DATE),'DD/MM/YYYY') AS TRANS_DATE 
             BULK COLLECT INTO T_VARCHAR_DATA
             FROM V_TRANS_HDR TH,T_TRANS_ITEM_DTL TID,V_ITEM_VARIANT_RTN_DTL IVD,T_WORKCENTER_GROUP_MASTER WGM 
             WHERE TID.VARIANT_ID = IVD.VARIANT_ID 
             AND TH.TRANS_ID = TID.TRANS_ID
             AND TID.SRC_WCGROUP_ID = WGM.WCGROUP_ID   
             AND WGM.WCGROUP_CODE = arrData(3)   
             AND IVD.ITEM_TYPE_ID = 1001
             AND TH.LOCATION_ID = 1      
             AND TH.TRANS_TYPE IN('ILO','TRO','TRN')
             AND TID.DEST_BATCH_ID = TO_NUMBER(arrData(1));
         END IF;         
        
     ELSIF qryType = 'TAGGING-DONE' THEN
    
         IF TO_NUMBER(arrData(1)) = 0 THEN
             SELECT TID.STOCK_CODE 
             BULK COLLECT INTO T_VARCHAR_DATA
             FROM V_TRANS_HDR TH,T_TRANS_ITEM_DTL TID 
             WHERE TH.TRANS_ID = TID.TRANS_ID   
             AND TH.TRANS_TYPE = 'SLG'
             AND TID.SOR_TRANS_ITEM_ID = TO_NUMBER(arrData(2));
         ELSE
             SELECT TID.STOCK_CODE 
             BULK COLLECT INTO T_VARCHAR_DATA
             FROM V_TRANS_HDR TH,T_TRANS_ITEM_DTL TID 
             WHERE TH.TRANS_ID = TID.TRANS_ID   
             AND TH.TRANS_TYPE = 'SLG'
             AND TID.SRC_BATCH_ID = TO_NUMBER(arrData(1));
         END IF;         

     ELSIF qryType = 'TAGGING-(GW)' THEN
    
         IF TO_NUMBER(arrData(1)) = 0 THEN
             SELECT ROUND(TID.QUANTITY * TID.CONVERSION_FACTOR,3) 
             BULK COLLECT INTO T_VARCHAR_DATA
             FROM V_TRANS_HDR TH,T_TRANS_ITEM_DTL TID 
             WHERE TH.TRANS_ID = TID.TRANS_ID   
             AND TH.TRANS_TYPE = 'SLG'
             AND TID.SOR_TRANS_ITEM_ID = TO_NUMBER(arrData(2));
         ELSE
             SELECT ROUND(TID.QUANTITY * TID.CONVERSION_FACTOR,3) 
             BULK COLLECT INTO T_VARCHAR_DATA
             FROM V_TRANS_HDR TH,T_TRANS_ITEM_DTL TID 
             WHERE TH.TRANS_ID = TID.TRANS_ID   
             AND TH.TRANS_TYPE = 'SLG'
             AND TID.SRC_BATCH_ID = TO_NUMBER(arrData(1));
         END IF;
        
     ELSIF qryType = 'TAGGING-(DIAWT)' THEN
    
         IF TO_NUMBER(arrData(1)) = 0 THEN
             SELECT ROUND(BOM.WEIGHT_1504,3) 
             BULK COLLECT INTO T_VARCHAR_DATA
             FROM V_TRANS_HDR TH,T_TRANS_ITEM_DTL TID,T_SMRY_TRANS_ITEM_BOM BOM 
             WHERE TH.TRANS_ID = TID.TRANS_ID   
             AND TID.TRANS_ITEM_ID = BOM.TRANS_ITEM_ID
             AND TH.TRANS_TYPE = 'SLG'
             AND TID.SOR_TRANS_ITEM_ID = TO_NUMBER(arrData(2));
         ELSE
             SELECT ROUND(BOM.WEIGHT_1504,3) 
             BULK COLLECT INTO T_VARCHAR_DATA
             FROM V_TRANS_HDR TH,T_TRANS_ITEM_DTL TID,T_SMRY_TRANS_ITEM_BOM BOM 
             WHERE TH.TRANS_ID = TID.TRANS_ID   
             AND TID.TRANS_ITEM_ID = BOM.TRANS_ITEM_ID
             AND TH.TRANS_TYPE = 'SLG'
             AND TID.SRC_BATCH_ID = TO_NUMBER(arrData(1));
         END IF;
                 
     ELSIF qryType = 'TAGGING-(CLSWT)' THEN
    
         IF TO_NUMBER(arrData(1)) = 0 THEN
             SELECT ROUND(BOM.WEIGHT_1005,3) 
             BULK COLLECT INTO T_VARCHAR_DATA
             FROM V_TRANS_HDR TH,T_TRANS_ITEM_DTL TID,T_SMRY_TRANS_ITEM_BOM BOM 
             WHERE TH.TRANS_ID = TID.TRANS_ID   
             AND TID.TRANS_ITEM_ID = BOM.TRANS_ITEM_ID
             AND TH.TRANS_TYPE = 'SLG'
             AND TID.SOR_TRANS_ITEM_ID = TO_NUMBER(arrData(2));
         ELSE
             SELECT ROUND(BOM.WEIGHT_1005,3) 
             BULK COLLECT INTO T_VARCHAR_DATA
             FROM V_TRANS_HDR TH,T_TRANS_ITEM_DTL TID,T_SMRY_TRANS_ITEM_BOM BOM 
             WHERE TH.TRANS_ID = TID.TRANS_ID   
             AND TID.TRANS_ITEM_ID = BOM.TRANS_ITEM_ID
             AND TH.TRANS_TYPE = 'SLG'
             AND TID.SRC_BATCH_ID = TO_NUMBER(arrData(2));
         END IF;
                 
     ELSIF qryType = 'GET-TRANS-PRICE(TRANS_ITEM_ID)' THEN
    
         WITH TID
         AS
         (
             SELECT 
                 TID.TRANS_ITEM_ID,TID.QUANTITY,
                 CASE WHEN TID.SRC_STOCK_ID >0 THEN STLSRC.SOR_TRANS_ITEM_BOM_ID WHEN TID.DEST_STOCK_ID >0 THEN STLDEST.SOR_TRANS_ITEM_BOM_ID END AS SOR_TRANS_ITEM_BOM_ID,
                 TID.STOCK_VALUE,STN.ITEM_TYPE_ID,STN.ITEM_GROUP_ID,TID.SOR_TRANS_ID                          
             FROM 
                 T_TRANS_ITEM_DTL TID,T_STOCK_TRANS_LINK STLSRC,T_STOCK_TRANS_LINK STLDEST,T_SMRY_ITEM_VARIANT_STONE STN 
             WHERE 
                 TID.SRC_STOCK_ID = STLSRC.STOCK_ID
                 AND TID.DEST_STOCK_ID = STLDEST.STOCK_ID
                 AND TID.VARIANT_ID = STN.VARIANT_ID
                 AND TID.TRANS_ITEM_ID = qryValues
             UNION ALL
             SELECT 
                 TID.TRANS_ITEM_ID,TIBD.QUANTITY,TIBD.SOR_TRANS_ITEM_BOM_ID,TIBD.STOCK_VALUE,IVD.ITEM_TYPE_ID,IVD.ITEM_GROUP_ID,TID.SOR_TRANS_ID                          
             FROM 
                 T_TRANS_ITEM_BOM_DTL TIBD,T_TRANS_ITEM_DTL TID,V_ITEM_VARIANT_RTN_DTL IVD 
             WHERE 
                 TIBD.BOM_VARIANT_ID = IVD.VARIANT_ID
                 AND TID.TRANS_ITEM_ID = TIBD.TRANS_ITEM_ID
                 AND TID.TRANS_ITEM_ID = qryValues
         ) 
         SELECT
             NVL(SUM(DECODE(TID.ITEM_TYPE_ID,1005,DECODE(TID.SOR_TRANS_ITEM_BOM_ID,0,TID.STOCK_VALUE,DECODE(TID.ITEM_GROUP_ID,1504,((EXTD.TRANS_BOM_RATE * TH.TRANS_EXCH_RATE) - 500),((EXTD.TRANS_BOM_RATE * TH.TRANS_EXCH_RATE) - ((EXTD.TRANS_BOM_RATE * TH.TRANS_EXCH_RATE) * 0.05))) * TID.QUANTITY),TID.STOCK_VALUE)),0) AS TRANSFER_VALUE
             INTO strReturn 
         FROM 
             TID,T_TRANS_ITEM_BOM_DTL_EXTD EXTD,T_TRANS_HDR_EXTD TH
         WHERE
             TID.SOR_TRANS_ID = TH.TRANS_ID  
             AND TID.SOR_TRANS_ITEM_BOM_ID = EXTD.TRANS_ITEM_BOM_ID;
            
         RETURN strReturn;            


     ELSIF qryType = 'GET-TRANS-PRICE(TRANS_ITEM_BOM_ID)' THEN
    
         WITH TID
         AS
         (
             SELECT 
                 TID.TRANS_ITEM_ID,TIBD.QUANTITY,TIBD.SOR_TRANS_ITEM_BOM_ID,TIBD.STOCK_VALUE,IVD.ITEM_TYPE_ID,IVD.ITEM_GROUP_ID,TID.SOR_TRANS_ID                          
             FROM 
                 T_TRANS_ITEM_BOM_DTL TIBD,T_TRANS_ITEM_DTL TID,V_ITEM_VARIANT_RTN_DTL IVD 
             WHERE 
                 TIBD.BOM_VARIANT_ID = IVD.VARIANT_ID
                 AND TID.TRANS_ITEM_ID = TIBD.TRANS_ITEM_ID
                 AND TIBD.TRANS_ITEM_BOM_ID = qryValues
         ) 
         SELECT
             NVL(SUM(DECODE(TID.ITEM_TYPE_ID,1005,DECODE(TID.SOR_TRANS_ITEM_BOM_ID,0,TID.STOCK_VALUE,DECODE(TID.ITEM_GROUP_ID,1504,((EXTD.TRANS_BOM_RATE * TH.TRANS_EXCH_RATE) - 500),((EXTD.TRANS_BOM_RATE * TH.TRANS_EXCH_RATE) - ((EXTD.TRANS_BOM_RATE * TH.TRANS_EXCH_RATE) * 0.05))) * TID.QUANTITY),TID.STOCK_VALUE)),0) AS TRANSFER_VALUE
             INTO strReturn 
         FROM 
             TID,T_TRANS_ITEM_BOM_DTL_EXTD EXTD,T_TRANS_HDR_EXTD TH
         WHERE
             TID.SOR_TRANS_ID = TH.TRANS_ID  
             AND TID.SOR_TRANS_ITEM_BOM_ID = EXTD.TRANS_ITEM_BOM_ID;
            
         RETURN strReturn;            

     ELSIF qryType = 'GET-D1-D2-ST-STONE' THEN
    
         BEGIN
             SELECT MIN(SB.STOCK_BOM_ID) INTO iVariantId 
             FROM T_STOCK_BOM_DTL SB 
             WHERE SB.SPECIAL_CHARACTER = 'C' AND SB.STOCK_ID  = TO_NUMBER(arrData(1));
            
             SELECT 
                 CASE WHEN SUBSTR(TRIM(TO_CHAR(ROUND(SB.QUANTITY,2),'999999999999999.99')),1,1) ='.' THEN '0'||TRIM(TO_CHAR(ROUND(SB.QUANTITY,2),'999999999999999.99')) ELSE TRIM(TO_CHAR(ROUND(SB.QUANTITY,2),'999999999999999.99')) END||' '||STN.COLOR_CODE||' '||STN.QUALITY_CODE
                 INTO strTemp  
             FROM T_STOCK_BOM_DTL SB,T_SMRY_ITEM_VARIANT_STONE STN
             WHERE SB.BOM_VARIANT_ID = STN.VARIANT_ID AND SB.STOCK_BOM_ID = iVariantId;
                
             strReturn := strTemp;
            
             SELECT 
                 MAX(SB.STOCK_BOM_ID) INTO iVariantId1 
             FROM  T_STOCK_BOM_DTL SB
             WHERE SB.SPECIAL_CHARACTER = 'C' AND SB.STOCK_ID  = TO_NUMBER(arrData(1));
                
             IF iVariantId1 <> iVariantId THEN            
                 SELECT
                     CASE WHEN SUBSTR(TRIM(TO_CHAR(ROUND(SB.QUANTITY,2),'999999999999999.99')),1,1) ='.' THEN '0'||TRIM(TO_CHAR(ROUND(SB.QUANTITY,2),'999999999999999.99')) ELSE TRIM(TO_CHAR(ROUND(SB.QUANTITY,2),'999999999999999.99')) END||' '||STN.COLOR_CODE||' '||STN.QUALITY_CODE
                     INTO strTemp  
                 FROM T_STOCK_BOM_DTL SB,T_SMRY_ITEM_VARIANT_STONE STN 
                 WHERE SB.BOM_VARIANT_ID = STN.VARIANT_ID AND SB.STOCK_BOM_ID = iVariantId1;
                
                 strReturn := strReturn||'|'||strTemp;
             ELSE
                 strReturn := strReturn||'|0';                
             END IF;           
            
         EXCEPTION
             WHEN NO_DATA_FOUND THEN
                 strReturn := '0|0';                    
         END;            
        
         BEGIN
             SELECT
                 CASE WHEN SUBSTR(TRIM(TO_CHAR(ROUND(SB.QUANTITY,2),'999999999999999.99')),1,1) ='.' THEN '0'||TRIM(TO_CHAR(ROUND(SB.QUANTITY,2),'999999999999999.99')) ELSE TRIM(TO_CHAR(ROUND(SB.QUANTITY,2),'999999999999999.99')) END||' '||CLR_QLTY
                 INTO strTemp
             FROM
             (                                
                 SELECT STN.COLOR_CODE||' '||STN.QUALITY_CODE AS CLR_QLTY, SUM(SB.QUANTITY) AS QUANTITY                  
                 FROM T_STOCK_BOM_DTL SB, T_SMRY_ITEM_VARIANT_STONE STN 
                 WHERE SB.BOM_VARIANT_ID = STN.VARIANT_ID AND SB.SPECIAL_CHARACTER IN('P','O') AND SB.STOCK_ID  = TO_NUMBER(arrData(1))
                 GROUP BY STN.COLOR_CODE||' '||STN.QUALITY_CODE
                 ORDER BY QUANTITY DESC
             ) SB WHERE ROWNUM = 1;
            
             strReturn := strReturn||'|'||strTemp;                 
         EXCEPTION
             WHEN NO_DATA_FOUND THEN
                 strReturn := strReturn||'|0';                    
         END;            
        
         RETURN strReturn;            

     ELSIF qryType = 'GET-METAL-PURITY' THEN
     	SELECT MAX(SIVM.FINENESS)
         INTO strReturn
         FROM T_SMRY_ITEM_VARIANT_METAL SIVM,T_TRANS_ITEM_BOM_DTL TIBD
         WHERE TIBD.BOM_VARIANT_ID = SIVM.VARIANT_ID
         AND SIVM.BASE_ITEM_TYPE_ID = 1004
         AND TIBD.TRANS_ITEM_ID = TO_NUMBER(arrData(1));

         RETURN strReturn;            

     ELSIF qryType = 'GET-GURANTEE-CARD-FOR-STOCK-CODE' THEN
     	BEGIN
         	SELECT PRICING_REMARK
             INTO strReturn
             FROM (
             	SELECT TIDE.PRICING_REMARK
                 FROM T_TRANS_ITEM_DTL_EXTD TIDE,T_TRANS_ITEM_DTL TID,T_TRANS_HDR TH
                 WHERE TH.TRANS_ID = TID.TRANS_ID
                 AND TID.TRANS_ITEM_ID = TIDE.TRANS_ITEM_ID
                 AND TID.STOCK_CODE = arrData(1)
                 AND TID.ROW_STATUS = 1
                 AND TH.ROW_STATUS = 1
                 AND TH.TRANS_TYPE = 'GUC'
                 ORDER BY TID.TRANS_ITEM_ID DESC
             )
             WHERE ROWNUM = 1;
         EXCEPTION
         	WHEN NO_DATA_FOUND THEN
             	strReturn := NULL;
         END;

         RETURN strReturn;            

     ELSIF qryType = 'GET-MAIN-VARIANT-STOCK-CODE' THEN
     	BEGIN
             SELECT S.STOCK_CODE
             INTO strReturn
             FROM T_STOCK S, V_STOCK_DTL SD, T_STOCK_GROUP SG, T_ITEM_VARIANT_LINK IVL
             WHERE S.STOCK_ID = SD.STOCK_ID AND S.STOCK_CODE = SG.STOCK_CODE AND
             S.VARIANT_ID = IVL.VARIANT_ID2 AND IVL.LINK_TYPE = 'S' AND S.QUANTITY > 0 AND IVL.SEQ_NO = 1 AND
             SG.GROUP_CODE IN (SELECT GROUP_CODE FROM T_STOCK_GROUP WHERE STOCK_CODE = arrData(1));
         EXCEPTION
         	WHEN NO_DATA_FOUND THEN
             	strReturn := NULL;
         END;

     ELSIF qryType = 'GET-STOCK-ATTRIBUTE' THEN
     	BEGIN
             SELECT IAM.ATTRIB_DESC
             INTO strReturn
             FROM T_STOCK_ATTRIB_DTL SAD,T_ITEM_ATTRIB_MASTER IAM
             WHERE SAD.ATTRIB_ID = IAM.ATTRIB_ID
             AND SAD.ATTRIB_TYPE_ID = TO_NUMBER(arrData(1))
             AND SAD.STOCK_ID = TO_NUMBER(arrData(2));
         EXCEPTION
         	WHEN NO_DATA_FOUND THEN
             	strReturn := NULL;
         END;
        
     ELSIF qryType = 'ORDER_DIA_QUALITY_COLOR' THEN
    
         SELECT DISTINCT IVD.QUALITY_CODE||'/'||IVD.COLOR_CODE  
         BULK COLLECT INTO T_VARCHAR_DATA
         FROM T_TRANS_ITEM_BOM_DTL STB,T_SMRY_ITEM_VARIANT_STONE IVD 
         WHERE STB.BOM_VARIANT_ID  = IVD.VARIANT_ID
         AND ITEM_GROUP_ID = 1504  
         AND STB.TRANS_ITEM_ID = qryValues;

     ELSIF qryType = 'STOCK_DIA_QUALITY_COLOR' THEN

         SELECT DISTINCT IVD.QUALITY_CODE||'/'||IVD.COLOR_CODE
         BULK COLLECT INTO T_VARCHAR_DATA
         FROM T_STOCK_BOM_DTL SBD,T_SMRY_ITEM_VARIANT_STONE IVD 
         WHERE SBD.BOM_VARIANT_ID = IVD.VARIANT_ID
         AND SBD.QUANTITY > 0 AND IVD.ITEM_GROUP_ID = 1504
         AND SBD.STOCK_ID = qryValues;     
        
     ELSIF qryType = 'DIA_CZ_QUALITY_COLOR(TRANS)' THEN
    
         SELECT DISTINCT IVD.QUALITY_CODE||'-'||IVD.COLOR_CODE  
         BULK COLLECT INTO T_VARCHAR_DATA
         FROM T_TRANS_ITEM_BOM_DTL STB,T_SMRY_ITEM_VARIANT_STONE IVD 
         WHERE STB.BOM_VARIANT_ID  = IVD.VARIANT_ID
         AND ITEM_GROUP_ID IN (1504,1539)  
         AND STB.TRANS_ITEM_ID = qryValues;

     ELSIF qryType = 'DIA_CZ_QUALITY_COLOR(STOCK)' THEN

         SELECT DISTINCT IVD.QUALITY_CODE||'-'||IVD.COLOR_CODE
         BULK COLLECT INTO T_VARCHAR_DATA
         FROM T_STOCK_BOM_DTL SBD,T_SMRY_ITEM_VARIANT_STONE IVD 
         WHERE SBD.BOM_VARIANT_ID = IVD.VARIANT_ID
         AND SBD.QUANTITY > 0 AND IVD.ITEM_GROUP_ID IN (1504,1539)
         AND SBD.STOCK_ID = qryValues;          

     ELSIF qryType = 'POINTERWISE-SHAPE-RANGE' THEN
 --DISTINCT F_GET_ATTRIBUTE_VALUE(IVD.ATTRIB_TYPE_AND_CODE,'STNSHP')||': '||F_GET_ATTRIBUTE_VALUE(IVD.ATTRIB_TYPE_AND_VALUE,'STNRNG')

         SELECT
             SHP_RNG
             BULK COLLECT INTO T_VARCHAR_DATA
         FROM
         (
             SELECT
                 ROUND(TIB.QUANTITY*TIB.CONVERSION_FACTOR) AS PCS, TIB.QUANTITY AS WT,
                 F_GET_ATTRIBUTE_VALUE(IVD.ATTRIB_TYPE_AND_CODE,'STNSHP')||': '||FNGETGROUPATTRIBUTEVALUE(F_GET_ATTRIBUTE_VALUE(IVD.ATTRIB_TYPE_AND_CODE,'STNRNG'),11008) AS SHP_RNG
             FROM
                 T_TRANS_ITEM_BOM_DTL TIB, V_ITEM_VARIANT_DTL IVD
             WHERE 
                 TIB.BOM_VARIANT_ID = IVD.VARIANT_ID AND
                 IVD.ITEM_TYPE_ID = 1005 AND
                 TIB.TRANS_ITEM_ID = TO_NUMBER(arrData(1))       
         )
         WHERE DECODE(PCS,0,0,WT,0,0,WT/PCS) > TO_NUMBER(arrData(2));
 /*        
         SELECT
         DISTINCT F_GET_ATTRIBUTE_VALUE(IVD.ATTRIB_TYPE_AND_CODE,'STNSHP')||': '||FNGETGROUPATTRIBUTEVALUE(F_GET_ATTRIBUTE_VALUE(IVD.ATTRIB_TYPE_AND_CODE,'STNRNG'),11008)
         BULK COLLECT INTO T_VARCHAR_DATA
         FROM
         T_TRANS_ITEM_BOM_DTL TIB,
         V_ITEM_VARIANT_DTL IVD
         WHERE 
         DECODE(TIB.QUANTITY,0,0,((TIB.QUANTITY*TIB.CONVERSION_FACTOR)/TIB.QUANTITY)) > TO_NUMBER(arrData(2)) AND
         TIB.BOM_VARIANT_ID = IVD.VARIANT_ID AND
         IVD.ITEM_TYPE_ID = 1005 AND
         TIB.TRANS_ITEM_ID = TO_NUMBER(arrData(1));
 */
     ELSIF qryType = 'GET-ATTRIB-TYPE' THEN
         P_SEANET_CONTEXT(strAttribType => 'MISC1', strAttribValue => qryValues);
 /*
         SELECT DISTINCT FD.CONFIG_VALUE
         BULK COLLECT INTO T_VARCHAR_DATA
         FROM T_ITEM_ATTRIB_MASTER AM, T_CONFIG_FIXED_DATA FD
         WHERE AM.ATTRIB_TYPE_ID = FD.CONFIG_ID AND AM.ATTRIB_ID IN (SELECT RET_VAL FROM DATAARRAYLIST WHERE RET_TYPE = 'MISC1');
 */
         SELECT CONFIG_VALUE
         BULK COLLECT INTO T_VARCHAR_DATA
         FROM
         (
         SELECT DISTINCT FD.CONFIG_VALUE, ATTRIB_ID
         FROM T_ITEM_ATTRIB_MASTER AM, T_CONFIG_FIXED_DATA FD
         WHERE AM.ATTRIB_TYPE_ID = FD.CONFIG_ID AND AM.ATTRIB_ID IN (SELECT RET_VAL FROM DATAARRAYLIST WHERE RET_TYPE = 'MISC1')
         )
         ORDER BY ATTRIB_ID; 

     ELSIF qryType = 'GET-ATTRIBUTE-DESC' THEN
         P_SEANET_CONTEXT(strAttribType => 'MISC1', strAttribValue => qryValues);

         SELECT ATTRIB_DESC 
         BULK COLLECT INTO T_VARCHAR_DATA    
         FROM
         (
         SELECT DISTINCT ATTRIB_DESC, ATTRIB_ID
         FROM T_ITEM_ATTRIB_MASTER 
         WHERE ATTRIB_ID IN (SELECT RET_VAL FROM DATAARRAYLIST WHERE RET_TYPE = 'MISC1')
         )
         ORDER BY ATTRIB_ID;
        
     ELSIF qryType = 'GET-QUALIFY-ATTRIB(STOCK_ID)' THEN
        
         SELECT IAM.ATTRIB_CODE 
         BULK COLLECT INTO T_VARCHAR_DATA
         FROM T_STOCK_ATTRIB_DTL SAD ,T_ITEM_ATTRIB_MASTER IAM
         WHERE  SAD.ATTRIB_ID = IAM.ATTRIB_ID 
                AND IAM.ATTRIB_TYPE_ID  = 11339
                AND SAD.STOCK_ID = TO_NUMBER(arrData(1));

     ELSIF qryType = 'GET-PARTY-VARIANT-ALIAS' THEN

         SELECT VARIANT_NAME 
         BULK COLLECT INTO T_VARCHAR_DATA
         FROM T_PARTY_MISC_LINK
         WHERE LINK_TYPE = 'P'
               AND PARTY_ID = arrData(1) 
               AND VARIANT_ID = arrData(2);

     ELSIF qryType = 'GET-ATTRIB-CODE-FOR-MIGR' THEN

         SELECT IAM.ATTRIB_CODE
         BULK COLLECT INTO T_VARCHAR_DATA
         FROM 
         T_ITEM_VARIANT_ATTRIB_DTL IVAD, T_ITEM_ATTRIB_MASTER IAM
         WHERE
         IVAD.ATTRIB_ID = IAM.ATTRIB_ID AND
         IVAD.VARIANT_ID = arrData(1) AND 
         IVAD.ITEM_ATTRIB_CONFIG_ID = arrData(2);
        
     ELSIF qryType = 'GET-MODEL-PCS(BATCH_ID)' THEN
    
         SELECT SUM(T.QUANTITY)  
         BULK COLLECT INTO T_VARCHAR_DATA
         FROM T_STOCK_BATCH_DTL SBD , T_STOCK T,V_STOCK_DTL SD , V_ITEM_VARIANT_RTN_DTL IV 
         WHERE SBD.BATCH_ID = SD.BATCH_ID
               AND T.STOCK_ID = SD.STOCK_ID 
               AND T.VARIANT_ID = IV.VARIANT_ID 
               AND IV.ITEM_TYPE_ID = 1002  
               AND SBD.BATCH_ID = arrData(1)  
         GROUP BY SBD.BATCH_ID ;
        
     ELSIF qryType = 'GET-CERTIFICATE-DTL(STOCKID)' THEN 
         SELECT DISTINCT IM.VARIANT_NAME 
         BULK COLLECT INTO T_VARCHAR_DATA
         FROM T_STOCK_BOM_CERTIFICATE_DTL SBCD,T_STOCK_BOM_DTL SBD ,T_ITEM_VARIANT_MASTER IM  , T_SMRY_ITEM_VARIANT_STONE SIVS 
         WHERE  SBD.BOM_VARIANT_ID = SIVS.VARIANT_ID
                AND SBD.STOCK_BOM_ID = SBCD.STOCK_BOM_ID 
                AND SIVS.ITEM_TYPE_ID = 1005 
                AND SBCD.CERTIFICATE_ID = IM.VARIANT_ID
                AND SBD.STOCK_ID > 0 
                AND SBD.STOCK_ID =  arrData(1);  
               
     ELSIF qryType = 'GET-CERTIFICATE-DTL(STOCKID-LOSE)' THEN 
         SELECT DISTINCT IM.VARIANT_NAME 
         BULK COLLECT INTO T_VARCHAR_DATA
         FROM T_STOCK_CERTIFICATE_DTL SBCD,T_STOCK S ,T_ITEM_VARIANT_MASTER IM  , T_SMRY_ITEM_VARIANT_STONE SIVS 
         WHERE  S.VARIANT_ID = SIVS.VARIANT_ID
                AND S.STOCK_ID = SBCD.STOCK_ID
                AND SIVS.ITEM_TYPE_ID = 1005 
                AND SBCD.CERTIFICATE_ID = IM.VARIANT_ID 
                AND S.STOCK_ID > 0 
                AND S.STOCK_ID =  arrData(1);   
               
     ELSIF qryType = 'GET-CERTIFICATE-LAB(STOCKID)' THEN 
         SELECT DISTINCT VARIANT_REMARK1 
         BULK COLLECT INTO T_VARCHAR_DATA
         FROM T_STOCK_BOM_CERTIFICATE_DTL SBCD,T_STOCK_BOM_DTL SBD ,T_ITEM_VARIANT_MASTER_EXTD IVME , T_SMRY_ITEM_VARIANT_STONE SIVS 
         WHERE  SBD.BOM_VARIANT_ID = SIVS.VARIANT_ID
                AND SBD.STOCK_BOM_ID = SBCD.STOCK_BOM_ID 
                AND SIVS.ITEM_TYPE_ID = 1005 
                AND SBCD.CERTIFICATE_ID = IVME.VARIANT_ID 
                AND SBD.STOCK_ID =  arrData(1);

     ELSIF qryType = 'GET-CERTIFICATE-LAB(STOCKID-LOSE)' THEN 
         SELECT DISTINCT VARIANT_REMARK1 
         BULK COLLECT INTO T_VARCHAR_DATA
         FROM T_STOCK_CERTIFICATE_DTL SBCD,T_STOCK S,T_ITEM_VARIANT_MASTER_EXTD IVME , T_SMRY_ITEM_VARIANT_STONE SIVS 
         WHERE  S.VARIANT_ID = SIVS.VARIANT_ID 
                AND SIVS.ITEM_TYPE_ID = 1005 
                AND SBCD.CERTIFICATE_ID = IVME.VARIANT_ID 
                AND S.STOCK_ID =  arrData(1);
     
     ELSIF qryType = 'GET-LOTNO-(STOCKID)' THEN 
         SELECT DISTINCT SBD.STOCK_CODE 
         BULK COLLECT INTO T_VARCHAR_DATA
         FROM T_STOCK_BOM_CERTIFICATE_DTL SBCD,T_STOCK_BOM_DTL SBD ,T_ITEM_VARIANT_MASTER  IVME , T_SMRY_ITEM_VARIANT_STONE SIVS 
         WHERE  SBD.BOM_VARIANT_ID = SIVS.VARIANT_ID
                AND SBD.STOCK_BOM_ID = SBCD.STOCK_BOM_ID 
                AND SIVS.ITEM_TYPE_ID = 1005 
                AND SBCD.CERTIFICATE_ID = IVME.VARIANT_ID 
                AND SBD.STOCK_ID =  arrData(1);
    
     ELSIF qryType = 'GET-LAST-ILI-DATE' THEN
         SELECT DISTINCT TO_CHAR(MAX(TH.TRANS_DATE),'DD/MM/YYYY') AS TRANS_DATE 
         BULK COLLECT INTO T_VARCHAR_DATA
         FROM V_TRANS_HDR TH, T_TRANS_ITEM_DTL TID 
         WHERE TH.TRANS_ID = TID.TRANS_ID AND TH.TRANS_TYPE = 'ILI' AND TID.STOCK_CODE = arrData(1) AND TH.LOCATION_ID = arrData(2);
        
        
     ELSIF qryType = 'GET-BUNCH-STNDTL(TRANS_ID)' THEN
         WITH BD AS 
         (SELECT TID.VARIANT_ID   
         FROM  T_TRANS_HDR TH,T_TRANS_ITEM_DTL TID   
         WHERE TID.TRANS_ID = TH.TRANS_ID
               AND TH.TRANS_TYPE = 'BUN'  
               AND TID.SOR_TRANS_ITEM_ID =  arrData(1)  
         GROUP BY TID.VARIANT_ID 
         UNION ALL
         SELECT TID.VARIANT_ID  
         FROM 
             T_TRANS_ITEM_DTL TID,T_TRANS_HDR TH 
         WHERE TID.TRANS_ID = TH.TRANS_ID
             AND TH.TRANS_TYPE = 'BUD' 
             AND TID.SOR_TRANS_ITEM_ID =  arrData(1)  
         GROUP BY TID.VARIANT_ID 
         ) 
         SELECT DISTINCT F_GET_ATTRIBUTE_VALUE(IV.ATTRIB_TYPE_AND_CODE,'STNTYPE')||'-'||F_GET_ATTRIBUTE_VALUE(IV.ATTRIB_TYPE_AND_CODE,'STNSHP')
         BULK COLLECT INTO T_VARCHAR_DATA 
         FROM BD,V_ITEM_VARIANT_RTN_DTL IV  
         WHERE BD.VARIANT_ID = IV.VARIANT_ID 
               AND IV.ITEM_TYPE_ID = 1005   ;
    
    
     ELSIF qryType = 'GET-ITEMNAME-WT(TRANS_ITEM_ID)' THEN           
         SELECT '  '||ITEM_NAME||'-'||TRIM(TO_CHAR(ROUND(WEIGHT,2),'999999999999999.99'))|| ' '||ITEM_STOCK_UOM_desc  
         BULK COLLECT INTO T_VARCHAR_DATA 
         FROM 
             (SELECT TIBD.TRANS_ITEM_ID,IV.ITEM_NAME , ITEM_STOCK_UOM_desc,
                    SUM(DECODE(IV.ITEM_STOCK_UOM_CODE,'WT',TIBD.QUANTITY,TIBD.QUANTITY * TIBD.CONVERSION_FACTOR)) AS WEIGHT
             FROM T_TRANS_ITEM_BOM_DTL TIBD , V_ITEM_VARIANT_RTN_DTL IV
             WHERE TIBD.BOM_VARIANT_ID = IV.VARIANT_ID
                   AND IV.ITEM_TYPE_ID = 1005 
                   AND DECODE(IV.ITEM_STOCK_UOM_CODE,'WT',TIBD.QUANTITY,TIBD.QUANTITY * TIBD.CONVERSION_FACTOR) > 0 
                   AND TIBD.TRANS_ITEM_ID =  arrData(1)
             GROUP BY TIBD.TRANS_ITEM_ID,IV.ITEM_NAME,ITEM_STOCK_UOM_desc  ) ;
    
     ELSIF qryType = 'GET-TRANS-ITEM-ATTRIB-TYPE-AND-ID' THEN           
         SELECT ATTRIB_TYPE_ID||'|'||ATTRIB_ID 
         BULK COLLECT INTO T_VARCHAR_DATA 
         FROM T_TRANS_ITEM_ATTRIB_DTL
         WHERE TRANS_ITEM_ID = arrData(1);
        
     ELSIF qryType = 'GET-TRANS-ITEM-MODEL-NO' THEN 
         SELECT IV.ITEM_NAME 
         BULK COLLECT INTO T_VARCHAR_DATA
         FROM T_TRANS_ITEM_BOM_DTL TSB , V_ITEM_VARIANT_RTN_DTL IV
         WHERE TSB.BOM_VARIANT_ID = IV.VARIANT_ID
               AND IV.ITEM_TYPE_ID = 1002  
               AND TRANS_ITEM_ID = arrData(1); 
    
     ELSIF qryType = 'GET-PARTY-ALIAS-NAME' THEN 
         SELECT VARIANT_NAME 
         BULK COLLECT INTO T_VARCHAR_DATA
         FROM T_PARTY_MISC_LINK
         WHERE PARTY_ID > 0
               AND PARTY_ID = arrData(1) 
               AND VARIANT_ID = arrData(2);
              
     ELSIF qryType = 'GET-ROUTING-NAME' THEN    
         SELECT OM.OPERATION_NAME 
         BULK COLLECT INTO T_VARCHAR_DATA
         FROM T_OPERATION_ROUTING_DTL RD, T_OPERATION_ROUTING_MASTER RM,T_OPERATION_MASTER OM 
         WHERE RD.OPERATION_ID = OM.OPERATION_ID(+) AND  
               RM.ROUTING_ID = RD.ROUTING_ID(+) AND 
               RM.ROUTING_ID = arrData(1) 
         ORDER BY RD.SEQUENCE_NO ; 
        
     ELSIF qryType = 'GET-CUSTOM_FINENESS' THEN  
         SELECT CUSTOM_FINENESS  
         BULK COLLECT INTO T_VARCHAR_DATA
         FROM T_SMRY_ITEM_VARIANT_METAL MTL ,T_ITEM_ATTRIB_MASTER IAM,T_ITEM_ATTRIB_MASTER_EXTD IAME 
         WHERE MTL.KARAT_CODE = IAM.ATTRIB_CODE
               AND IAM.ATTRIB_ID = IAME.ATTRIB_ID 
               AND IAM.ATTRIB_TYPE_ID = 11006  
               AND IAM.ROW_STATUS = 1 
               AND MTL.VARIANT_ID = arrData(1) ; 

     ELSIF qryType = 'GET-PARENT_CATEGORY(TRANS_ID)' THEN      
         SELECT DISTINCT FNGETGROUPATTRIBUTEVALUE(F_GET_ATTRIBUTE(IV.ATTRIB_TYPE_AND_CODE,'CATG'),11001)
         BULK COLLECT INTO T_VARCHAR_DATA
         FROM T_TRANS_ITEM_DTL TID,V_ITEM_VARIANT_RTN_DTL IV
         WHERE TID.VARIANT_ID = IV.VARIANT_ID
               AND IV.ITEM_TYPE_ID = 1001 
               AND TID.ROW_STATUS = 1 
               AND TID.TRANS_ID = arrData(1) ; 

     ELSIF qryType = 'GET-ORDER-PO-NO' THEN      
         SELECT DISTINCT TH.BILL_NO
         BULK COLLECT INTO T_VARCHAR_DATA
         FROM T_TRANS_ITEM_DTL TID, V_TRANS_HDR TH
         WHERE TID.SOR_TRANS_ID = TH.TRANS_ID AND TID.SOR_TRANS_ID > 0 AND TID.TRANS_ID = arrData(1); 

     ELSIF qryType = 'GET-LAST-EXPORT-DATE-FOR-BOE' THEN
         -- CUSTOM_STOCK_ID : AS_ON_DATE : SESSION_DATE_FORMAT

         SELECT TO_CHAR(MAX(TH.TRANS_DATE), arrData(3))
         BULK COLLECT INTO T_VARCHAR_DATA
         FROM (
               SELECT CS.CUSTOM_STOCK_ID FROM T_CUSTOM_STOCK CS
               CONNECT BY PRIOR CS.CUSTOM_STOCK_ID = CS.PCUSTOM_STOCK_ID
               START WITH CS.CUSTOM_STOCK_ID = arrData(1)
              ) CS, T_VA_TRANS_CUSTOM_DTL VTCD, T_VA_TRANS_HDR VTH, T_TRANS_HDR TH
         WHERE CS.CUSTOM_STOCK_ID = VTCD.CUSTOM_STOCK_ID AND VTCD.VA_TRANS_ID = VTH.VA_TRANS_ID AND
               VTH.REF_TRANS_ID = TH.TRANS_ID AND TO_DATE(TO_CHAR(TH.TRANS_DATE,'DD/MM/YYYY'),'DD/MM/YYYY') <= F_CONVERT_DATE(arrData(2), arrData(3), 'DD/MM/YYYY') AND
               VTH.ROW_STATUS > 0;

     ELSIF qryType = 'GET-CUSTOM-CODE' THEN
         strReturn := qryValues;
        
         FOR J IN(SELECT * FROM T_MISC_COMMON_DATA_MASTER WHERE DATA_TYPE_ID = 2247)
         LOOP
             strReturn := REPLACE(strReturn,J.DATA_CODE,J.DATA_VALUE);                
         END LOOP;
                
         RETURN strReturn;

     ELSIF qryType = 'GET-MGPL-SS-CODE' THEN
         strReturn := qryValues;
        
         FOR J IN(SELECT * FROM T_MISC_COMMON_DATA_MASTER WHERE DATA_TYPE_ID = 2334)
         LOOP
             strReturn := REPLACE(strReturn,J.DATA_CODE,J.DATA_VALUE);                
         END LOOP;
                
         RETURN strReturn;

     ELSIF qryType = 'GET-ZUCI-PRICE-CODE' THEN
         strReturn := qryValues;
        
         FOR J IN(SELECT * FROM T_MISC_COMMON_DATA_MASTER WHERE DATA_TYPE_ID = 2335)
         LOOP
             strReturn := REPLACE(strReturn,J.DATA_CODE,J.DATA_VALUE);                
         END LOOP;
                
         RETURN strReturn;
                  
     ELSIF qryType = 'GET-WORKING-DAY' THEN
         intDays := TO_NUMBER(arrData(1));

         IF intDays > 0 THEN
             IF TO_CHAR(TO_DATE(TO_CHAR(F_GET_DATE_DBTIMEZONE, 'dd/MM/yyyy'), 'dd/MM/yyyy'), 'DY') = 'SUN' THEN
                 intDays := intDays - 1; 
             ELSE
                 SELECT COUNT(*) INTO intCount
                 FROM T_MISC_HOLIDAY_LIST
                 WHERE HOLIDAY = TO_DATE(TO_CHAR(F_GET_DATE_DBTIMEZONE, 'dd/MM/yyyy'), 'dd/MM/yyyy');
                
                 IF intCount > 0 THEN
                     intDays := intDays - 1;
                 END IF;
             END IF;
         END IF;

         SELECT COUNT(*)
         INTO intCount 
         FROM T_MISC_HOLIDAY_LIST
         WHERE HOLIDAY BETWEEN TO_DATE(TO_CHAR(F_GET_DATE_DBTIMEZONE, 'dd/MM/yyyy'), 'dd/MM/yyyy') AND (TO_DATE(TO_CHAR(F_GET_DATE_DBTIMEZONE, 'dd/MM/yyyy'), 'dd/MM/yyyy') + intDays);
        
         intCount := intCount + intDays;

         dtDate := TO_DATE(TO_CHAR(F_GET_DATE_DBTIMEZONE, 'dd/MM/yyyy'), 'dd/MM/yyyy') + intCount;
        
         BEGIN
             SELECT 1 
             INTO dblQty 
             FROM T_MISC_HOLIDAY_LIST
             WHERE HOLIDAY = dtDate;
         EXCEPTION
         	WHEN NO_DATA_FOUND THEN
             	dblQty := 0;
         END;
        
 		intCount := intCount + dblQty;

         strReturn := TO_CHAR((TO_DATE(TO_CHAR(F_GET_DATE_DBTIMEZONE, 'dd/MM/yyyy'), 'dd/MM/yyyy') + intCount), 'dd')||'-'||
                      TRIM(TO_CHAR((TO_DATE(TO_CHAR(F_GET_DATE_DBTIMEZONE, 'dd/MM/yyyy'), 'dd/MM/yyyy') + intCount), 'Month'))||'-'||
                      TO_CHAR((TO_DATE(TO_CHAR(F_GET_DATE_DBTIMEZONE, 'dd/MM/yyyy'), 'dd/MM/yyyy') + intCount), 'yyyy');
    
    ELSIF qryType = 'GET-EDD-DATE-FROM-FDD' THEN
        strDate := arrData(1);
        intVendorID := TO_NUMBER(NVL(arrData(2), 0));
        intLocationID := TO_NUMBER(NVL(arrData(3), 0));
        
        SELECT TO_CHAR(TRANS_DATE, 'dd/MM/yyyy') INTO strReturn 
        FROM (
              WITH RD
              AS (
                  SELECT TO_DATE(strDate, 'dd/MM/yyyy') + (LEVEL - 1) AS TRANS_DATE 
                  FROM DUAL 
                  CONNECT BY LEVEL <= 30
                 ),
                 HD AS
                 (
                  SELECT HOLIDAY
                  FROM T_MISC_HOLIDAY_LIST
                  WHERE ((PARTY_ID = 0 AND LOCATION_ID = 0) OR PARTY_ID = intVendorID OR LOCATION_ID = intLocationID) AND
                        HOLIDAY BETWEEN TO_DATE(strDate, 'dd/MM/yyyy') AND TO_DATE(strDate, 'dd/MM/yyyy') + 30
                 )
              SELECT ROWNUM AS SR_NO, TRANS_DATE
              FROM RD
              WHERE TRANS_DATE NOT IN (SELECT HOLIDAY FROM HD)
             )
        WHERE SR_NO = 3;

     ELSIF qryType = 'GET-EDD-DATE-CARAT-LANE' THEN
        strDate := arrData(1);
        intVendorID := TO_NUMBER(NVL(arrData(2), 0));
        
        IF ARRDATA.COUNT >= 3 THEN 
            intDays := TO_NUMBER(NVL(arrData(3), 0));
        END IF;

        SELECT COUNT(*)
        INTO intCount 
        FROM T_MISC_HOLIDAY_LIST
        WHERE HOLIDAY BETWEEN TO_DATE(strDate, 'dd/MM/yyyy') AND (TO_DATE(strDate, 'dd/MM/yyyy') + intDays) AND
              ((PARTY_ID = 0 AND LOCATION_ID = 0) OR PARTY_ID = intVendorID OR LOCATION_ID = arrData(4));

        intCount := intCount + intDays;
        dtDate := TO_DATE(strDate, 'dd/MM/yyyy') + intCount;
        strReturn := TO_CHAR(dtDate, 'dd/MM/yyyy');

     ELSIF qryType = 'GET-FDD-DATE-CARAT-LANE' THEN
        strDate := arrData(1);
        dtDate := TO_DATE(arrData(2), 'dd/MM/yyyy');
        intVendorID := TO_NUMBER(NVL(arrData(3), 0));
        intDays := TO_NUMBER(NVL(arrData(4), 0));

         SELECT COUNT(*)
         INTO intCount 
         FROM T_MISC_HOLIDAY_LIST
         WHERE HOLIDAY BETWEEN (TO_DATE(strDate, 'dd/MM/yyyy') + intDays) AND dtDate AND
               ((PARTY_ID = 0 AND LOCATION_ID = 0) OR PARTY_ID = intVendorID OR LOCATION_ID = arrData(5));

         intCount := intDays - intCount;
         dtDate := TO_DATE(strDate, 'dd/MM/yyyy') + intCount;
         strReturn := TO_CHAR(dtDate, 'dd/MM/yyyy');

     ELSIF qryType = 'GET-CONFIG_ID_FRM_DTL' THEN                 
         SELECT  CONFIG_ID 
         BULK COLLECT INTO T_VARCHAR_DATA
         FROM T_CONFIG_FIXED_DATA CFD,T_ITEM_ATTRIB_GRP_DTL IAGD 
         WHERE IAGD.ATTRIB_ID = CFD.CONFIG_ID
               AND CFD.ROW_STATUS = 1
               AND IAGD.HDR_ID = ARRDATA(1) ;
        
     ELSIF qryType = 'GET-PARTYWISE-QUALITY-SHP-RD' THEN
         SELECT  
             DISTINCT QLTY.ATTRIB_ALIAS_NAME 
             BULK COLLECT INTO T_VARCHAR_DATA
         FROM 
             T_TRANS_ITEM_BOM_DTL SB, V_ITEM_VARIANT_DTL IV,
             (
                 SELECT
                     PML.PARTY_MISC_LINK_ID AS PK_ID,PML.PARTY_ID,SAM.ATTRIB_CODE AS QUALITY,SAM.ATTRIB_CODE AS QLTY_CODE, 
                     PML.ATTRIB_ALIAS_NAME,PML.LINK_TYPE,PML.ATTRIB_ID1
                 FROM 
                     T_PARTY_MISC_LINK PML,
                     T_ITEM_ATTRIB_MASTER SAM,
                     T_TRANS_HDR TH,T_TRANS_HDR_EXTD TEXTD  
                 WHERE 
                     TH.TRANS_ID = TEXTD.TRANS_ID(+) AND    
                     TEXTD.PARTY_ID = PML.PARTY_ID(+) AND  
                     PML.ATTRIB_ID1 =SAM.ATTRIB_ID (+) AND
                     TH.TRANS_ID = arrData(1) AND 
                     PML.LINK_TYPE = 'A'  
              )QLTY
         WHERE
             F_GET_ATTRIBUTE_VALUE(IV.ATTRIB_TYPE_AND_CODE,'STNQLTY') = QLTY.QLTY_CODE(+) AND
             F_GET_ATTRIBUTE_VALUE(IV.ATTRIB_TYPE_AND_CODE,'STNSHP') = 'RD' AND
             SB.BOM_VARIANT_ID  = IV.VARIANT_ID (+) AND
             IV.ITEM_TYPE_ID = 1005   AND 
             SB.TRANS_ITEM_ID = arrData(2);

    
      ELSIF qryType = 'GET-PARTYWISE-COLOR-RD' THEN
         SELECT  
             DISTINCT QLTY.ATTRIB_ALIAS_NAME 
             BULK COLLECT INTO T_VARCHAR_DATA
         FROM 
             T_TRANS_ITEM_BOM_DTL SB, V_ITEM_VARIANT_DTL IV,  
             (
                 SELECT
                     PML.PARTY_MISC_LINK_ID AS PK_ID,PML.PARTY_ID,SAM.ATTRIB_DESC AS QUALITY,SAM.ATTRIB_CODE AS COLOR_CODE, 
                     PML.ATTRIB_ALIAS_NAME,PML.LINK_TYPE,PML.ATTRIB_ID1
                 FROM 
                     T_PARTY_MISC_LINK PML,
                     T_ITEM_ATTRIB_MASTER SAM,
                     T_TRANS_HDR TH,T_TRANS_HDR_EXTD TEXTD  
                 WHERE 
                     TH.TRANS_ID = TEXTD.TRANS_ID(+) AND    
                     TEXTD.PARTY_ID = PML.PARTY_ID(+) AND  
                     PML.ATTRIB_ID1 = SAM.ATTRIB_ID (+) AND
                     TH.TRANS_ID = arrData(1) AND 
                     PML.LINK_TYPE = 'CL'  
              )QLTY
         WHERE 
             F_GET_ATTRIBUTE_VALUE(IV.ATTRIB_TYPE_AND_CODE,'STNCLR') = QLTY.COLOR_CODE(+) AND 
             F_GET_ATTRIBUTE_VALUE(IV.ATTRIB_TYPE_AND_CODE,'STNSHP') = 'RD' AND
             SB.BOM_VARIANT_ID  = IV.VARIANT_ID (+) AND
             IV.ITEM_TYPE_ID = 1005   AND 
             SB.TRANS_ITEM_ID = arrData(2);

      ELSIF qryType = 'GET-PARTYWISE-QLTY-CODE' THEN
     
         SELECT  
             DISTINCT QLTY.ATTRIB_ALIAS_NAME 
             BULK COLLECT INTO T_VARCHAR_DATA
         FROM 
             T_TRANS_ITEM_BOM_DTL SB, V_ITEM_VARIANT_DTL IV,  
             (
                 SELECT
                     PML.PARTY_MISC_LINK_ID AS PK_ID,PML.PARTY_ID,SAM.ATTRIB_DESC AS QUALITY,SAM.ATTRIB_CODE AS QLTY_CODE, 
                     PML.ATTRIB_ALIAS_NAME,PML.LINK_TYPE,PML.ATTRIB_ID1
                 FROM 
                     T_PARTY_MISC_LINK PML,
                     T_ITEM_ATTRIB_MASTER SAM,
                     T_TRANS_HDR TH,T_TRANS_HDR_EXTD TEXTD  
                 WHERE 
                     TH.TRANS_ID = TEXTD.TRANS_ID(+) AND    
                     TEXTD.PARTY_ID = PML.PARTY_ID(+) AND  
                     PML.ATTRIB_ID1 =SAM.ATTRIB_ID (+) AND
                     TH.TRANS_ID = arrData(1) AND 
                     PML.LINK_TYPE = 'A'
              )QLTY               
         WHERE 
             F_GET_ATTRIBUTE_VALUE(IV.ATTRIB_TYPE_AND_CODE,'STNQLTY') = QLTY.QLTY_CODE(+) AND 
             SB.BOM_VARIANT_ID  = IV.VARIANT_ID (+) AND
             IV.ITEM_TYPE_ID = 1005   AND 
             SB.TRANS_ITEM_ID = arrData(2);            

      ELSIF qryType = 'GET-LAST-APPROVED-QTO-RATE' THEN
         SELECT ITEM_RATE
         BULK COLLECT INTO T_VARCHAR_DATA
         FROM
         (
             SELECT TID.TRANS_ID,TID.TRANS_ITEM_ID,ROUND(TID.TRANS_RATE,2) AS ITEM_RATE FROM V_TRANS_ITEM_DTL TID,T_TRANS_HDR TH, T_TRANS_HDR_EXTD THEX
             WHERE
             TH.TRANS_ID = TID.TRANS_ID AND TH.TRANS_ID = THEX.TRANS_ID AND 
             (THEX.PARTY_ID = arrData(1) OR THEX.PARTY_ID IN (SELECT PM.PPARTY_ID FROM T_PARTY_MASTER PM WHERE PM.PARTY_ID = arrData(1))) AND
             TH.LOCATION_ID = arrData(2) AND TH.TRANS_SUBTYPE_ID = 131 AND TH.ROW_STATUS = 1 AND
             TH.VERIFIED_IND = 1 AND TID.VARIANT_ID = arrData(3)
             ORDER BY TH.TRANS_DATE DESC,TID.TRANS_ID DESC
         ) WHERE ROWNUM = 1;

     ELSIF qryType = 'TRANS_BOM_METAL_KARAT_CLR' THEN
         SELECT DISTINCT SIVM.KARAT_CODE||' / '||SIVM.COLOR_CODE
         BULK COLLECT INTO T_VARCHAR_DATA
         FROM T_SMRY_ITEM_VARIANT_METAL SIVM,T_TRANS_ITEM_BOM_DTL TIBD 
         WHERE TIBD.BOM_VARIANT_ID = SIVM.VARIANT_ID
         AND TIBD.TRANS_ITEM_ID = qryValues;
    
     ELSIF qryType = 'STONE_QUALITY_CODE(TRANS_ITEM_ID)' THEN
         SELECT DISTINCT F_GET_ATTRIBUTE_VALUE(MV.ATTRIB_TYPE_AND_CODE,'STNQLTY')
         BULK COLLECT INTO T_VARCHAR_DATA
         FROM T_TRANS_ITEM_BOM_DTL STB,V_ITEM_VARIANT_RTN_DTL MV 
         WHERE STB.BOM_VARIANT_ID  = MV.VARIANT_ID
         AND MV.ITEM_TYPE_ID = 1005 
         AND STB.TRANS_ITEM_ID = qryValues;

     ELSIF qryType = 'FETCH-PROFILE-PRODUCT-TYPE' THEN
         SELECT IAM.ATTRIB_DESC
         BULK COLLECT INTO T_VARCHAR_DATA
         FROM T_PARTY_MISC_LINK PML, T_ITEM_ATTRIB_MASTER IAM 
         WHERE PML.ATTRIB_ID1 = IAM.ATTRIB_ID AND PML.LINK_TYPE = 'PA' AND PML.ATTRIB_ID1 > 0 AND PML.PARTY_ID = qryValues;

     ELSIF qryType = 'FETCH-PROFILE-CATEGORY' THEN
         SELECT IAM.ATTRIB_DESC
         BULK COLLECT INTO T_VARCHAR_DATA
         FROM T_PARTY_MISC_LINK PML, T_ITEM_ATTRIB_MASTER IAM 
         WHERE PML.ATTRIB_ID2 = IAM.ATTRIB_ID AND PML.LINK_TYPE = 'PA' AND PML.ATTRIB_ID2 > 0 AND PML.PARTY_ID = qryValues;

     ELSIF qryType = 'FETCH-PROFILE-BANGLESIZE' THEN
         SELECT IAM.ATTRIB_DESC
         BULK COLLECT INTO T_VARCHAR_DATA
         FROM T_PARTY_MISC_LINK PML, T_ITEM_ATTRIB_MASTER IAM 
         WHERE PML.ATTRIB_ID3 = IAM.ATTRIB_ID AND PML.LINK_TYPE = 'PA' AND PML.ATTRIB_ID3 > 0 AND PML.PARTY_ID = qryValues;

     ELSIF qryType = 'FETCH-PROFILE-RINGSIZE' THEN
         SELECT IAM.ATTRIB_DESC
         BULK COLLECT INTO T_VARCHAR_DATA
         FROM T_PARTY_MISC_LINK PML, T_ITEM_ATTRIB_MASTER IAM 
         WHERE PML.ATTRIB_ID4 = IAM.ATTRIB_ID AND PML.LINK_TYPE = 'PA' AND PML.ATTRIB_ID4 > 0 AND PML.PARTY_ID = qryValues;

     ELSIF qryType = 'GET-GOLD-LOSS(TRANSID)' THEN
         SELECT  
             MAX(F_GETTRANSPRICEVALUE(0,0,TIBD.TRANS_ITEM_BOM_ID,0,'GOLDLOSS')) BULK COLLECT INTO T_VARCHAR_DATA   
         FROM T_TRANS_ITEM_DTL TID,T_TRANS_ITEM_BOM_DTL TIBD, V_ITEM_VARIANT_DTL IV
         WHERE 
             TIBD.BOM_VARIANT_ID = IV.VARIANT_ID AND   
             TID.TRANS_ITEM_ID = TIBD.TRANS_ITEM_ID(+) AND  
             TIBD.QUANTITY > 0 AND  
             TID.TRANS_ID =qryValues ;
    
    ELSIF qryType = 'GET-GOLD-LOSS(TRANSITEMID)' THEN
        SELECT  
            MAX(F_GETTRANSPRICEVALUE(0,0,TIBD.TRANS_ITEM_BOM_ID,0,'GOLDLOSS')) BULK COLLECT INTO T_VARCHAR_DATA   
        FROM T_TRANS_ITEM_BOM_DTL TIBD, V_ITEM_VARIANT_DTL IV
        WHERE 
            TIBD.BOM_VARIANT_ID = IV.VARIANT_ID AND   
            TIBD.QUANTITY > 0 AND  
            TIBD.TRANS_ITEM_ID =qryValues ;
                    
    ELSIF qryType = 'GET-LOSS-PER(TRANSITEMID)' THEN
        SELECT  
            MAX(F_GETTRANSPRICEVALUE(0,0,TIBD.TRANS_ITEM_BOM_ID,0,'LOSS%'))
            BULK COLLECT INTO T_VARCHAR_DATA  
        FROM
            T_TRANS_ITEM_DTL TID ,T_TRANS_ITEM_BOM_DTL TIBD
        WHERE
            TID.TRANS_ITEM_ID = TIBD.TRANS_ITEM_ID
            AND TID.TRANS_ITEM_ID = qryValues
        GROUP BY
            TID.TRANS_ITEM_ID  ;
            
    ELSIF qryType = 'GET-GOLD-LOSS(TRANSITEMID-ITEMR)' THEN
        SELECT  
            MAX(F_GETTRANSPRICEVALUE(0,TID.TRANS_ITEM_ID,0,0,'GOLDLOSS')) BULK COLLECT INTO T_VARCHAR_DATA   
        FROM T_TRANS_ITEM_DTL TID, V_ITEM_VARIANT_DTL IV
        WHERE 
            TID.VARIANT_ID = IV.VARIANT_ID AND   
            TID.QUANTITY > 0 AND  
            IV.ITEM_TYPE_ID = 1004 AND 
            TID.TRANS_ITEM_ID =qryValues ;
                    
    ELSIF qryType = 'GET-LOSS-PER(TRANSITEMID-ITEMR)' THEN
        SELECT  
            MAX(F_GETTRANSPRICEVALUE(0,TID.TRANS_ITEM_ID,0,0,'LOSS%'))
            BULK COLLECT INTO T_VARCHAR_DATA  
        FROM
            T_TRANS_ITEM_DTL TID , V_ITEM_VARIANT_DTL IV
        WHERE
            TID.VARIANT_ID = IV.VARIANT_ID AND   
            TID.QUANTITY > 0 AND  
            IV.ITEM_TYPE_ID = 1004 AND 
            TID.TRANS_ITEM_ID =qryValues  
        GROUP BY
            TID.TRANS_ITEM_ID  ;
            
            
    ELSIF qryType = 'GET-TROUNC(TRANSITEMID-ITEMR)' THEN
        SELECT  
            MAX(F_GETTRANSPRICEVALUE(0,TID.TRANS_ITEM_ID,0,0,'TROUNC'))
            BULK COLLECT INTO T_VARCHAR_DATA  
        FROM
            T_TRANS_ITEM_DTL TID , V_ITEM_VARIANT_DTL IV
        WHERE
            TID.VARIANT_ID = IV.VARIANT_ID AND   
            TID.QUANTITY > 0 AND  
            IV.ITEM_TYPE_ID = 1004 AND 
            TID.TRANS_ITEM_ID =qryValues  
        GROUP BY
            TID.TRANS_ITEM_ID  ;
                    
     ELSIF qryType = 'GET-WORKGROUP(SORTRANSITEMID)' THEN        
         SELECT DISTINCT WGM.WCGROUP_NAME   BULK COLLECT INTO T_VARCHAR_DATA
         FROM T_STOCK T,V_STOCK_DTL SD , T_WORKCENTER_GROUP_MASTER  WGM , T_STOCK_TRANS_LINK STL
         WHERE T.STOCK_ID = SD.STOCK_ID
               AND T.STOCK_ID = STL.STOCK_ID
               AND SD.WCGROUP_ID = WGM.WCGROUP_ID
               AND T.QUANTITY> 0 
               AND STL.SOR_TRANS_ITEM_ID > 0  
               AND STL.SOR_TRANS_ITEM_ID  =qryValues ;
    
     ELSIF qryType = 'GET-DIA-PARTYWISE-QUALITY' THEN
         SELECT  
             DISTINCT DECODE(QLTY.ATTRIB_ALIAS_NAME,NULL,F_GET_ATTRIBUTE_VALUE(IV.ATTRIB_TYPE_AND_CODE,'STNQLTY'),QLTY.ATTRIB_ALIAS_NAME) 
             BULK COLLECT INTO T_VARCHAR_DATA
         FROM 
             T_TRANS_ITEM_BOM_DTL SB, V_ITEM_VARIANT_DTL IV,  
             (
                 SELECT
                     PML.PARTY_MISC_LINK_ID AS PK_ID,PML.PARTY_ID,SAM.ATTRIB_CODE AS QUALITY,SAM.ATTRIB_CODE AS QLTY_CODE, 
                     PML.ATTRIB_ALIAS_NAME,PML.LINK_TYPE,PML.ATTRIB_ID1
                 FROM 
                     T_PARTY_MISC_LINK PML,
                     T_ITEM_ATTRIB_MASTER SAM,
                     T_TRANS_HDR TH,T_TRANS_HDR_EXTD TEXTD  
                 WHERE 
                     TH.TRANS_ID = TEXTD.TRANS_ID(+) AND    
                     TEXTD.PARTY_ID = PML.PARTY_ID(+) AND  
                     PML.ATTRIB_ID1 =SAM.ATTRIB_ID (+) AND
                     TH.TRANS_ID = arrData(1) AND 
                     PML.LINK_TYPE = 'A'  
              )QLTY               
         WHERE 
             F_GET_ATTRIBUTE_VALUE(IV.ATTRIB_TYPE_AND_CODE,'STNQLTY') = QLTY.QLTY_CODE(+) AND 
             SB.BOM_VARIANT_ID  = IV.VARIANT_ID (+) AND
             IV.ITEM_GROUP_ID = 1504   AND 
             SB.TRANS_ITEM_ID = arrData(2);

     ELSIF qryType = 'GET-CLS-PARTYWISE-QUALITY' THEN
         SELECT  
             DISTINCT DECODE(QLTY.ATTRIB_ALIAS_NAME,NULL,F_GET_ATTRIBUTE_VALUE(IV.ATTRIB_TYPE_AND_CODE,'STNQLTY'),QLTY.ATTRIB_ALIAS_NAME) 
             BULK COLLECT INTO T_VARCHAR_DATA
         FROM 
             T_TRANS_ITEM_BOM_DTL SB, V_ITEM_VARIANT_DTL IV,  
             (
                 SELECT
                     PML.PARTY_MISC_LINK_ID AS PK_ID,PML.PARTY_ID,SAM.ATTRIB_CODE AS QUALITY,SAM.ATTRIB_CODE AS QLTY_CODE, 
                     PML.ATTRIB_ALIAS_NAME,PML.LINK_TYPE,PML.ATTRIB_ID1
                 FROM 
                     T_PARTY_MISC_LINK PML,
                     T_ITEM_ATTRIB_MASTER SAM,
                     T_TRANS_HDR TH,T_TRANS_HDR_EXTD TEXTD  
                 WHERE 
                     TH.TRANS_ID = TEXTD.TRANS_ID(+) AND    
                     TEXTD.PARTY_ID = PML.PARTY_ID(+) AND  
                     PML.ATTRIB_ID1 =SAM.ATTRIB_ID (+) AND
                     TH.TRANS_ID = arrData(1) AND 
                     PML.LINK_TYPE = 'A'  
              )QLTY               
         WHERE 
             F_GET_ATTRIBUTE_VALUE(IV.ATTRIB_TYPE_AND_CODE,'STNQLTY') = QLTY.QLTY_CODE(+) AND 
             SB.BOM_VARIANT_ID  = IV.VARIANT_ID (+) AND
             IV.ITEM_TYPE_ID = 1005 AND IV.ITEM_GROUP_ID <> 1504 AND 
             SB.TRANS_ITEM_ID = arrData(2);
    
     ELSIF qryType = 'GET-VARIANT_NAME-VARIANT_ID' THEN
             SELECT VARIANT_NAME 
             BULK COLLECT INTO T_VARCHAR_DATA
             FROM T_ITEM_VARIANT_MASTER 
             WHERE TO_CHAR(VARIANT_ID) IN(
             WITH DATA AS
                ( SELECT ARRDATA(1) str FROM dual
                )
             SELECT trim(regexp_substr(str, '[^,]+', 1, LEVEL)) str
              FROM DATA
              CONNECT BY instr(str, ',', 1, LEVEL - 1) > 0 );
             
             
     ELSIF qryType = 'GET-REMARK_NAME-REMARK_ID' THEN
             SELECT REMARK_DESC
             BULK COLLECT INTO T_VARCHAR_DATA
             FROM T_MISC_REMARK_MASTER  
             WHERE ROW_STATUS = 1 AND  REMARK_ID IN(
             WITH DATA AS
                ( SELECT ARRDATA(1) str FROM dual
                )
             SELECT trim(regexp_substr(str, '[^,]+', 1, LEVEL)) str
              FROM DATA
              CONNECT BY instr(str, ',', 1, LEVEL - 1) > 0 );
    
     ELSIF qryType = 'GET-ATTRIB-FOR-STOCK-TAKE' THEN   
         P_SEANET_CONTEXT(strAttribType => 'MISC1', strAttribValue => qryValues); 
         strWh1 := ' SELECT RET_VAL FROM DATAARRAYLIST WHERE RET_TYPE = ''MISC1'' ';
         strSql :=
         'SELECT IA.ATTRIB_CODE 
         FROM
         T_ITEM_ATTRIB_MASTER IA
         WHERE IA.ATTRIB_ID IN ('||strWh1||')';

         EXECUTE IMMEDIATE
         strSql
         BULK COLLECT INTO T_VARCHAR_DATA;

     ELSIF qryType = 'GET-ATTRIB-VALUE-FOR-STOCK-TAKE' THEN   
         P_SEANET_CONTEXT(strAttribType => 'MISC1', strAttribValue => qryValues); 
         strWh1 := ' SELECT RET_VAL FROM DATAARRAYLIST WHERE RET_TYPE = ''MISC1'' ';
         strSql :=
         'SELECT IA.ATTRIB_DESC
         FROM
         T_ITEM_ATTRIB_MASTER IA
         WHERE IA.ATTRIB_ID IN ('||strWh1||')';

         EXECUTE IMMEDIATE
         strSql
         BULK COLLECT INTO T_VARCHAR_DATA;        

     ELSIF qryType = 'GET-VENDOR-(SOR_TRANS_ITEM_ID)' THEN       

         P_SEANET_CONTEXT(strAttribType => 'MISC1', strAttribValue => arrData(1));
         IF arrData(1) IS NOT NULL THEN 
             IF arrData(9) = 'SOR' THEN
                 strWh1 := strWh1||' AND INVTID.SOR_TRANS_ITEM_ID IN (SELECT RET_VAL FROM DATAARRAYLIST WHERE RET_TYPE = :V1)';
             ELSE
                 strWh1 := strWh1||' AND INVTID.TRANS_ITEM_ID IN (SELECT RET_VAL FROM DATAARRAYLIST WHERE RET_TYPE = :V1)';                
             END IF;
         ELSE
             strWh1 := strWh1||' AND (1 = 1 OR INVTID.SOR_TRANS_ITEM_ID IN (SELECT RET_VAL FROM DATAARRAYLIST WHERE RET_TYPE = :V1))';
         END IF;

         IF arrData.COUNT >= 3 THEN 
             IF arrData(2) IS NOT NULL AND arrData(3) IS NOT NULL THEN
                 strWh1 := strWh1||' AND INVTH.TRANS_DATE BETWEEN TO_DATE('''||arrData(2)||''',''DD/MM/YYYY'') AND TO_DATE('''||arrData(3)||''',''DD/MM/YYYY'')';
             END IF;
         END IF;

         IF arrData.COUNT >= 4 THEN
             P_SEANET_CONTEXT(strAttribType => 'MISC2', strAttribValue => arrData(4));
             IF arrData(4) IS NOT NULL THEN                
                 strWh1 := strWh1||' AND INVTH.PARTY_ID IN (SELECT RET_VAL FROM DATAARRAYLIST WHERE RET_TYPE = :V2)';
             ELSE
                 strWh1 := strWh1||' AND (1 = 1 OR INVTH.PARTY_ID IN (SELECT RET_VAL FROM DATAARRAYLIST WHERE RET_TYPE = :V2))';
             END IF;
         END IF;
        
         IF arrData.COUNT >= 5 THEN
             P_SEANET_CONTEXT(strAttribType => 'MISC3', strAttribValue => arrData(5));
             IF arrData(5) IS NOT NULL THEN                
                 strWh1 := strWh1||' AND INVTH.TRANS_ID IN (SELECT RET_VAL FROM DATAARRAYLIST WHERE RET_TYPE = :V3)';
             ELSE
                 strWh1 := strWh1||' AND (1 = 1 OR INVTH.TRANS_ID IN (SELECT RET_VAL FROM DATAARRAYLIST WHERE RET_TYPE = :V3))';
             END IF;
         END IF;

         IF arrData.COUNT >= 6 THEN
             P_SEANET_CONTEXT(strAttribType => 'MISC4', strAttribValue => arrData(6));
             IF arrData(6) IS NOT NULL THEN                
                 strWh1 := strWh1||' AND INVTH.LOCATION_ID IN (SELECT RET_VAL FROM DATAARRAYLIST WHERE RET_TYPE = :V4)';
             ELSE
                 strWh1 := strWh1||' AND (1 = 1 OR INVTH.LOCATION_ID IN (SELECT RET_VAL FROM DATAARRAYLIST WHERE RET_TYPE = :V4))';
             END IF;
         END IF;

         IF arrData.COUNT >= 7 THEN
             P_SEANET_CONTEXT(strAttribType => 'MISC5', strAttribValue => arrData(7));
             IF arrData(7) IS NOT NULL THEN                
                 strWh1 := strWh1||' AND TH.PARTY_ID IN (SELECT RET_VAL FROM DATAARRAYLIST WHERE RET_TYPE = :V5)';
             ELSE
                 strWh1 := strWh1||' AND (1 = 1 OR TH.PARTY_ID IN (SELECT RET_VAL FROM DATAARRAYLIST WHERE RET_TYPE = :V5))';
             END IF;
         END IF;

         IF arrData.COUNT >= 8 THEN
             P_SEANET_CONTEXT(strAttribType => 'MISC6', strAttribValue => arrData(8));
             IF arrData(8) IS NOT NULL THEN                
                 strWh1 := strWh1||' AND F_GET_ATTRIBUTE_VALUE(VD.ATTRIB_TYPE_AND_VALUE,''CATG'') IN (SELECT RET_VAL FROM DATAARRAYLIST WHERE RET_TYPE = :V6)';
             ELSE
                 strWh1 := strWh1||' AND (1 = 1 OR F_GET_ATTRIBUTE_VALUE(VD.ATTRIB_TYPE_AND_VALUE,''CATG'') IN (SELECT RET_VAL FROM DATAARRAYLIST WHERE RET_TYPE = :V6))';
             END IF;
         END IF;

         strSql :=
             'SELECT VENDOR 
             FROM
             (
                 SELECT 
                     PM.PARTY_NAME AS VENDOR, PM.PARTY_TYPE_ID  
                 FROM
                     (SELECT * FROM V_TRANS_HDR WHERE TRANS_TYPE IN (''PRI'',''GRN'') AND TRANS_SUBTYPE_ID IN (41,507)) TH, 
                     T_TRANS_ITEM_DTL TID, 
                     V_TRANS_HDR INVTH, T_TRANS_ITEM_DTL INVTID, T_STOCK_TRANS_LINK STL,
                     T_PARTY_MASTER PM, V_ITEM_VARIANT_DTL VD
                 WHERE
                     TID.VARIANT_ID = VD.VARIANT_ID AND 
                     TH.PARTY_ID = PM.PARTY_ID(+) AND
                     TID.TRANS_ID = TH.TRANS_ID(+) AND
                     STL.INWARD_TRANS_ITEM_ID = TID.TRANS_ITEM_ID AND                     
                     INVTID.SRC_STOCK_ID = STL.STOCK_ID AND
                     INVTH.TRANS_ID = INVTID.TRANS_ID AND
                     INVTID.ROW_STATUS = 1 AND
                     INVTH.ROW_STATUS = 1 AND 
                     INVTH.TRANS_TYPE = ''INV'' '||strWh1||'
             ) WHERE VENDOR IS NOT NULL
             GROUP BY VENDOR  ';

         EXECUTE IMMEDIATE
         strSql
         BULK COLLECT INTO T_VARCHAR_DATA
         USING 'MISC1', 'MISC2', 'MISC3', 'MISC4', 'MISC5', 'MISC6';

     ELSIF qryType = 'GET-INV-DATE-(SOR_TRANS_ITEM_ID)' THEN       

         P_SEANET_CONTEXT(strAttribType => 'MISC1', strAttribValue => arrData(1));
         IF arrData(1) IS NOT NULL THEN 
             IF arrData(9) = 'SOR' THEN
                 strWh1 := strWh1||' AND INVTID.SOR_TRANS_ITEM_ID IN (SELECT RET_VAL FROM DATAARRAYLIST WHERE RET_TYPE = :V1)';
             ELSE
                 strWh1 := strWh1||' AND INVTID.TRANS_ITEM_ID IN (SELECT RET_VAL FROM DATAARRAYLIST WHERE RET_TYPE = :V1)';                
             END IF;
         ELSE
             strWh1 := strWh1||' AND (1 = 1 OR INVTID.SOR_TRANS_ITEM_ID IN (SELECT RET_VAL FROM DATAARRAYLIST WHERE RET_TYPE = :V1))';
         END IF;

         IF arrData.COUNT >= 3 THEN 
             IF arrData(2) IS NOT NULL AND arrData(3) IS NOT NULL THEN
                 strWh1 := strWh1||' AND INVTH.TRANS_DATE BETWEEN TO_DATE('''||arrData(2)||''',''DD/MM/YYYY'') AND TO_DATE('''||arrData(3)||''',''DD/MM/YYYY'')';
             END IF;
         END IF;

         IF arrData.COUNT >= 4 THEN
             P_SEANET_CONTEXT(strAttribType => 'MISC2', strAttribValue => arrData(4));
             IF arrData(4) IS NOT NULL THEN                
                 strWh1 := strWh1||' AND INVTH.PARTY_ID IN (SELECT RET_VAL FROM DATAARRAYLIST WHERE RET_TYPE = :V2)';
             ELSE
                 strWh1 := strWh1||' AND (1 = 1 OR INVTH.PARTY_ID IN (SELECT RET_VAL FROM DATAARRAYLIST WHERE RET_TYPE = :V2))';
             END IF;
         END IF;
        
         IF arrData.COUNT >= 5 THEN
             P_SEANET_CONTEXT(strAttribType => 'MISC3', strAttribValue => arrData(5));
             IF arrData(5) IS NOT NULL THEN                
                 strWh1 := strWh1||' AND INVTH.TRANS_ID IN (SELECT RET_VAL FROM DATAARRAYLIST WHERE RET_TYPE = :V3)';
             ELSE
                 strWh1 := strWh1||' AND (1 = 1 OR INVTH.TRANS_ID IN (SELECT RET_VAL FROM DATAARRAYLIST WHERE RET_TYPE = :V3))';
             END IF;
         END IF;

         IF arrData.COUNT >= 6 THEN
             P_SEANET_CONTEXT(strAttribType => 'MISC4', strAttribValue => arrData(6));
             IF arrData(6) IS NOT NULL THEN                
                 strWh1 := strWh1||' AND INVTH.LOCATION_ID IN (SELECT RET_VAL FROM DATAARRAYLIST WHERE RET_TYPE = :V4)';
             ELSE
                 strWh1 := strWh1||' AND (1 = 1 OR INVTH.LOCATION_ID IN (SELECT RET_VAL FROM DATAARRAYLIST WHERE RET_TYPE = :V4))';
             END IF;
         END IF;

         IF arrData.COUNT >= 7 THEN
             P_SEANET_CONTEXT(strAttribType => 'MISC5', strAttribValue => arrData(7));
             IF arrData(7) IS NOT NULL THEN                
                 strWh1 := strWh1||' AND TH.PARTY_ID IN (SELECT RET_VAL FROM DATAARRAYLIST WHERE RET_TYPE = :V5)';
             ELSE
                 strWh1 := strWh1||' AND (1 = 1 OR TH.PARTY_ID IN (SELECT RET_VAL FROM DATAARRAYLIST WHERE RET_TYPE = :V5))';
             END IF;
         END IF;

         IF arrData.COUNT >= 8 THEN
             P_SEANET_CONTEXT(strAttribType => 'MISC6', strAttribValue => arrData(8));
             IF arrData(8) IS NOT NULL THEN                
                 strWh1 := strWh1||' AND F_GET_ATTRIBUTE_VALUE(VD.ATTRIB_TYPE_AND_VALUE,''CATG'') IN (SELECT RET_VAL FROM DATAARRAYLIST WHERE RET_TYPE = :V6)';
             ELSE
                 strWh1 := strWh1||' AND (1 = 1 OR F_GET_ATTRIBUTE_VALUE(VD.ATTRIB_TYPE_AND_VALUE,''CATG'') IN (SELECT RET_VAL FROM DATAARRAYLIST WHERE RET_TYPE = :V6))';
             END IF;
         END IF;
        
         strSql :=
             'SELECT TRANS_DATE 
             FROM
             (
                 SELECT 
                     INVTH.TRANS_DATE 
                 FROM
                     (SELECT * FROM V_TRANS_HDR WHERE TRANS_TYPE IN (''PRI'',''GRN'') AND TRANS_SUBTYPE_ID IN (41,507)) TH, 
                     T_TRANS_ITEM_DTL TID, 
                     V_TRANS_HDR INVTH, T_TRANS_ITEM_DTL INVTID, T_STOCK_TRANS_LINK STL,
                     T_PARTY_MASTER PM, V_ITEM_VARIANT_DTL VD
                 WHERE
                     TID.VARIANT_ID = VD.VARIANT_ID AND 
                     TH.PARTY_ID = PM.PARTY_ID(+) AND
                     TID.TRANS_ID = TH.TRANS_ID(+) AND
                     STL.INWARD_TRANS_ITEM_ID = TID.TRANS_ITEM_ID AND 
                     INVTID.SRC_STOCK_ID = STL.STOCK_ID AND
                     INVTH.TRANS_ID = INVTID.TRANS_ID AND
                     INVTID.ROW_STATUS = 1 AND
                     INVTH.ROW_STATUS = 1 AND 
                     INVTH.TRANS_TYPE = ''INV'' '||strWh1||'
             )
             GROUP BY TRANS_DATE ';

         EXECUTE IMMEDIATE
         strSql
         BULK COLLECT INTO T_VARCHAR_DATA
         USING 'MISC1', 'MISC2', 'MISC3', 'MISC4', 'MISC5', 'MISC6';    

     ELSIF qryType = 'GET-INV-PARTY-(SOR_TRANS_ITEM_ID)' THEN       

         P_SEANET_CONTEXT(strAttribType => 'MISC1', strAttribValue => arrData(1));
         IF arrData(1) IS NOT NULL THEN 
             IF arrData(9) = 'SOR' THEN
                 strWh1 := strWh1||' AND INVTID.SOR_TRANS_ITEM_ID IN (SELECT RET_VAL FROM DATAARRAYLIST WHERE RET_TYPE = :V1)';
             ELSE
                 strWh1 := strWh1||' AND INVTID.TRANS_ITEM_ID IN (SELECT RET_VAL FROM DATAARRAYLIST WHERE RET_TYPE = :V1)';                
             END IF;
         ELSE
             strWh1 := strWh1||' AND (1 = 1 OR INVTID.SOR_TRANS_ITEM_ID IN (SELECT RET_VAL FROM DATAARRAYLIST WHERE RET_TYPE = :V1))';
         END IF;

         IF arrData.COUNT >= 3 THEN 
             IF arrData(2) IS NOT NULL AND arrData(3) IS NOT NULL THEN
                 strWh1 := strWh1||' AND INVTH.TRANS_DATE BETWEEN TO_DATE('''||arrData(2)||''',''DD/MM/YYYY'') AND TO_DATE('''||arrData(3)||''',''DD/MM/YYYY'')';
             END IF;
         END IF;

         IF arrData.COUNT >= 4 THEN
             P_SEANET_CONTEXT(strAttribType => 'MISC2', strAttribValue => arrData(4));
             IF arrData(4) IS NOT NULL THEN                
                 strWh1 := strWh1||' AND INVTH.PARTY_ID IN (SELECT RET_VAL FROM DATAARRAYLIST WHERE RET_TYPE = :V2)';
             ELSE
                 strWh1 := strWh1||' AND (1 = 1 OR INVTH.PARTY_ID IN (SELECT RET_VAL FROM DATAARRAYLIST WHERE RET_TYPE = :V2))';
             END IF;
         END IF;
        
         IF arrData.COUNT >= 5 THEN
             P_SEANET_CONTEXT(strAttribType => 'MISC3', strAttribValue => arrData(5));
             IF arrData(5) IS NOT NULL THEN                
                 strWh1 := strWh1||' AND INVTH.TRANS_ID IN (SELECT RET_VAL FROM DATAARRAYLIST WHERE RET_TYPE = :V3)';
             ELSE
                 strWh1 := strWh1||' AND (1 = 1 OR INVTH.TRANS_ID IN (SELECT RET_VAL FROM DATAARRAYLIST WHERE RET_TYPE = :V3))';
             END IF;
         END IF;

         IF arrData.COUNT >= 6 THEN
             P_SEANET_CONTEXT(strAttribType => 'MISC4', strAttribValue => arrData(6));
             IF arrData(6) IS NOT NULL THEN                
                 strWh1 := strWh1||' AND INVTH.LOCATION_ID IN (SELECT RET_VAL FROM DATAARRAYLIST WHERE RET_TYPE = :V4)';
             ELSE
                 strWh1 := strWh1||' AND (1 = 1 OR INVTH.LOCATION_ID IN (SELECT RET_VAL FROM DATAARRAYLIST WHERE RET_TYPE = :V4))';
             END IF;
         END IF;

         IF arrData.COUNT >= 7 THEN
             P_SEANET_CONTEXT(strAttribType => 'MISC5', strAttribValue => arrData(7));
             IF arrData(7) IS NOT NULL THEN                
                 strWh1 := strWh1||' AND TH.PARTY_ID IN (SELECT RET_VAL FROM DATAARRAYLIST WHERE RET_TYPE = :V5)';
             ELSE
                 strWh1 := strWh1||' AND (1 = 1 OR TH.PARTY_ID IN (SELECT RET_VAL FROM DATAARRAYLIST WHERE RET_TYPE = :V5))';
             END IF;
         END IF;

         IF arrData.COUNT >= 8 THEN
             P_SEANET_CONTEXT(strAttribType => 'MISC6', strAttribValue => arrData(8));
             IF arrData(8) IS NOT NULL THEN                
                 strWh1 := strWh1||' AND F_GET_ATTRIBUTE_VALUE(VD.ATTRIB_TYPE_AND_VALUE,''CATG'') IN (SELECT RET_VAL FROM DATAARRAYLIST WHERE RET_TYPE = :V6)';
             ELSE
                 strWh1 := strWh1||' AND (1 = 1 OR F_GET_ATTRIBUTE_VALUE(VD.ATTRIB_TYPE_AND_VALUE,''CATG'') IN (SELECT RET_VAL FROM DATAARRAYLIST WHERE RET_TYPE = :V6))';
             END IF;
         END IF;

         strSql :=
             'SELECT PARTY_NAME 
             FROM
             (
                 SELECT 
                     PM.PARTY_NAME
                 FROM
                     (SELECT * FROM V_TRANS_HDR WHERE TRANS_TYPE IN (''PRI'',''GRN'') AND TRANS_SUBTYPE_ID IN (41,507)) TH, 
                     T_TRANS_ITEM_DTL TID, 
                     V_TRANS_HDR INVTH, T_TRANS_ITEM_DTL INVTID, T_STOCK_TRANS_LINK STL,
                     T_PARTY_MASTER PM, V_ITEM_VARIANT_DTL VD
                 WHERE
                     TID.VARIANT_ID = VD.VARIANT_ID AND 
                     INVTH.PARTY_ID = PM.PARTY_ID AND
                     TID.TRANS_ID = TH.TRANS_ID(+) AND
                     STL.INWARD_TRANS_ITEM_ID = TID.TRANS_ITEM_ID AND 
                     INVTID.SRC_STOCK_ID = STL.STOCK_ID AND
                     INVTH.TRANS_ID = INVTID.TRANS_ID AND 
                     INVTID.ROW_STATUS = 1 AND
                     INVTH.ROW_STATUS = 1 AND 
                     INVTH.TRANS_TYPE = ''INV'' '||strWh1||'
             )
             GROUP BY PARTY_NAME ';

         EXECUTE IMMEDIATE
         strSql
         BULK COLLECT INTO T_VARCHAR_DATA
         USING 'MISC1', 'MISC2', 'MISC3', 'MISC4', 'MISC5', 'MISC6';

     ELSIF qryType = 'VARIANT_BOM_SHAPE_VALUE' THEN
         SELECT DISTINCT SIVM.SHAPE_DESC
         BULK COLLECT INTO T_VARCHAR_DATA
         FROM T_SMRY_ITEM_VARIANT_STONE SIVM,T_ITEM_VARIANT_BOM_DTL IVBD 
         WHERE IVBD.BOM_VARIANT_ID = SIVM.VARIANT_ID
         AND IVBD.MAIN_VARIANT_ID = qryValues;

     ELSIF qryType = 'VARIANT_BOM_QLTY_VALUE' THEN
         SELECT DISTINCT SIVM.QUALITY_DESC
         BULK COLLECT INTO T_VARCHAR_DATA
         FROM T_SMRY_ITEM_VARIANT_STONE SIVM,T_ITEM_VARIANT_BOM_DTL IVBD 
         WHERE IVBD.BOM_VARIANT_ID = SIVM.VARIANT_ID
         AND IVBD.MAIN_VARIANT_ID = qryValues;    
        
     ELSIF qryType = 'VARIANT_ATTRIB_VALUE' THEN
         SELECT IAM.ATTRIB_DESC
         BULK COLLECT INTO T_VARCHAR_DATA 
         FROM 
             T_ITEM_VARIANT_ATTRIB_DTL IVAD, T_ITEM_ATTRIB_CONFIG IAC,
             T_CONFIG_FIXED_DATA FD, T_ITEM_ATTRIB_MASTER IAM
         WHERE 
             IVAD.ATTRIB_ID = IAM.ATTRIB_ID AND
             IAC.ATTRIB_TYPE_ID = FD.CONFIG_ID AND
             IVAD.ITEM_ATTRIB_CONFIG_ID = IAC.ITEM_ATTRIB_CONFIG_ID AND
             FD.CONFIG_CODE = arrData(1) AND IVAD.VARIANT_ID = arrData(2);

     ELSIF qryType = 'GET_INV_DATE(SOR_TRANS_ITEM_ID)' THEN
         SELECT TH.TRANS_DATE 
         BULK COLLECT INTO T_VARCHAR_DATA
         FROM T_TRANS_HDR TH ,T_TRANS_ITEM_DTL TID 
         WHERE TH.TRANS_ID  = TID.TRANS_ID AND TID.ROW_STATUS = 1 AND TH.TRANS_TYPE = 'INV' AND TID.SOR_TRANS_ITEM_ID = qryValues; 

     ELSIF qryType = 'GET_INV_DOC(SOR_TRANS_ITEM_ID)' THEN
         SELECT TH.DOC_NO  
         BULK COLLECT INTO T_VARCHAR_DATA
         FROM T_TRANS_HDR TH ,T_TRANS_ITEM_DTL TID 
         WHERE TH.TRANS_ID  = TID.TRANS_ID AND TID.ROW_STATUS = 1 AND TH.TRANS_TYPE = 'INV' AND TID.SOR_TRANS_ITEM_ID = qryValues; 

    
     ELSIF qryType = 'GET_GOLD_MRP_RATE' THEN
     	SELECT TIBDE.TRANS_BOM_AMOUNT
         BULK COLLECT INTO T_VARCHAR_DATA
         FROM T_TRANS_ITEM_BOM_DTL TIBD,T_TRANS_ITEM_BOM_DTL_EXTD TIBDE,T_TRANS_ITEM_DTL TID,T_TRANS_HDR TH
         WHERE TH.TRANS_ID = TID.TRANS_ID
         AND TID.TRANS_ITEM_ID = TIBD.TRANS_ITEM_ID
         AND TIBD.TRANS_ITEM_BOM_ID = TIBDE.TRANS_ITEM_BOM_ID
         AND TIBD.BOM_VARIANT_ID = TO_NUMBER(arrData(1))
         AND TID.STOCK_CODE = arrData(2)
         AND TID.ROW_STATUS = 1
         AND TH.ROW_STATUS = 1
         AND TH.TRANS_TYPE = 'MRP'
         AND ROWNUM = 1;
    
     ELSIF qryType = 'GET-SALESPERSON-CODE' THEN   
         P_SEANET_CONTEXT(strAttribType => 'MISC1', strAttribValue => qryValues); 
         strWh1 := ' SELECT RET_VAL FROM DATAARRAYLIST WHERE RET_TYPE = ''MISC1'' ';
         strSql :=
         'SELECT EM.EMPLOYEE_CODE
         FROM
         T_AUTH_EMPLOYEE_MASTER EM
         WHERE EM.EMPLOYEE_TYPE_ID = 7009 AND EM.EMPLOYEE_ID IN ('||strWh1||')';

         EXECUTE IMMEDIATE
         strSql
         BULK COLLECT INTO T_VARCHAR_DATA;
    
     ELSIF qryType = 'GET-SALESPERSON-NAME' THEN   
         P_SEANET_CONTEXT(strAttribType => 'MISC1', strAttribValue => qryValues); 
         strWh1 := ' SELECT RET_VAL FROM DATAARRAYLIST WHERE RET_TYPE = ''MISC1'' ';
         strSql :=
         'SELECT EM.EMPLOYEE_NAME
         FROM
         T_AUTH_EMPLOYEE_MASTER EM
         WHERE EM.EMPLOYEE_TYPE_ID = 7009 AND EM.EMPLOYEE_ID IN ('||strWh1||')';

         EXECUTE IMMEDIATE
         strSql
         BULK COLLECT INTO T_VARCHAR_DATA;
    
     ELSIF qryType = 'GET-HELPER-CODE' THEN   
         P_SEANET_CONTEXT(strAttribType => 'MISC1', strAttribValue => qryValues); 
         strWh1 := ' SELECT RET_VAL FROM DATAARRAYLIST WHERE RET_TYPE = ''MISC1'' ';
         strSql :=
         'SELECT EM.EMPLOYEE_CODE
         FROM
         T_AUTH_EMPLOYEE_MASTER EM
         WHERE EM.EMPLOYEE_TYPE_ID = 7019 AND EM.EMPLOYEE_ID IN ('||strWh1||')';

         EXECUTE IMMEDIATE
         strSql
         BULK COLLECT INTO T_VARCHAR_DATA;
    
     ELSIF qryType = 'GET-HELPER-NAME' THEN   
         P_SEANET_CONTEXT(strAttribType => 'MISC1', strAttribValue => qryValues); 
         strWh1 := ' SELECT RET_VAL FROM DATAARRAYLIST WHERE RET_TYPE = ''MISC1'' ';
         strSql :=
         'SELECT EM.EMPLOYEE_NAME
         FROM
         T_AUTH_EMPLOYEE_MASTER EM
         WHERE EM.EMPLOYEE_TYPE_ID = 7019 AND EM.EMPLOYEE_ID IN ('||strWh1||')';

         EXECUTE IMMEDIATE
         strSql
         BULK COLLECT INTO T_VARCHAR_DATA;
    
     ELSIF qryType = 'GET-PARTYWISE-STONE-NAME' THEN 

         SELECT PML.ATTRIB_ALIAS_NAME 
         BULK COLLECT INTO T_VARCHAR_DATA
         FROM T_PARTY_MISC_LINK PML 
         WHERE 
         PML.ATTRIB_ID1 = arrData(2) AND
         PML.PARTY_ID = arrData(1) AND
         PML.LINK_TYPE = 'I';
    
     ELSIF qryType = 'GET-PARTYWISE-STONE-COLOR' THEN 

         SELECT PML.NOTES_1
         BULK COLLECT INTO T_VARCHAR_DATA
         FROM T_PARTY_MISC_LINK PML 
         WHERE 
         PML.ATTRIB_ID2 = arrData(2) AND
         PML.PARTY_ID = arrData(1) AND
         PML.LINK_TYPE = 'ST';

     ELSIF qryType = 'GET-PARTYWISE-STONE-ATTRIBUTE(TRANS_ITEM_ID)' THEN 

         SELECT  
             DISTINCT PML.ATTRIB_ALIAS_NAME 
             BULK COLLECT INTO T_VARCHAR_DATA
         FROM 
             T_TRANS_ITEM_DTL TID,T_TRANS_ITEM_BOM_DTL SB, V_ITEM_VARIANT_DTL IV,T_PARTY_MISC_LINK PML
         WHERE 
             F_GET_ATTRIBUTE_ID(IV.ATTRIB_TYPE_AND_ATTRIB_ID||'^'||IV.ATTRIB_TYPE_AND_ATTRIB_ID_A ,arrData(4)) = PML.ATTRIB_ID1 AND
             TID.TRANS_ITEM_ID = SB.TRANS_ITEM_ID AND
             PML.PARTY_ID =  arrData(3) AND
             PML.LINK_TYPE = arrData(2) AND
             SB.BOM_VARIANT_ID  = IV.VARIANT_ID (+) AND
             IV.ITEM_TYPE_ID = 1005 AND 
             SB.TRANS_ITEM_ID = arrData(1);
    
     ELSIF qryType = 'GET-PARTYWISE-STONE-ATTRIBUTE(TRANS_ITEM_BOM_ID)' THEN 

         SELECT  
             DISTINCT PML.ATTRIB_ALIAS_NAME 
             BULK COLLECT INTO T_VARCHAR_DATA
         FROM 
             T_TRANS_ITEM_BOM_DTL SB, V_ITEM_VARIANT_DTL IV,T_PARTY_MISC_LINK PML
         WHERE 
             F_GET_ATTRIBUTE_ID(IV.ATTRIB_TYPE_AND_ATTRIB_ID||'^'||IV.ATTRIB_TYPE_AND_ATTRIB_ID_A ,arrData(4)) = PML.ATTRIB_ID1 AND
             PML.PARTY_ID =  arrData(3) AND
             PML.LINK_TYPE = arrData(2) AND
             SB.BOM_VARIANT_ID  = IV.VARIANT_ID (+) AND
             IV.ITEM_TYPE_ID = 1005 AND 
             SB.TRANS_ITEM_BOM_ID = arrData(1);
    
     ELSIF qryType = 'GET-PARTYWISE-METAL-ATTRIBUTE(TRANS_ITEM_BOM_ID)' THEN 

         SELECT  
             DISTINCT PML.ATTRIB_ALIAS_NAME 
             BULK COLLECT INTO T_VARCHAR_DATA
         FROM 
             T_TRANS_ITEM_BOM_DTL SB, V_ITEM_VARIANT_DTL IV,T_PARTY_MISC_LINK PML
         WHERE 
             F_GET_ATTRIBUTE_ID(IV.ATTRIB_TYPE_AND_ATTRIB_ID||'^'||IV.ATTRIB_TYPE_AND_ATTRIB_ID_A ,arrData(4)) = PML.ATTRIB_ID1 AND
             PML.PARTY_ID =  arrData(3) AND
             PML.LINK_TYPE = arrData(2) AND
             SB.BOM_VARIANT_ID  = IV.VARIANT_ID (+) AND
             IV.ITEM_TYPE_ID IN (1003,1004) AND 
             SB.TRANS_ITEM_BOM_ID = arrData(1);
    
     ELSIF qryType = 'GET-PARTYWISE-METAL-ATTRIBUTE(TRANS_ITEM_ID)' THEN 

         SELECT  
             DISTINCT PML.ATTRIB_ALIAS_NAME 
             BULK COLLECT INTO T_VARCHAR_DATA
         FROM 
             T_TRANS_ITEM_BOM_DTL SB, V_ITEM_VARIANT_DTL IV,T_PARTY_MISC_LINK PML
         WHERE 
             F_GET_ATTRIBUTE_ID(IV.ATTRIB_TYPE_AND_ATTRIB_ID||'^'||IV.ATTRIB_TYPE_AND_ATTRIB_ID_A ,arrData(4)) = PML.ATTRIB_ID1 AND
             PML.PARTY_ID =  arrData(3) AND
             PML.LINK_TYPE = arrData(2) AND
             SB.BOM_VARIANT_ID  = IV.VARIANT_ID (+) AND
             IV.ITEM_TYPE_ID IN (1003,1004) AND 
             SB.TRANS_ITEM_ID = arrData(1);
             
     ELSIF qryType = 'GET-FINENESS-MAPPING(TRANS_ITEM_ID)' THEN 

         SELECT  
             DISTINCT PML.NOTES_1 
             BULK COLLECT INTO T_VARCHAR_DATA
         FROM 
             T_TRANS_ITEM_BOM_DTL SB, V_ITEM_VARIANT_DTL IV,T_PARTY_MISC_LINK PML
         WHERE 
             F_GET_ATTRIBUTE_ID(IV.ATTRIB_TYPE_AND_ATTRIB_ID||'^'||IV.ATTRIB_TYPE_AND_ATTRIB_ID_A ,arrData(4)) = PML.ATTRIB_ID1 AND
             PML.PARTY_ID =  arrData(3) AND
             PML.LINK_TYPE = arrData(2) AND
             SB.BOM_VARIANT_ID  = IV.VARIANT_ID (+) AND
             IV.ITEM_TYPE_ID IN (1004) AND 
             SB.TRANS_ITEM_ID = arrData(1);
             
     ELSIF qryType = 'GET-PARTYWISE-GOLD-ATTRIBUTE(TRANS_ITEM_ID)' THEN 

         SELECT  
             DISTINCT PML.ATTRIB_ALIAS_NAME 
             BULK COLLECT INTO T_VARCHAR_DATA
         FROM 
             T_TRANS_ITEM_BOM_DTL SB, V_ITEM_VARIANT_DTL IV,T_PARTY_MISC_LINK PML
         WHERE 
             F_GET_ATTRIBUTE_ID(IV.ATTRIB_TYPE_AND_ATTRIB_ID||'^'||IV.ATTRIB_TYPE_AND_ATTRIB_ID_A ,arrData(4)) = PML.ATTRIB_ID1 AND
             PML.PARTY_ID =  arrData(3) AND
             PML.LINK_TYPE = arrData(2) AND
             SB.BOM_VARIANT_ID  = IV.VARIANT_ID (+) AND
             IV.ITEM_GROUP_ID = 1501 AND 
             SB.TRANS_ITEM_ID = arrData(1);        

     ELSIF qryType = 'GET-PARTYWISE-FINDING-ATTRIBUTE(TRANS_ITEM_ID)' THEN 

         SELECT  
             DISTINCT PML.ATTRIB_ALIAS_NAME 
             BULK COLLECT INTO T_VARCHAR_DATA
         FROM 
             T_TRANS_ITEM_BOM_DTL SB, V_ITEM_VARIANT_DTL IV,T_PARTY_MISC_LINK PML
         WHERE 
             F_GET_ATTRIBUTE_ID(IV.ATTRIB_TYPE_AND_ATTRIB_ID||'^'||IV.ATTRIB_TYPE_AND_ATTRIB_ID_A ,arrData(4)) = PML.ATTRIB_ID1 AND
             PML.PARTY_ID =  arrData(3) AND
             PML.LINK_TYPE = arrData(2) AND
             SB.BOM_VARIANT_ID  = IV.VARIANT_ID (+) AND
             IV.ITEM_TYPE_ID = 1003 AND 
             SB.TRANS_ITEM_ID = arrData(1);

     ELSIF qryType = 'GET-FINDING-ATTRIBUTE(TRANSITEMID)' THEN 
         SELECT DISTINCT F_GET_ATTRIBUTE(VD.ATTRIB_TYPE_AND_VALUE||'^'||VD.ATTRIB_TYPE_AND_VALUE_A,arrData(2))
         BULK COLLECT INTO T_VARCHAR_DATA
         FROM T_TRANS_ITEM_BOM_DTL TIB, V_ITEM_VARIANT_DTL VD
         WHERE
         TIB.BOM_VARIANT_ID = VD.VARIANT_ID AND        
         VD.ITEM_TYPE_ID = 1003 AND
         TIB.TRANS_ITEM_ID = arrData(1);

     ELSIF qryType = 'GET-PARTYWISE-STYLE-ATTRIB-NOTES' THEN         
         SELECT  
             DISTINCT PML.NOTES_1 
             BULK COLLECT INTO T_VARCHAR_DATA
         FROM 
             T_PARTY_MISC_LINK PML, T_TRANS_ITEM_DTL TID, V_ITEM_VARIANT_DTL IV
         WHERE 
             F_GET_ATTRIBUTE_ID(IV.ATTRIB_TYPE_AND_ATTRIB_ID||'^'||IV.ATTRIB_TYPE_AND_ATTRIB_ID_A ,arrData(3)) = PML.ATTRIB_ID1 AND
             TID.VARIANT_ID  = IV.VARIANT_ID AND
             TID.TRANS_ITEM_ID = arrData(4) AND
             IV.ITEM_TYPE_ID = 1001 AND 
             PML.LINK_TYPE = arrData(2) AND
             PML.PARTY_ID =  arrData(1);
             
     ELSIF qryType = 'GET-PARTYWISE-STYLE-ATTRIB' THEN         
         SELECT  
             DISTINCT PML.ATTRIB_ALIAS_NAME 
             BULK COLLECT INTO T_VARCHAR_DATA
         FROM 
             T_PARTY_MISC_LINK PML, T_TRANS_ITEM_DTL TID, V_ITEM_VARIANT_DTL IV
         WHERE 
             F_GET_ATTRIBUTE_ID(IV.ATTRIB_TYPE_AND_ATTRIB_ID||'^'||IV.ATTRIB_TYPE_AND_ATTRIB_ID_A ,arrData(3)) = PML.ATTRIB_ID1 AND
             TID.VARIANT_ID  = IV.VARIANT_ID AND
             TID.TRANS_ITEM_ID = arrData(4) AND
             IV.ITEM_TYPE_ID = 1001 AND 
             PML.LINK_TYPE = arrData(2) AND
             PML.PARTY_ID =  arrData(1);  

     ELSIF qryType = 'CLS-ITEM-NAME' THEN
    
         SELECT DISTINCT VD.ITEM_NAME
         BULK COLLECT INTO T_VARCHAR_DATA
         FROM V_ITEM_VARIANT_DTL VD,T_STOCK_BOM_DTL SBD
         WHERE SBD.BOM_VARIANT_ID = VD.VARIANT_ID 
         AND VD.ITEM_TYPE_ID = 1005
         AND VD.ITEM_GROUP_ID <> 1504
         AND SBD.QUANTITY >0
         AND SBD.STOCK_ID = arrData(1);
    
     ELSIF qryType = 'CLS-ITEM-NAME-TRANS' THEN
    
         SELECT DISTINCT VD.ITEM_NAME
         BULK COLLECT INTO T_VARCHAR_DATA
         FROM V_ITEM_VARIANT_DTL VD,T_TRANS_ITEM_BOM_DTL TIBD, T_TRANS_ITEM_DTL TID
         WHERE TIBD.BOM_VARIANT_ID = VD.VARIANT_ID
         AND TIBD.TRANS_ITEM_ID = TID.TRANS_ITEM_ID 
         AND VD.ITEM_TYPE_ID = 1005
         AND VD.ITEM_GROUP_ID <> 1504
         AND TID.ROW_STATUS = 1
         AND TID.TRANS_ITEM_ID = arrData(1);
             
     ELSIF qryType = 'GET-PARTYWISE-ITEM-GROUP' THEN 

         SELECT PML.ATTRIB_ALIAS_NAME 
         BULK COLLECT INTO T_VARCHAR_DATA
         FROM T_PARTY_MISC_LINK PML 
         WHERE 
         PML.ITEM_GROUP_ID = arrData(2) AND
         PML.PARTY_ID = arrData(1) AND
         PML.LINK_TYPE = 'IG';
    
     ELSIF qryType = 'GET-PARTYWISE-ATTRIBUTE' THEN 

         SELECT PML.ATTRIB_ALIAS_NAME 
         BULK COLLECT INTO T_VARCHAR_DATA
         FROM T_PARTY_MISC_LINK PML
         WHERE
         PML.ATTRIB_ID1 = arrData(3) AND
         PML.PARTY_ID = arrData(2) AND
         PML.LINK_TYPE = arrData(1);
    
     ELSIF qryType = 'GET-PARTYWISE-INTQLTY' THEN 

         SELECT  
             DISTINCT PML.REMITT_INSTRUCTION
             BULK COLLECT INTO T_VARCHAR_DATA
         FROM 
             T_TRANS_ITEM_BOM_DTL SB, V_ITEM_VARIANT_DTL IV,T_PARTY_MISC_LINK PML
         WHERE 
             F_GET_ATTRIBUTE_ID(IV.ATTRIB_TYPE_AND_ATTRIB_ID||'^'||IV.ATTRIB_TYPE_AND_ATTRIB_ID_A ,arrData(3)) = PML.ATTRIB_ID1 AND
             PML.PARTY_ID =  arrData(2) AND
             PML.LINK_TYPE = 'QU' AND
             SB.BOM_VARIANT_ID  = IV.VARIANT_ID (+) AND
             IV.ITEM_TYPE_ID = 1005 AND 
             SB.TRANS_ITEM_BOM_ID = arrData(1);
    
     ELSIF qryType = 'GET-INTQLTY(TRANS_ITEM_ID)' THEN 

         SELECT  
             DISTINCT PML.VARIANT_NAME
             BULK COLLECT INTO T_VARCHAR_DATA
         FROM 
             T_TRANS_ITEM_BOM_DTL SB, V_ITEM_VARIANT_RTN_DTL IV, T_PARTY_MISC_LINK PML
         WHERE 
             F_GET_ATTRIBUTE_ID(IV.ATTRIB_TYPE_AND_ATTRIB_ID||'^'||IV.ATTRIB_TYPE_AND_ATTRIB_ID_A ,11007) = PML.ATTRIB_ID1 AND
             PML.LINK_TYPE = 'IQ' AND
             SB.BOM_VARIANT_ID  = IV.VARIANT_ID(+) AND
             IV.ITEM_TYPE_ID = 1005 AND 
             SB.TRANS_ITEM_ID = arrData(1);

     ELSIF qryType = 'GET-PARTYWISE-MINMAX_WT' THEN 
         SELECT DECODE(arrData(1),'MIN',MIN(PML.ADD_FLD1),'MAX', MAX(PML.ADD_FLD2),0) 
         BULK COLLECT INTO T_VARCHAR_DATA
         FROM T_PARTY_MISC_LINK PML 
         WHERE 
         TO_NUMBER(PML.REMITT_INSTRUCTION) >= arrData(2) AND
         TO_NUMBER(PML.ATTRIB_ALIAS_NAME) <= arrData(2) AND
         PML.PARTY_ID = arrData(3) AND
         PML.LINK_TYPE = 'SW';    

     ELSIF qryType = 'FETCH-KNOCK-OFF-BILL-NO' THEN 
         SELECT FTBH.BILL_NO 
         BULK COLLECT INTO T_VARCHAR_DATA
         FROM T_FA_TRANS_RECPAY_DTL FTRD, T_FA_TRANS_BILL_HDR FTBH 
         WHERE FTRD.FA_TRANS_BILL_ID = FTBH.FA_TRANS_BILL_ID AND FTRD.RECPAY_TYPE_ID = 30804 AND FTRD.FA_TRANS_DTL_ID = arrData(1) AND FTRD.ROW_STATUS > 0;

     ELSIF qryType = 'FETCH-KNOCK-OFF-BILL-DATE' THEN 
         SELECT TO_CHAR(FTBH.BILL_DATE, 'dd/MM/yyyy')
         BULK COLLECT INTO T_VARCHAR_DATA
         FROM T_FA_TRANS_RECPAY_DTL FTRD, T_FA_TRANS_BILL_HDR FTBH 
         WHERE FTRD.FA_TRANS_BILL_ID = FTBH.FA_TRANS_BILL_ID AND FTRD.RECPAY_TYPE_ID = 30804 AND FTRD.FA_TRANS_DTL_ID = arrData(1) AND FTRD.ROW_STATUS > 0;

     ELSIF qryType = 'GET-CIN-STOCK-VALUE' THEN 
         SELECT  
             SUM(SB.QUANTITY * CASE WHEN SBTL.INWARD_TRANS_ITEM_BOM_ID >0 THEN BOMEXTD.TRANS_BOM_RATE ELSE EXTD.TRANS_RATE END) 
             BULK COLLECT INTO T_VARCHAR_DATA
         FROM 
             T_STOCK_BOM_DTL SB,T_STOCK_BOM_TRANS_LINK SBTL,
             T_TRANS_ITEM_BOM_DTL_EXTD BOMEXTD,
             T_TRANS_ITEM_DTL_EXTD EXTD
         WHERE
             SBTL.INWARD_TRANS_ITEM_BOM_ID = BOMEXTD.TRANS_ITEM_BOM_ID
             AND SBTL.INWARD_TRANS_ITEM_ID = EXTD.TRANS_ITEM_ID
             AND SB.STOCK_BOM_ID = SBTL.STOCK_BOM_ID 
             AND SB.STOCK_ID = arrData(1);

     ELSIF qryType = 'FETCH-COMMODITY-CODE' THEN 
         SELECT CASE WHEN F_GET_ATTRIBUTE_VALUE(IVD.ATTRIB_TYPE_AND_VALUE||'^'||IVD.ATTRIB_TYPE_AND_VALUE_A, 'CATG') = 'SOLITAIRE' THEN '103' ELSE '102' END
         BULK COLLECT INTO T_VARCHAR_DATA
         FROM T_TRANS_ITEM_DTL TID, V_ITEM_VARIANT_RTN_DTL IVD
         WHERE TID.VARIANT_ID = IVD.VARIANT_ID AND TID.TRANS_ID = arrData(1) AND TID.ROW_STATUS = 1 AND ROWNUM = 1;

     ELSIF qryType = 'GET-KARAT-NUM' THEN 
        SELECT 
            DISTINCT TO_NUMBER(REGEXP_REPLACE(F_GET_ATTRIBUTE_VALUE(VD.ATTRIB_TYPE_AND_VALUE,'KT'),'[^0-9,.]')) AS KARAT
        BULK COLLECT INTO T_VARCHAR_DATA
        FROM T_TRANS_ITEM_BOM_DTL TIB, V_ITEM_VARIANT_DTL VD
        WHERE 
            TIB.BOM_VARIANT_ID = VD.VARIANT_ID AND 
            VD.ITEM_TYPE_ID = 1004 AND
            TIB.TRANS_ITEM_ID = arrData(1);
    
    ELSIF qryType = 'GET-STOCK_CODE(CERTIFICATE_NO)' THEN 
     
        SELECT STOCK_CODE
        BULK COLLECT INTO T_VARCHAR_DATA 
        FROM (
        SELECT  T.STOCK_CODE   
        FROM T_STOCK T ,T_STOCK_CERTIFICATE_DTL SBD , T_ITEM_VARIANT_MASTER IVM    
        WHERE SBD.STOCK_ID = T.STOCK_ID   
              AND SBD.CERTIFICATE_ID = IVM.VARIANT_ID
              AND T.STOCK_CODE IS NOT NULL 
              AND IVM.VARIANT_NAME =ARRDATA(1)
        UNION ALL
        SELECT  SBD.STOCK_CODE   
        FROM T_STOCK_BOM_DTL SBD ,T_STOCK_BOM_CERTIFICATE_DTL SBCD , T_ITEM_VARIANT_MASTER IVM    
        WHERE SBCD.STOCK_BOM_ID = SBD.STOCK_BOM_ID   
              AND SBCD.CERTIFICATE_ID = IVM.VARIANT_ID
              AND SBD.STOCK_CODE IS NOT NULL
              AND IVM.VARIANT_NAME =ARRDATA(1)
        )WHERE ROWNUM = 1 ; 

    ELSIF qryType = 'GET-ITEM-NAME(CERTIFICATE_NO)' THEN 
      
        SELECT ITEM_NAME  
        BULK COLLECT INTO T_VARCHAR_DATA 
        FROM ( 
        SELECT T.STOCK_CODE AS ITEM_NAME     
        FROM T_STOCK_BOM_DTL SBD ,T_STOCK_BOM_CERTIFICATE_DTL SBCD ,T_STOCK T, T_ITEM_VARIANT_MASTER IVM    
        WHERE SBCD.STOCK_BOM_ID = SBD.STOCK_BOM_ID   
              AND SBCD.CERTIFICATE_ID = IVM.VARIANT_ID
              AND SBD.BOM_VARIANT_ID > 0
              AND SBD.STOCK_ID = T.STOCK_ID
              AND T.STOCK_CODE IS NOT NULL 
              AND IVM.VARIANT_NAME = ARRDATA(1)
        ) WHERE ROWNUM = 1 ;

     ELSIF qryType = 'GET-CIN-STOCK-BOM-VALUE' THEN 
        SELECT  
            'RATE|'||CASE WHEN SBTL.INWARD_TRANS_ITEM_BOM_ID >0 THEN BOMEXTD.TRANS_BOM_RATE ELSE EXTD.TRANS_RATE END||'^'||
            'VAL|'||(SB.QUANTITY * CASE WHEN SBTL.INWARD_TRANS_ITEM_BOM_ID >0 THEN BOMEXTD.TRANS_BOM_RATE ELSE EXTD.TRANS_RATE END)
            BULK COLLECT INTO T_VARCHAR_DATA 
        FROM 
            T_STOCK_BOM_DTL SB,T_STOCK_BOM_TRANS_LINK SBTL,
            T_TRANS_ITEM_BOM_DTL_EXTD BOMEXTD,
            T_TRANS_ITEM_DTL_EXTD EXTD
        WHERE
            SBTL.INWARD_TRANS_ITEM_BOM_ID = BOMEXTD.TRANS_ITEM_BOM_ID
            AND SBTL.INWARD_TRANS_ITEM_ID = EXTD.TRANS_ITEM_ID
            AND SB.STOCK_BOM_ID = SBTL.STOCK_BOM_ID
            AND SB.STOCK_BOM_ID = arrData(1);

    ELSIF qryType = 'GET-PO-NO(REF_TRANS_ID)' THEN
        SELECT THO.BILL_NO  
        BULK COLLECT INTO T_VARCHAR_DATA
        FROM T_TRANS_HDR TH ,T_TRANS_HDR_OTHERS THO  
        WHERE TH.ROW_STATUS = 1 
            AND TH.TRANS_ID = THO.TRANS_ID  
            AND TH.TRANS_ID = qryValues
        GROUP BY THO.BILL_NO ; 
  
    ELSIF qryType = 'GET-INV-TRANS-DATE(STOCK-CODE)' THEN
    
        SELECT TRANS_DATE BULK COLLECT INTO T_VARCHAR_DATA
        FROM 
            (SELECT TO_DATE(TO_CHAR(TH.TRANS_DATE,'DD/MM/YYYY'),'DD/MM/YYYY') AS TRANS_DATE  
            FROM T_TRANS_HDR TH , T_TRANS_ITEM_DTL TID 
            WHERE TID.TRANS_ID = TH.TRANS_ID AND TH.TRANS_TYPE = 'INV' AND TID.ROW_STATUS = 1 
                  AND TID.STOCK_CODE = qryValues
            GROUP BY TH.DOC_NO,TH.TRANS_DATE, TID.VARIANT_ID , TH.TRANS_ID ,TID.STOCK_CODE 
            ORDER BY TH.TRANS_ID DESC 
            ) WHERE ROWNUM = 1 ; 
            
    ELSIF qryType = 'GET-INV-DOC-NO(STOCK-CODE)' THEN       
        SELECT DOC_NO BULK COLLECT INTO T_VARCHAR_DATA
        FROM 
            (SELECT TH.DOC_NO   
            FROM T_TRANS_HDR TH , T_TRANS_ITEM_DTL TID 
            WHERE TID.TRANS_ID = TH.TRANS_ID AND TH.TRANS_TYPE = 'INV' AND TID.ROW_STATUS = 1 AND TID.STOCK_CODE = qryValues  
            GROUP BY TH.DOC_NO,TH.TRANS_DATE, TID.VARIANT_ID , TH.TRANS_ID ,TID.STOCK_CODE 
            ORDER BY TH.TRANS_ID DESC 
            ) WHERE ROWNUM = 1 ; 

    ELSIF qryType = 'GET-SIZES-FOR-CATEGORY' THEN
        SELECT IAM.ATTRIB_DESC
        BULK COLLECT INTO T_VARCHAR_DATA
        FROM T_ITEM_ATTRIB_MASTER IAM
        WHERE IAM.PATTRIB_ID = TO_NUMBER(qryValues)
        AND IAM.ATTRIB_TYPE_ID = 11002;       
    
    ELSIF qryType = 'GET-PRODUCTSIZE(TRANSITEMID)' THEN
         SELECT IAM.ATTRIB_DESC
         BULK COLLECT INTO T_VARCHAR_DATA   
         FROM T_TRANS_ITEM_ATTRIB_DTL TIAD, T_ITEM_ATTRIB_MASTER IAM 
         WHERE TIAD.ATTRIB_ID = IAM.ATTRIB_ID AND 
               TIAD.ATTRIB_TYPE_ID(+) = 11201 AND 
               TIAD.TRANS_ITEM_ID = qryValues ;  
        

    
    ELSIF qryType = 'GET-LAST-PAID-AMT' THEN
        SELECT LOCAL_AMT
        BULK COLLECT INTO T_VARCHAR_DATA
        FROM (
              SELECT FTD.LOCAL_AMT FROM T_FA_TRANS_DTL FTD, T_FA_TRANS_HDR FTH
              WHERE FTD.FA_TRANS_ID = FTH.FA_TRANS_ID AND FTH.FA_TRANS_TYPE = 'PAY' AND FTH.VERIFIED_IND = 1 AND FTD.ROW_STATUS = 1 AND FTD.FLAG = 0 AND 
                    FTD.ACCOUNT_ID = arrData(1) AND FTH.FA_TRANS_ID < arrData(2) AND FTD.LOCATION_ID = arrData(3)
              ORDER BY FTH.FA_TRANS_ID DESC
             )
        WHERE ROWNUM = 1;

     ELSIF qryType = 'STOCK_BOM_METAL_KARAT_CLR' THEN
         SELECT DISTINCT SIVM.KARAT_CODE||' / '||SIVM.COLOR_CODE
         BULK COLLECT INTO T_VARCHAR_DATA
         FROM T_SMRY_ITEM_VARIANT_METAL SIVM,T_STOCK_BOM_DTL SB 
         WHERE SB.BOM_VARIANT_ID = SIVM.VARIANT_ID
         AND SB.STOCK_ID = qryValues;
     
    ELSIF qryType = 'SHAPEWISE_POINTER' THEN

        SELECT PML.ADD_FLD1 
        BULK COLLECT INTO T_VARCHAR_DATA
        FROM T_PARTY_MISC_LINK PML
        WHERE
        arrData(2) BETWEEN TO_NUMBER(PML.ATTRIB_ALIAS_NAME) AND TO_NUMBER(PML.REMITT_INSTRUCTION) 
        AND PML.ATTRIB_ID1 = arrData(1) 
        AND PML.LINK_TYPE = 'PT';
        
    ELSIF qryType = 'TRANSFORMULA_FOR_IJD' THEN
 
        SELECT SUM(TFD.ROW_VALUE) BULK COLLECT INTO T_VARCHAR_DATA
        FROM T_TRANS_FORMULA_DTL TFD, T_FORMULA_PROCEDURE_DTL FPD 
        WHERE TFD.PROCEDURE_ID = FPD.PROCEDURE_ID 
              AND FPD.ROW_TYPE_ID NOT IN (1082,1015 ,1008) 
              AND TFD.ROW_VALUE <> 0 
              AND TFD.ROW_NO = FPD.ROW_NO(+) 
              AND TFD.TRANS_ID =  arrData(1) ;
              
    ELSIF qryType = 'GET_PROMOCODE(TRANS_ID)' THEN  
        SELECT DATA BULK COLLECT INTO T_VARCHAR_DATA
        FROM
        (
            SELECT 
                TID.TRANS_ID,SFD.CONFIG_VALUE||' : '||LISTAGG_CLOB(SPL.CODE) AS DATA
            FROM 
                T_TRANS_ITEM_DTL TID, T_TRANS_ITEM_FORMULA_DTL TIFD, T_TRANS_ITEM_FORMULA_SCHEME TIFS, T_SCHEME_MASTER SM, T_SCHEME_PARTY_LINK_HDR SPL, T_CONFIG_FIXED_DATA SFD
            WHERE 
                SM.SCHEME_TYPE_ID = SFD.CONFIG_ID
                AND SPL.SCHEME_ID = SM.SCHEME_ID 
                AND TIFS.SCHEME_HDR_ID = SPL.SPL_HDR_ID
                AND TIFD.TRANS_ITEM_ID  = TID.TRANS_ITEM_ID
                AND TIFS.TRANS_ITEM_FORMULA_DTL_ID = TIFD.TRANS_ITEM_FORMULA_DTL_ID
                AND TID.TRANS_ID = arrData(1) 
            GROUP BY TID.TRANS_ID,SFD.CONFIG_VALUE
        ) ; 
         
    ELSIF qryType = 'GET_ORDER(REF_TRANS_ID)' THEN   
        SELECT DOC_NO BULK COLLECT INTO T_VARCHAR_DATA
        FROM T_TRANS_HDR TH,T_TRANS_ITEM_DTL TID   
        WHERE TH.TRANS_ID = TID.TRANS_ID
              AND TH.TRANS_TYPE = 'SOR' 
              AND TID.ROW_STATUS = 1
              AND TID.TRANS_ITEM_ID =arrData(1)
        GROUP BY DOC_NO ;     
        
    ELSIF qryType = 'GET_FINDING_ITEM_NAME(TRANS_ITEM_ID)' THEN       
        SELECT IV.ITEM_NAME BULK COLLECT INTO T_VARCHAR_DATA
        FROM  T_TRANS_ITEM_BOM_DTL TIBD , V_ITEM_VARIANT_RTN_DTL IV  
        WHERE TIBD.BOM_VARIANT_ID = IV.VARIANT_ID
              AND IV.ITEM_TYPE_ID = 1003  
              AND TIBD.TRANS_ITEM_ID =arrData(1) ; 
    
    ELSIF qryType = 'GET_FINDING_VARIANT_NAME(TRANS_ITEM_ID)' THEN  
        SELECT IV.VARIANT_NAME BULK COLLECT INTO T_VARCHAR_DATA
        FROM T_TRANS_ITEM_BOM_DTL TIBD , V_ITEM_VARIANT_RTN_DTL IV  
        WHERE TIBD.BOM_VARIANT_ID = IV.VARIANT_ID
              AND IV.ITEM_TYPE_ID = 1003    
              AND TIBD.TRANS_ITEM_ID = arrData(1) ;
              
    ELSIF qryType = 'GET_FINDING_REQ(TRANS_ITEM_ID)' THEN 
        
        BEGIN
            SELECT 'Y' INTO strTemp 
            FROM T_TRANS_ITEM_DTL TID, T_TRANS_HDR TH ,V_ITEM_VARIANT_RTN_DTL IV   
            WHERE TH.TRANS_ID = TID.TRANS_ID
                AND TID.VARIANT_ID = IV.VARIANT_ID 
                AND IV.ITEM_TYPE_ID = 1003   
                AND TID.SOR_TRANS_ITEM_ID = arrData(1)
                AND TH.TRANS_SUBTYPE_ID = 594
                AND TID.ROW_STATUS = 1
                AND TH.TRANS_TYPE = 'PRQ'
                AND TH.ROW_STATUS = 1 ; 
        EXCEPTION
            WHEN TOO_MANY_ROWS THEN 
                strTemp:= 'Y' ;
            WHEN OTHERS THEN 
                strTemp:= 'N' ; 
        END;
        
         RETURN strTemp;
         
         
    ELSIF qryType = 'GET_FINDING_SBK_QTY(TRANS_ITEM_ID)' THEN 
        
       SELECT SUM(PCS) INTO strTemp
        FROM 
        (
        SELECT ROUND(NVL(SUM(DECODE(IV.ITEM_STOCK_UOM_CODE,'PCS',TID.QUANTITY,TID.QUANTITY*TID.CONVERSION_FACTOR)),0))  AS PCS
        FROM T_TRANS_ITEM_DTL TID, T_TRANS_HDR TH ,V_ITEM_VARIANT_RTN_DTL IV   
        WHERE TH.TRANS_ID = TID.TRANS_ID
            AND TID.VARIANT_ID = IV.VARIANT_ID 
            AND IV.ITEM_TYPE_ID = 1003   
            AND TID.SOR_TRANS_ITEM_ID = arrData(1)
            AND TID.ROW_STATUS = 1
            AND TH.TRANS_TYPE = 'SBK'
            AND TH.ROW_STATUS = 1  
        UNION ALL
        SELECT ROUND(NVL(SUM(DECODE(IV.ITEM_STOCK_UOM_CODE,'PCS',TID.QUANTITY,TID.QUANTITY*TID.CONVERSION_FACTOR)),0))*-1   AS PCS 
        FROM T_TRANS_ITEM_DTL TID, T_TRANS_HDR TH ,V_ITEM_VARIANT_RTN_DTL IV   
        WHERE TH.TRANS_ID = TID.TRANS_ID
            AND TID.VARIANT_ID = IV.VARIANT_ID 
            AND IV.ITEM_TYPE_ID = 1003   
            AND TID.SOR_TRANS_ITEM_ID = arrData(1)
            AND TID.ROW_STATUS = 1
            AND TH.TRANS_TYPE = 'URS'
            AND TH.ROW_STATUS = 1 
        )    ;
        RETURN strTemp;
           
           
    ELSIF qryType = 'GET_FINDING_SBK(TRANS_ITEM_ID)' THEN   
        
        BEGIN
            SELECT 'Y' INTO strTemp 
            FROM T_TRANS_ITEM_DTL TID, T_TRANS_HDR TH ,V_ITEM_VARIANT_RTN_DTL IV   
            WHERE TH.TRANS_ID = TID.TRANS_ID
                AND TID.VARIANT_ID = IV.VARIANT_ID 
                AND IV.ITEM_TYPE_ID = 1003   
                AND TID.SOR_TRANS_ITEM_ID = arrData(1) 
                AND TID.ROW_STATUS = 1
                AND TH.TRANS_TYPE = 'SBK'
                AND TH.ROW_STATUS = 1 ; 
        EXCEPTION
            WHEN TOO_MANY_ROWS THEN 
                strTemp:= 'Y' ;
            WHEN OTHERS THEN 
                strTemp:= 'N' ; 
        END;
        
         RETURN strTemp; 
    
    ELSIF qryType = 'GET_WCGROUP(SOR_TRANS_ITEM_ID)' THEN  
        SELECT WCGRP_NAME||'('||QTY||')'  BULK COLLECT INTO T_VARCHAR_DATA
        FROM (
        SELECT WGM.WCGROUP_NAME AS WCGRP_NAME,SUM(SBD.QUANTITY) AS QTY   
        FROM T_STOCK_BATCH_DTL SBD , T_STOCK_BATCH_TRANS_LINK SBTL ,T_WORKCENTER_GROUP_MASTER WGM 
        WHERE SBD.WCGROUP_ID = WGM.WCGROUP_ID 
              AND SBD.BATCH_ID = SBTL.BATCH_ID 
              AND SBD.BATCH_TYPE_ID = 1
              AND SBD.ROW_STATUS = 1 
              AND SBTL.SOR_TRANS_ITEM_ID = ARRDATA(1) 
        GROUP BY WGM.WCGROUP_NAME  
            ); 
            
    ELSIF qryType = 'GET_SESSION_INFO_USER_(BATCH_ID)' THEN          
        SELECT  EMP.EMPLOYEE_NAME  BULK COLLECT INTO T_VARCHAR_DATA
        FROM  T_AUTH_EMPLOYEE_MASTER EMP,T_SESSION_INFO VSI , T_TRANS_HDR TH ,T_STOCK_BATCH_DTL SBD , T_TRANS_ITEM_DTL TID 
        WHERE 
            EMP.EMPLOYEE_ID = VSI.EMPLOYEE_ID
            AND SBD.BATCH_ID = TID.DEST_BATCH_ID 
            AND TID.TRANS_ID = TH.TRANS_ID 
            AND TH.CREATED_SESSION = VSI.SESSION_ID 
            AND SBD.BATCH_TYPE_ID = 1   
            AND TID.ROW_STATUS = 1  
            AND TH.TRANS_TYPE = 'BAG'
            AND TID.DEST_BATCH_ID = ARRDATA(1)
        GROUP BY  EMP.EMPLOYEE_NAME  ;
        
    ELSIF qryType = 'GET_SESSION_INFO_TIME(BATCH_ID)' THEN          
        SELECT  TO_CHAR(TH.ENTRY_DATE, 'DD-MM-YYYY HH:MI:SS')  BULK COLLECT INTO T_VARCHAR_DATA
        FROM T_TRANS_HDR TH ,T_STOCK_BATCH_DTL SBD , T_TRANS_ITEM_DTL TID 
        WHERE SBD.BATCH_ID = TID.DEST_BATCH_ID 
              AND TID.TRANS_ID = TH.TRANS_ID 
              AND SBD.BATCH_TYPE_ID = 1   
              AND TID.ROW_STATUS = 1  
              AND TH.TRANS_TYPE = 'BAG'
              AND TID.DEST_BATCH_ID = ARRDATA(1)
        GROUP BY  TH.ENTRY_DATE ;
            
    ELSIF qryType = 'GET-PARENT-STOCK-CODE' THEN
 	    BEGIN
            SELECT PSG.STOCK_CODE
            BULK COLLECT INTO T_VARCHAR_DATA
            FROM T_STOCK_GROUP PSG
            WHERE 
            PSG.MAIN_ITEM_IND = 1 AND
            PSG.GROUP_CODE IN (SELECT GROUP_CODE FROM T_STOCK_GROUP WHERE STOCK_CODE = arrData(1));
        EXCEPTION
         	WHEN NO_DATA_FOUND THEN
             	strReturn := NULL;
        END;
        
    ELSIF qryType = 'GET-FA_BILL_HDR(BILL_NO)' THEN
        SELECT BILL_NO BULK COLLECT INTO T_VARCHAR_DATA FROM T_FA_TRANS_BILL_HDR WHERE FA_TRANS_ID =  arrData(1) ;

    ELSIF qryType = 'GET-FA-TRANS-BILL-NO(FA_TRANS_DTL_ID)' THEN
        SELECT BILL_NO BULK COLLECT INTO T_VARCHAR_DATA FROM T_FA_TRANS_BILL_HDR WHERE FA_TRANS_DTL_ID = arrData(1);

    ELSIF qryType = 'GET-PARTYWISE-FINDING-STYLE#' THEN         
        SELECT  
            DISTINCT PML.NOTES_1 
            BULK COLLECT INTO T_VARCHAR_DATA
        FROM 
            T_PARTY_MISC_LINK PML, T_TRANS_ITEM_DTL TID, V_ITEM_VARIANT_DTL IV
        WHERE 
            TID.VARIANT_ID  = IV.VARIANT_ID AND
            TID.TRANS_ITEM_ID = arrData(2) AND
            IV.ITEM_TYPE_ID = 1003 AND 
            PML.LINK_TYPE = 'FN' AND
            PML.PARTY_ID =  arrData(1);

     ELSIF qryType = 'GET-CATEGORY-SUBCATEGORY-MAPPING' THEN         
         SELECT  
             DISTINCT PML.ATTRIB_ALIAS_NAME 
             BULK COLLECT INTO T_VARCHAR_DATA
         FROM 
             T_PARTY_MISC_LINK PML, T_TRANS_ITEM_DTL TID, V_ITEM_VARIANT_DTL IV
         WHERE 
             F_GET_ATTRIBUTE_ID(IV.ATTRIB_TYPE_AND_ATTRIB_ID||'^'||IV.ATTRIB_TYPE_AND_ATTRIB_ID_A,11149) = PML.ATTRIB_ID2 AND
             F_GET_ATTRIBUTE_ID(IV.ATTRIB_TYPE_AND_ATTRIB_ID||'^'||IV.ATTRIB_TYPE_AND_ATTRIB_ID_A,11001) = PML.ATTRIB_ID1 AND
             TID.VARIANT_ID  = IV.VARIANT_ID AND
             TID.TRANS_ITEM_ID = arrData(2) AND
             IV.ITEM_TYPE_ID = 1001 AND 
             PML.LINK_TYPE = 'SG' AND
             PML.PARTY_ID =  arrData(1);

    ELSIF qryType = 'GET-INT-QUALITY-MAPPING' THEN

        SELECT 
            DISTINCT PML.VARIANT_NAME 
            BULK COLLECT INTO T_VARCHAR_DATA
        FROM T_PARTY_MISC_LINK PML 
        WHERE 
            PML.ATTRIB_ID1 = arrData(1) AND
            PML.LINK_TYPE = 'IQ';

    ELSIF qryType = 'GET-RECOVERY-PER' THEN
        
        SELECT 
            OMCD.EXPECTED_RECOVERY_PERC
            BULK COLLECT INTO T_VARCHAR_DATA
        FROM 
            T_OPERATION_MFG_CONFIG_MASTER OMCM,T_OPERATION_MFG_CONFIG_DTL OMCD
        WHERE 
            OMCM.OPERATION_MFGR_CONFIG_ID = OMCD.OPERATION_MFGR_CONFIG_ID 
            AND OMCM.MFGR_CONFIG_TYPE = 'R'
            AND OMCM.OPERATION_ID = arrData(1)
            AND OMCM.WCGROUP_ID = arrData(2)
            AND OMCD.ITEM_GROUP_ID = arrData(3);   

    ELSIF qryType = 'GET-METAL-WASTAGE-LABOUR' THEN

        SELECT
            CASE WHEN arrData(1) = 'WASTAGE' THEN FWL.WASTAGE_PER 
            WHEN arrData(1) = 'LBR' AND SP.LABOUR_CALC_METHOD_ID = 413 THEN FWL.LABOUR_PER_GM_NET 
            WHEN arrData(1) = 'LBR' AND SP.LABOUR_CALC_METHOD_ID = 402  THEN FWL.LABOUR_PER_PCS
            WHEN arrData(1) = 'LBR' AND SP.LABOUR_CALC_METHOD_ID = 401  THEN FWL.LABOUR_PER_GM_GR
            WHEN arrData(1) = 'MINWASTAGE' THEN FWL.MIN_PER
            WHEN arrData(1) = 'MINLBR' THEN FWL.MIN_LABOUR
            ELSE 0 END 
            BULK COLLECT INTO T_VARCHAR_DATA
        FROM 
            T_FORMULA_WASTAGE_N_LABOUR FWL,
            T_STOCK S, T_STOCK_LOCATION_SP SP, T_STOCK_TRANS_LINK STL, V_ITEM_VARIANT_DTL VD 
        WHERE 
            (S.QUANTITY*S.CONVERSION_FACTOR) BETWEEN FWL.FROMWT AND FWL.TOWT AND
            STL.VENDOR_ID = FWL.VENDOR_ID AND
            F_GET_ATTRIBUTE_ID(VD.ATTRIB_TYPE_AND_ATTRIB_ID||'^'||VD.ATTRIB_TYPE_AND_ATTRIB_ID_A,11168) = FWL.ATTRIB_ID3 AND
            F_GET_ATTRIBUTE_ID(VD.ATTRIB_TYPE_AND_ATTRIB_ID||'^'||VD.ATTRIB_TYPE_AND_ATTRIB_ID_A,11149) = FWL.ATTRIB_ID2 AND
            F_GET_ATTRIBUTE_ID(VD.ATTRIB_TYPE_AND_ATTRIB_ID||'^'||VD.ATTRIB_TYPE_AND_ATTRIB_ID_A,11001) = FWL.ATTRIB_ID1 AND
            S.VARIANT_ID = VD.VARIANT_ID AND
            VD.ITEM_TYPE_ID  = 1001 AND
            S.STOCK_ID = STL.STOCK_ID AND
            S.STOCK_ID = SP.STOCK_ID AND
            S.STOCK_CODE IS NOT NULL AND
            S.QUANTITY > 0 AND
            S.STOCK_ID = arrData(2) AND
            FWL.FORMULA_TYPE = 'METAL';

    ELSIF qryType = 'GET-LOOSE-STONE-RATE' THEN

        SELECT
            CASE WHEN arrData(1) = 'RATE' THEN FWL.AMOUNT
            ELSE 0 END 
            BULK COLLECT INTO T_VARCHAR_DATA
        FROM 
            T_FORMULA_WASTAGE_N_LABOUR FWL,
            T_STOCK S, V_ITEM_VARIANT_DTL VD 
        WHERE 
            (S.QUANTITY/(S.QUANTITY*S.CONVERSION_FACTOR)) BETWEEN FWL.FROMWT AND FWL.TOWT AND
            F_GET_ATTRIBUTE_ID(VD.ATTRIB_TYPE_AND_ATTRIB_ID||'^'||VD.ATTRIB_TYPE_AND_ATTRIB_ID_A,11030) = FWL.ATTRIB_ID3 AND
            F_GET_ATTRIBUTE_ID(VD.ATTRIB_TYPE_AND_ATTRIB_ID||'^'||VD.ATTRIB_TYPE_AND_ATTRIB_ID_A,11007) = FWL.ATTRIB_ID2 AND
            F_GET_ATTRIBUTE_ID(VD.ATTRIB_TYPE_AND_ATTRIB_ID||'^'||VD.ATTRIB_TYPE_AND_ATTRIB_ID_A,11004) = FWL.ATTRIB_ID1 AND
            S.VARIANT_ID = VD.VARIANT_ID AND
            VD.ITEM_TYPE_ID  = 1005 AND
            S.QUANTITY > 0 AND
            S.STOCK_ID = arrData(2) AND
            FWL.FORMULA_TYPE = 'STONE';

    ELSIF qryType = 'GET-STUDDED-STONE-RATE' THEN

        SELECT
            CASE WHEN arrData(1) = 'RATE' THEN FWL.AMOUNT
            ELSE 0 END 
            BULK COLLECT INTO T_VARCHAR_DATA
        FROM 
            T_FORMULA_WASTAGE_N_LABOUR FWL,
            T_STOCK_BOM_DTL SB, V_ITEM_VARIANT_DTL VD 
        WHERE 
            (SB.QUANTITY/(SB.QUANTITY*SB.CONVERSION_FACTOR)) BETWEEN FWL.FROMWT AND FWL.TOWT AND
            F_GET_ATTRIBUTE_ID(VD.ATTRIB_TYPE_AND_ATTRIB_ID||'^'||VD.ATTRIB_TYPE_AND_ATTRIB_ID_A,11030) = FWL.ATTRIB_ID3 AND
            F_GET_ATTRIBUTE_ID(VD.ATTRIB_TYPE_AND_ATTRIB_ID||'^'||VD.ATTRIB_TYPE_AND_ATTRIB_ID_A,11007) = FWL.ATTRIB_ID2 AND
            F_GET_ATTRIBUTE_ID(VD.ATTRIB_TYPE_AND_ATTRIB_ID||'^'||VD.ATTRIB_TYPE_AND_ATTRIB_ID_A,11004) = FWL.ATTRIB_ID1 AND
            SB.BOM_VARIANT_ID = VD.VARIANT_ID AND
            VD.ITEM_TYPE_ID  = 1005 AND
            SB.QUANTITY > 0 AND
            SB.STOCK_BOM_ID = arrData(2) AND
            FWL.FORMULA_TYPE = 'STONE';
            
     ELSIF qryType = 'LAST_STOCK_CODE_TRANS_REMARK1' THEN
         SELECT  
            COLUMN_VAL BULK COLLECT INTO T_VARCHAR_DATA
         FROM
         (
            SELECT
                MISC.COLUMN_VAL,  
                ROW_NUMBER() OVER(ORDER BY TH.TRANS_DATE DESC,TH.TRANS_ID DESC) AS RNO 
            FROM 
                T_TRANS_ITEM_MISC_INFO MISC,T_TRANS_ITEM_DTL TID,T_TRANS_HDR TH 
            WHERE 
                MISC.COLUMN_NAME(+) = 'REMARK_1' 
                AND TID.TRANS_ITEM_ID = MISC.TRANS_ITEM_ID(+)
                AND TH.TRANS_ID = TID.TRANS_ID 
                AND TID.ROW_STATUS = 1
                AND TID.STOCK_CODE =  qryValues 
         )
         WHERE RNO = 1 ;    
            
     ELSIF qryType = 'LAST_STOCK_CODE_TRANS_REMARK2' THEN
         SELECT  
            COLUMN_VAL BULK COLLECT INTO T_VARCHAR_DATA
         FROM
         (
            SELECT
                MISC.COLUMN_VAL,  
                ROW_NUMBER() OVER(ORDER BY TH.TRANS_DATE DESC,TH.TRANS_ID DESC) AS RNO 
            FROM 
                T_TRANS_ITEM_MISC_INFO MISC,T_TRANS_ITEM_DTL TID,T_TRANS_HDR TH 
            WHERE 
                MISC.COLUMN_NAME(+) = 'REMARK_2' 
                AND TID.TRANS_ITEM_ID = MISC.TRANS_ITEM_ID(+)
                AND TH.TRANS_ID = TID.TRANS_ID 
                AND TID.ROW_STATUS = 1
                AND TID.STOCK_CODE =  qryValues 
         )
         WHERE RNO = 1 ;    

     ELSIF qryType = 'LAST_STOCK_CODE_TRANS_REMARK3' THEN
         SELECT  
            COLUMN_VAL BULK COLLECT INTO T_VARCHAR_DATA
         FROM
         (
            SELECT
                MISC.COLUMN_VAL,  
                ROW_NUMBER() OVER(ORDER BY TH.TRANS_DATE DESC,TH.TRANS_ID DESC) AS RNO 
            FROM 
                T_TRANS_ITEM_MISC_INFO MISC,T_TRANS_ITEM_DTL TID,T_TRANS_HDR TH 
            WHERE 
                MISC.COLUMN_NAME(+) = 'REMARK_3' 
                AND TID.TRANS_ITEM_ID = MISC.TRANS_ITEM_ID(+)
                AND TH.TRANS_ID = TID.TRANS_ID 
                AND TID.ROW_STATUS = 1
                AND TID.STOCK_CODE =  qryValues 
         )
         WHERE RNO = 1 ;    

     ELSIF qryType = 'LAST_STOCK_CODE_TRANS_REMARK4' THEN
         SELECT  
            COLUMN_VAL BULK COLLECT INTO T_VARCHAR_DATA
         FROM
         (
            SELECT
                MISC.COLUMN_VAL,  
                ROW_NUMBER() OVER(ORDER BY TH.TRANS_DATE DESC,TH.TRANS_ID DESC) AS RNO 
            FROM 
                T_TRANS_ITEM_MISC_INFO MISC,T_TRANS_ITEM_DTL TID,T_TRANS_HDR TH 
            WHERE 
                MISC.COLUMN_NAME(+) = 'REMARK_4' 
                AND TID.TRANS_ITEM_ID = MISC.TRANS_ITEM_ID(+)
                AND TH.TRANS_ID = TID.TRANS_ID 
                AND TID.ROW_STATUS = 1
                AND TID.STOCK_CODE =  qryValues 
         )
         WHERE RNO = 1 ;    

     ELSIF qryType = 'LAST_STOCK_CODE_TRANS_USER' THEN
         SELECT  
            EMPLOYEE_NAME BULK COLLECT INTO T_VARCHAR_DATA
         FROM
         (
            SELECT
                EM.EMPLOYEE_NAME,  
                ROW_NUMBER() OVER(ORDER BY TH.TRANS_DATE DESC,TH.TRANS_ID DESC) AS RNO 
            FROM 
                T_SESSION_ACTIVITY SA,T_SESSION_INFO SI,T_AUTH_EMPLOYEE_MASTER EM,T_TRANS_ITEM_DTL TID,T_TRANS_HDR TH 
            WHERE 
                SI.EMPLOYEE_ID = EM.EMPLOYEE_ID
                AND SA.SESSION_ID = SI.SESSION_ID
                AND TH.TRANS_ID = SA.KEY_VALUE
                AND SA.TABLE_NAME = 'T_TRANS_HDR'
                AND SA.EVENT_NAME = 'I'
                AND TH.TRANS_ID = TID.TRANS_ID 
                AND TID.ROW_STATUS = 1
                AND TID.STOCK_CODE =  qryValues 
         )
         WHERE RNO = 1 ;    

     ELSIF qryType = 'LAST_STOCK_CODE_TRANS' THEN
         SELECT  
            CONFIG_VALUE BULK COLLECT INTO T_VARCHAR_DATA
         FROM
         (
            SELECT
               CFD.CONFIG_VALUE,  
                ROW_NUMBER() OVER(ORDER BY TH.TRANS_DATE DESC,TH.TRANS_ID DESC) AS RNO 
            FROM 
                T_TRANS_ITEM_DTL TID,T_TRANS_HDR TH,T_CONFIG_FIXED_DATA CFD 
            WHERE 
                TH.TRANS_ID = TID.TRANS_ID 
                AND TH.TRANS_SUBTYPE_ID = CFD.CONFIG_ID
                AND TID.ROW_STATUS = 1
                AND TID.STOCK_CODE =  qryValues 
         )
         WHERE RNO = 1 ;    
            
     ELSIF qryType = 'LAST_STOCK_CODE_DATE' THEN
         SELECT  
            TRANS_DATE BULK COLLECT INTO T_VARCHAR_DATA
         FROM
         (
            SELECT
               TH.TRANS_DATE,ROW_NUMBER() OVER(ORDER BY TH.TRANS_DATE DESC,TH.TRANS_ID DESC) AS RNO 
            FROM 
                T_TRANS_ITEM_DTL TID,T_TRANS_HDR TH 
            WHERE 
                TH.TRANS_ID = TID.TRANS_ID 
                AND TID.ROW_STATUS = 1
                AND TID.STOCK_CODE =  qryValues 
         )
         WHERE RNO = 1 ;    

     ELSIF qryType = 'FIRST_STOCK_CODE_DATE' THEN
         SELECT  
            TRANS_DATE BULK COLLECT INTO T_VARCHAR_DATA
         FROM
         (
            SELECT
               TH.TRANS_DATE,ROW_NUMBER() OVER(ORDER BY TH.TRANS_DATE,TH.TRANS_ID) AS RNO 
            FROM 
                T_TRANS_ITEM_DTL TID,T_TRANS_HDR TH 
            WHERE 
                TH.TRANS_ID = TID.TRANS_ID 
                AND TID.ROW_STATUS = 1
                AND TID.STOCK_CODE =  qryValues 
         )
         WHERE RNO = 1 ;    

    ELSIF qryType = 'FIRST_CERT_LOC' THEN
         SELECT  
            LOCATION_NAME BULK COLLECT INTO T_VARCHAR_DATA
         FROM
         (
            SELECT
               LM.LOCATION_NAME,ROW_NUMBER() OVER(ORDER BY TH.TRANS_DATE,TH.TRANS_ID) AS RNO 
            FROM 
                T_TRANS_ITEM_DTL TID,T_TRANS_HDR TH,T_APP_LOCATION_MASTER LM
            WHERE 
                TH.TRANS_ID = TID.TRANS_ID 
                AND TH.LOCATION_ID = LM.LOCATION_ID
                AND TID.ROW_STATUS = 1
                AND TH.TRANS_SUBTYPE_ID = 615
                AND TID.STOCK_CODE =  qryValues 
         )
         WHERE RNO = 1 ;
         
    ELSIF qryType = 'GET-BUNCH-NO(BATCH_ID)' THEN  
        SELECT SBD.BATCH_NO 
        BULK COLLECT INTO T_VARCHAR_DATA
        FROM T_STOCK_BATCH_DTL SBD
        WHERE SBD.BATCH_TYPE_ID = 2 
              AND SBD.ROW_STATUS = 1
              AND SBD.BATCH_ID = qryValues 
        GROUP BY SBD.BATCH_NO   ;
        
    ELSIF qryType = 'GET-BUNCH-NO-WGNAME(BATCH_ID)' THEN  
        SELECT WGM.WCGROUP_NAME 
        BULK COLLECT INTO T_VARCHAR_DATA
        FROM T_STOCK_BATCH_DTL SBD , T_WORKCENTER_GROUP_MASTER WGM 
        WHERE SBD.BATCH_TYPE_ID = 2 
              AND SBD.WCGROUP_ID = WGM.WCGROUP_ID 
              AND SBD.ROW_STATUS = 1
              AND SBD.BATCH_ID = qryValues 
        GROUP BY WGM.WCGROUP_NAME;  
      
    ELSIF qryType = 'GET_ORDER_NO(DOC_TRANS_ID)' THEN        
        SELECT TH.DOC_NO   BULK COLLECT INTO T_VARCHAR_DATA
        FROM T_TRANS_HDR TH, T_TRANS_ITEM_DTL OTID, V_STOCK_BATCH_DTL SBD , T_TRANS_ITEM_DTL TID 
        WHERE SBD.SOR_TRANS_ITEM_ID = OTID.TRANS_ITEM_ID
             AND OTID.TRANS_ID = TH.TRANS_ID  
             AND TID.DEST_BATCH_ID = SBD.BATCH_ID
             AND TID.TRANS_ID = qryValues 
        GROUP BY TH.DOC_NO ;
             
    ELSIF qryType = 'LAB_NAME(STOCK_ID)' THEN        
        SELECT PM.PARTY_NAME  BULK COLLECT INTO T_VARCHAR_DATA
        FROM T_STOCK_CERTIFICATE_DTL SCD,V_ITEM_VARIANT_RTN_DTL IV,T_PARTY_MASTER PM 
        WHERE SCD.CERTIFICATE_ID = IV.VARIANT_ID
             AND IV.VENDOR_ID = PM.PARTY_ID
             AND SCD.STOCK_ID = qryValues ;
             
    ELSIF qryType = 'INT-QLTY(ATTRIB_ID)' THEN   
        SELECT VARIANT_NAME  BULK COLLECT INTO T_VARCHAR_DATA
        FROM T_PARTY_MISC_LINK 
        WHERE LINK_TYPE= 'IQ'
              AND ATTRIB_ID1 = ARRDATA(1)
        GROUP BY VARIANT_NAME ;
     
    ELSIF qryType = 'INT-COLOR(ATTRIB_ID)' THEN   
        SELECT VARIANT_NAME  BULK COLLECT INTO T_VARCHAR_DATA
        FROM T_PARTY_MISC_LINK 
        WHERE LINK_TYPE= 'IC'
              AND ATTRIB_ID1 = ARRDATA(1)
        GROUP BY VARIANT_NAME ;
        
    ELSIF qryType = 'GET-RUBBERMOULD(STYLE-ID)' THEN   
         SELECT MAX(TH.TRANS_DATE) BULK COLLECT INTO T_VARCHAR_DATA
            FROM T_TRANS_HDR TH, T_TRANS_ITEM_DTL TID  
            WHERE TH.TRANS_ID = TID.TRANS_ID  
                AND TH.OPERATION_ID = 90
                AND TH.TRANS_TYPE IN ('RTN')
                AND TID.ROW_STATUS = 1 
                AND TID.VARIANT_ID  =  ARRDATA(1)
            ORDER BY TH.TRANS_ID ;  
    
    ELSIF qryType = 'GET-MODEL-FINISH(STYLE-ID)' THEN   
         SELECT MAX(TH.TRANS_DATE) BULK COLLECT INTO T_VARCHAR_DATA
            FROM T_TRANS_HDR TH, T_TRANS_ITEM_DTL TID   
            WHERE TH.TRANS_ID = TID.TRANS_ID   
                AND TH.TRANS_TYPE = 'TRN'
                AND TID.ROW_STATUS = 1 
                AND TH.TRANS_CATEGORY_LINK_ID = 1213
                AND TID.VARIANT_ID  =  ARRDATA(1)
            ORDER BY TH.TRANS_ID ;  
      
    ELSIF qryType = 'GET-CASTING(STYLE-ID)' THEN   
         SELECT MAX(TH.TRANS_DATE) BULK COLLECT INTO T_VARCHAR_DATA
            FROM T_TRANS_HDR TH, T_TRANS_ITEM_DTL TID  
            WHERE TH.TRANS_ID = TID.TRANS_ID  
                AND TH.OPERATION_ID = 84
                AND TH.TRANS_TYPE IN ('RTN')
                AND TID.ROW_STATUS = 1 
                AND TID.VARIANT_ID  =  ARRDATA(1)
            ORDER BY TH.TRANS_ID ;  
     
    ELSIF qryType = 'GET-MODEL-STATUS(STYLE-ID)' THEN   
       /* SELECT DECODE(ID,1,'NEW','') BULK COLLECT INTO T_VARCHAR_DATA
        FROM 
        (
            SELECT 1 AS ID
            FROM T_TRANS_HDR TH, T_TRANS_ITEM_DTL TID ,T_OPERATION_MASTER OP 
            WHERE TH.TRANS_ID = TID.TRANS_ID 
                AND TH.OPERATION_ID = OP.OPERATION_ID  
                AND OP.OPERATION_CODE = 'MODELMAKE'
                AND TH.TRANS_TYPE IN ('RTN')
                AND TID.VARIANT_ID  =  ARRDATA(1)
            ORDER BY TH.TRANS_ID 
        )WHERE ROWNUM < 1  ;  */
         SELECT OPERATION_NAME BULK COLLECT INTO T_VARCHAR_DATA 
        FROM (
        SELECT TH.TRANS_ID, OP.OPERATION_NAME 
        FROM T_TRANS_HDR TH, T_TRANS_ITEM_DTL TID ,T_OPERATION_MASTER OP 
        WHERE TH.TRANS_ID = TID.TRANS_ID   
            AND TH.OPERATION_ID = OP.OPERATION_ID  
            AND TH.TRANS_TYPE = 'RTN'
            AND TID.ROW_STATUS = 1 
            AND TID.VARIANT_ID  = ARRDATA(1) 
        ORDER BY TH.TRANS_ID DESC 
        )WHERE ROWNUM = 1 ;   
    
    ELSIF qryType = 'GET-CAD-ISS-STATUS(STYLE-ID)' THEN          
        SELECT MAX(TH.TRANS_DATE) BULK COLLECT INTO T_VARCHAR_DATA 
        FROM T_TRANS_HDR TH, T_TRANS_ITEM_DTL TID ,T_OPERATION_MASTER OPM  
        WHERE TH.TRANS_ID = TID.TRANS_ID 
            AND TH.TRANS_TYPE = 'ISS'
            AND TH.OPERATION_ID = OPM.OPERATION_ID  
            AND OPM.OPERATION_CODE IN ('CAD')
            AND TID.ROW_STATUS = 1 
            AND TID.VARIANT_ID  =  ARRDATA(1) ; 
    
    ELSIF qryType = 'GET-CAD-RTN-STATUS(STYLE-ID)' THEN          
        SELECT MAX(TH.TRANS_DATE) BULK COLLECT INTO T_VARCHAR_DATA 
        FROM T_TRANS_HDR TH, T_TRANS_ITEM_DTL TID  ,T_OPERATION_MASTER OPM 
        WHERE TH.TRANS_ID = TID.TRANS_ID 
            AND TH.TRANS_TYPE = 'RTN'
            AND TH.OPERATION_ID = OPM.OPERATION_ID  
            AND OPM.OPERATION_CODE IN ('CAD')
            AND TID.ROW_STATUS = 1 
            AND TID.VARIANT_ID  =  ARRDATA(1) ; 
    
     ELSIF qryType = 'GET-CAM-ISS-STATUS(STYLE-ID)' THEN          
        SELECT MAX(TH.TRANS_DATE) BULK COLLECT INTO T_VARCHAR_DATA 
        FROM T_TRANS_HDR TH, T_TRANS_ITEM_DTL TID,T_OPERATION_MASTER OPM   
        WHERE TH.TRANS_ID = TID.TRANS_ID 
            AND TH.TRANS_TYPE = 'ISS'
            AND TH.OPERATION_ID = OPM.OPERATION_ID  
            AND OPM.OPERATION_CODE IN ('CAM')
            AND TID.ROW_STATUS = 1 
            AND TID.VARIANT_ID  =  ARRDATA(1) ; 
    
    ELSIF qryType = 'GET-CAM-RTN-STATUS(STYLE-ID)' THEN          
        SELECT MAX(TH.TRANS_DATE) BULK COLLECT INTO T_VARCHAR_DATA 
        FROM T_TRANS_HDR TH, T_TRANS_ITEM_DTL TID  ,T_OPERATION_MASTER OPM 
        WHERE TH.TRANS_ID = TID.TRANS_ID 
            AND TH.TRANS_TYPE = 'RTN'
            AND TH.OPERATION_ID = OPM.OPERATION_ID  
            AND OPM.OPERATION_CODE IN ('CAM')
            AND TID.ROW_STATUS = 1 
            AND TID.VARIANT_ID  =  ARRDATA(1) ;  
    
    ELSIF qryType = 'GET-INV-DOC(STYLE-ID)' THEN          
        SELECT TH.DOC_NO  BULK COLLECT INTO T_VARCHAR_DATA 
        FROM T_TRANS_HDR TH, T_TRANS_ITEM_DTL TID  
        WHERE TH.TRANS_ID = TID.TRANS_ID 
            AND TH.TRANS_TYPE = 'INV'
            AND TID.ROW_STATUS = 1 
            AND TID.VARIANT_ID  =  ARRDATA(1) ;
    
    ELSIF qryType = 'GET-INV-DATE(STYLE-ID)' THEN          
       SELECT MAX(TH.TRANS_DATE) BULK COLLECT INTO T_VARCHAR_DATA 
        FROM T_TRANS_HDR TH, T_TRANS_ITEM_DTL TID  ,T_ITEM_VARIANT_MASTER_EXTD IV 
        WHERE TH.TRANS_ID = TID.TRANS_ID
            AND TID.VARIANT_ID = IV.VARIANT_ID 
            AND TH.TRANS_TYPE = 'INV'
            AND TID.ROW_STATUS = 1 
            AND IV.OLD_PK_ID = ARRDATA(1) ; 
            
    ELSIF qryType = 'GET-PDD-DATE(STYLE-ID)' THEN          
        SELECT TH.TRANS_DATE BULK COLLECT INTO T_VARCHAR_DATA 
        FROM T_TRANS_HDR TH,T_TRANS_ITEM_DTL TID  
        WHERE TH.TRANS_ID = TID.TRANS_ID  
            AND TH.TRANS_TYPE = 'ISS'  
            AND TID.ROW_STATUS = 1 
            AND TID.VARIANT_ID  = ARRDATA(1) ;
    
    ELSIF qryType = 'GET-PDD-STATUS(STYLE-ID)' THEN          
        SELECT WCM.WC_NAME BULK COLLECT INTO T_VARCHAR_DATA 
        FROM T_TRANS_HDR TH, T_TRANS_ITEM_DTL TID ,T_WORKCENTER_MASTER WCM   
        WHERE TH.TRANS_ID = TID.TRANS_ID 
            AND TID.DEST_WC_ID = WCM.WC_ID 
            AND TH.TRANS_TYPE = 'ISS'  
            AND TID.ROW_STATUS = 1 
            AND TID.VARIANT_ID  = ARRDATA(1) ;
    
    ELSIF qryType = 'GET-CAD-WC-NAME(STYLE-ID)' THEN          
        SELECT WCM.WC_NAME BULK COLLECT INTO T_VARCHAR_DATA 
        FROM T_TRANS_HDR TH, T_TRANS_ITEM_DTL TID ,T_WORKCENTER_MASTER WCM   
        WHERE TH.TRANS_ID = TID.TRANS_ID 
            AND TID.DEST_WC_ID = WCM.WC_ID 
            AND TH.TRANS_TYPE = 'ISS'
            AND TH.OPERATION_ID = 86   
            AND TID.ROW_STATUS = 1 
            AND TID.VARIANT_ID  = ARRDATA(1)  ; 
    
    ELSIF qryType = 'GET-MODEL-WC-NAME(STYLE-ID)' THEN          
        SELECT WCM.WC_NAME BULK COLLECT INTO T_VARCHAR_DATA 
        FROM T_TRANS_HDR TH, T_TRANS_ITEM_DTL TID ,T_WORKCENTER_MASTER WCM  ,T_OPERATION_MASTER OP 
        WHERE TH.TRANS_ID = TID.TRANS_ID 
            AND TH.OPERATION_ID = OP.OPERATION_ID
            AND TID.DEST_WC_ID = WCM.WC_ID 
            AND OP.OPERATION_CODE = 'MODELMAKE'
            AND TH.TRANS_TYPE = 'ISS'
            AND TID.ROW_STATUS = 1 
            AND TID.VARIANT_ID  = ARRDATA(1) ;  
         
  ELSIF qryType = 'GET-SEQNO(ATTRIB_ID)' THEN          
        
        SELECT IAME.SEQ_NO BULK COLLECT INTO T_VARCHAR_DATA 
        FROM T_ITEM_ATTRIB_MASTER_EXTD IAME
        WHERE IAME.ATTRIB_ID = ARRDATA(1) ;
        
    ELSIF qryType = 'GET-SCM-METAL-RATE' THEN
        -- ITEM_GROUP_ID:VARIANT_ID:RATE
         BEGIN
            SELECT RANGE_VALUE INTO dblPremRate
            FROM T_FORMULA_RANGE_LOV_DTL
            WHERE RANGE_ID = 3 AND RANGE_FROM = arrData(1);

            SELECT FRLD.RANGE_VALUE INTO dblKTFineness
            FROM T_FORMULA_RANGE_LOV_DTL FRLD, V_ITEM_VARIANT_RTN_DTL IVD
            WHERE FRLD.RANGE_FROM = F_GET_ATTRIBUTE_ID(IVD.ATTRIB_TYPE_AND_ATTRIB_ID, 11006) AND FRLD.RANGE_ID = 2 AND IVD.VARIANT_ID = arrData(2);

            SELECT RANGE_VALUE INTO dblDefFineness
            FROM T_FORMULA_RANGE_LOV_DTL
            WHERE RANGE_ID = 1 AND RANGE_FROM = arrData(1);

            SELECT ROUND(((NVL(arrData(3), 0) + dblPremRate) * dblKTFineness) / dblDefFineness, 5)
            BULK COLLECT INTO T_VARCHAR_DATA
            FROM DUAL;
        EXCEPTION
             WHEN NO_DATA_FOUND THEN
                 strReturn := NULL;
        END;
        
    ELSIF qryType = 'GET-SAMPLE-ORDER(VARIANT-DATE)' THEN    
        SELECT MAX(TRANS_DATE) BULK COLLECT INTO T_VARCHAR_DATA    
        FROM T_TRANS_HDR TH, T_TRANS_ITEM_DTL TID , T_ITEM_VARIANT_MASTER_EXTD IV  
        WHERE TH.TRANS_CATEGORY_LINK_ID = 662
            AND TH.TRANS_ID = TID.TRANS_ID
            AND TID.VARIANT_ID = IV.VARIANT_ID
            AND TID.ROW_STATUS = 1
            AND IV.OLD_PK_ID = arrData(1)  ;
            
    ELSIF qryType = 'GET-SAMPLE-ORDER(VARIANT-DOC_NO)' THEN    
        SELECT DOC_NO BULK COLLECT INTO T_VARCHAR_DATA  
        FROM
        (  
            SELECT DOC_NO  
            FROM T_TRANS_HDR TH, T_TRANS_ITEM_DTL TID , T_ITEM_VARIANT_MASTER_EXTD IV 
            WHERE TH.TRANS_CATEGORY_LINK_ID = 662
                AND TID.VARIANT_ID = IV.VARIANT_ID
                AND TH.TRANS_ID = TID.TRANS_ID
                AND TID.ROW_STATUS = 1
                AND IV.OLD_PK_ID = arrData(1)  
            ORDER BY TH.TRANS_ID DESC 
          )WHERE ROWNUM = 1 ;
     
    ELSIF qryType = 'GET-SAMPLE-ORDER(VARIANT-DUE-DATE)' THEN    
        SELECT THEX.CERTIFICATE_DATE BULK COLLECT INTO T_VARCHAR_DATA      
        FROM T_TRANS_HDR TH,T_TRANS_HDR_IMPEXP THEX, T_TRANS_ITEM_DTL TID, T_ITEM_VARIANT_MASTER_EXTD IV 
        WHERE 
            TH.TRANS_ID = THEX.TRANS_ID 
            AND TH.TRANS_ID = TID.TRANS_ID
            AND TID.VARIANT_ID = IV.VARIANT_ID
            AND TH.TRANS_CATEGORY_LINK_ID = 662
            AND TID.ROW_STATUS = 1
            AND IV.OLD_PK_ID = arrData(1) ; 
    ELSIF qryType = 'GET-SAMPLE-ORDER(BATCH-OPERATION)' THEN        
        SELECT OP.OPERATION_NAME BULK COLLECT INTO T_VARCHAR_DATA 
        FROM V_STOCK_BATCH_DTL SBD , T_OPERATION_MASTER OP 
        WHERE SBD.OPERATION_ID = OP.OPERATION_ID 
              AND SBD.ROW_STATUS = 1 
              AND SBD.OPERATION_ID > 0
              AND SBD.SOR_TRANS_ITEM_ID =arrData(1) ;  

    ELSIF qryType = 'GET-VENDOR-NAME-FROM-FA-TRANS' THEN          
        SELECT LISTAGG_CLOB(ACCOUNT_NAME)
        BULK COLLECT INTO T_VARCHAR_DATA 
        FROM (SELECT DISTINCT FAM.ACCOUNT_NAME
              FROM T_FA_TRANS_DTL FTD, T_FA_ACCOUNT_MASTER FAM 
              WHERE FTD.ACCOUNT_ID = FAM.ACCOUNT_ID AND FTD.FLAG = 0 AND FTD.FA_TRANS_ID = ARRDATA(1) AND FAM.ACCOUNT_SYS_CODE = 'AP'
             );  
    
    ELSIF qryType = 'GET-CERTIFY-RATE(STOCK-CODE)' THEN 
        SELECT TRANS_RATE  BULK COLLECT INTO T_VARCHAR_DATA
        FROM 
            (
            SELECT TID.TRANS_RATE
            FROM V_TRANS_ITEM_DTL TID, T_TRANS_HDR TH 
            WHERE TID.TRANS_ID = TH.TRANS_ID 
                AND TH.TRANS_TYPE = 'TRN' 
                AND TID.ROW_STATUS = 1
                AND TH.TRANS_SUBTYPE_ID = 621 
                AND TID.STOCK_CODE = ARRDATA(1)
            ORDER BY TH.TRANS_ID DESC 
        ) WHERE ROWNUM = 1 ;

    ELSIF qryType = 'GET-FINAL-SKETCH' THEN

        /*SELECT VARIANT_ID
        BULK COLLECT INTO T_VARCHAR_DATA  
        FROM
        (
            SELECT IVP.VARIANT_ID FROM T_ITEM_VARIANT_PD IVP, T_ITEM_VARIANT_MASTER IVM
            WHERE IVP.VARIANT_ID = IVM.VARIANT_ID AND IVM.ROW_STATUS = 1 AND IVM.VERIFIED_IND = 1 AND IVP.REVISION_ID = arrData(1)
            UNION ALL
            SELECT IVP.VARIANT_ID FROM T_ITEM_VARIANT_PD IVP, T_ITEM_VARIANT_MASTER IVM
            WHERE IVP.VARIANT_ID = IVM.VARIANT_ID AND IVM.ROW_STATUS = 1 AND IVM.VERIFIED_IND = 1 AND IVP.VARIANT_ID = arrData(1)
        );
        */

--        BEGIN
            SELECT IVP.VARIANT_ID 
            BULK COLLECT INTO T_VARCHAR_DATA 
            FROM T_ITEM_VARIANT_PD IVP, T_ITEM_VARIANT_MASTER IVM
            WHERE IVP.VARIANT_ID = IVM.VARIANT_ID AND IVM.ROW_STATUS = 1 AND IVM.VERIFIED_IND = 1 
            AND IVP.REVISION_ID IN
            (  
                SELECT IVP.VARIANT_ID FROM T_ITEM_VARIANT_PD IVP
                WHERE IVP.PD_TYPE_ID = 16501 AND  
                IVP.REVISION_ID IN
                (SELECT IVP.REVISION_ID FROM T_ITEM_VARIANT_PD IVP WHERE IVP.PD_TYPE_ID = 16503 AND IVP.VARIANT_ID = arrData(1))
            );
        
--        EXCEPTION
--            WHEN NO_DATA_FOUND THEN
--            SELECT IVP.VARIANT_ID
--            BULK COLLECT INTO T_VARCHAR_DATA  
--            FROM T_ITEM_VARIANT_PD IVP, T_ITEM_VARIANT_MASTER IVM
--            WHERE IVP.VARIANT_ID = IVM.VARIANT_ID AND IVM.ROW_STATUS = 1 AND IVM.VERIFIED_IND = 1 AND IVP.VARIANT_ID = arrData(1);            
--        END;
        
    ELSIF qryType = 'GET-LAST-SELLING-PRICE' THEN

        SELECT SELLING_PRICE 
        BULK COLLECT INTO T_VARCHAR_DATA 
        FROM
        (
            SELECT ROW_NUMBER() OVER (ORDER BY S.STOCK_ID DESC) AS RN, SP.SELLING_PRICE 
            FROM T_STOCK S, T_STOCK_LOCATION_SP SP 
            WHERE 
            S.STOCK_ID = SP.STOCK_ID AND S.STOCK_CODE = arrData(1)
        ) WHERE RN = 1;

    ELSIF qryType = 'GET-LAST-SELLING-AMOUNT' THEN

        SELECT SELLING_AMOUNT 
        BULK COLLECT INTO T_VARCHAR_DATA 
        FROM
        (
            SELECT ROW_NUMBER() OVER (ORDER BY S.STOCK_ID DESC) AS RN, SP.SELLING_AMOUNT
            FROM T_STOCK S, T_STOCK_LOCATION_SP SP 
            WHERE 
            S.STOCK_ID = SP.STOCK_ID AND S.STOCK_CODE = arrData(1)
        ) WHERE RN = 1;

    ELSIF qryType = 'GET-ORDER-SKU' THEN    
        SELECT
            DISTINCT PML.ADD_FLD1
        BULK COLLECT INTO T_VARCHAR_DATA             
        FROM
            T_TRANS_HDR TH, T_TRANS_HDR_EXTD THEX,
            T_TRANS_ITEM_DTL TID,
            T_PARTY_MISC_LINK PML
        WHERE
            TID.VARIANT_ID = PML.VARIANT_ID
            AND PML.TRANS_SUBTYPE_ID = TH.TRANS_CATEGORY_LINK_ID
            AND THEX.PARTY_ID = PML.PARTY_ID 
            AND PML.LINK_TYPE = 'S'
            AND TH.TRANS_ID = THEX.TRANS_ID
            AND TID.TRANS_ID = TH.TRANS_ID 
            AND TID.TRANS_ITEM_ID = qryValues
            AND ROWNUM = 1 ;
    
    ELSIF qryType = 'GET-CAD-NOS(VARIANT_ID)' THEN   
        SELECT
              CASE WHEN COUNT(OP.OPERATION_ID) = 1 THEN 'CAD' 
                   WHEN COUNT(OP.OPERATION_ID) > 1 THEN  'CAD MADE '||COUNT(OP.OPERATION_ID)||' TIMES'   
              ELSE NULL END BULK COLLECT INTO T_VARCHAR_DATA    
        FROM T_TRANS_HDR TH , T_TRANS_ITEM_DTL TTID, T_OPERATION_MASTER OP    
        WHERE  
            TTID.TRANS_ID = TH.TRANS_ID 
            AND TH.OPERATION_ID = OP.OPERATION_ID
            AND OP.OPERATION_CODE = 'CAD' 
            AND TTID.ROW_STATUS = 1   
            AND TTID.VARIANT_ID = ARRDATA(1); 

    ELSIF qryType = 'GET-QLTY-SHP-CUT' THEN
        SELECT DISTINCT F_CONCAT_STRING('GET-PARTYWISE-QUALITY',TID.TRANS_ID||':'||TID.TRANS_ITEM_ID)||' '||SHAPE_DESC||' '||CUT_DESC AS QLTY
        BULK COLLECT INTO T_VARCHAR_DATA
        FROM T_TRANS_ITEM_BOM_DTL TSB, T_SMRY_ITEM_VARIANT_STONE SMRY,t_trans_item_dtl TID 
        WHERE
            TSB.BOM_VARIANT_ID = SMRY.VARIANT_ID
            AND TSB.TRANS_ITEM_ID = TID.TRANS_ITEM_ID
            AND TSB.TRANS_ITEM_ID = qryValues ;

    ELSIF qryType = 'GET-ORDER-NO-FOR-ADVANCE' THEN
         --SELECT LISTAGG_CLOB(TH.DOC_NO)
         SELECT TH.DOC_NO
         BULK COLLECT INTO T_VARCHAR_DATA 
         FROM T_TRANS_HDR TH, T_FA_BILL_RESERVATION FBR, T_FA_TRANS_BILL_HDR FTBH
         WHERE TH.TRANS_ID = FBR.TRANS_ID AND FBR.FA_TRANS_BILL_ID = FTBH.FA_TRANS_BILL_ID AND FTBH.ROW_STATUS > 0 AND
               FTBH.FA_TRANS_ID = qryValues;

    ELSIF qryType = 'GET-BILL-NO-FOR-FA-TRANS' THEN
         --SELECT LISTAGG_CLOB(REPLACE(BILL_NO, '''', ''))

         SELECT REPLACE(BILL_NO, '''', '') AS BILL_NO
         BULK COLLECT INTO T_VARCHAR_DATA
         FROM (
               SELECT FTBH.BILL_NO 
               FROM T_FA_TRANS_BILL_HDR FTBH
               WHERE FTBH.ROW_STATUS > 0 AND FTBH.FA_TRANS_ID = qryValues
               GROUP BY FTBH.BILL_NO
              );

    ELSIF qryType = 'GET-LOCK-DATE' THEN   
        SELECT
            MAX(TH.TRANS_DATE)
              BULK COLLECT INTO T_VARCHAR_DATA    
        FROM T_TRANS_HDR TH , T_TRANS_ITEM_DTL TID    
        WHERE  
            TID.TRANS_ID = TH.TRANS_ID 
            AND TID.STOCK_STATUS_ID = 1449 
            AND TH.TRANS_TYPE = 'ADJ' 
            AND TID.ROW_STATUS = 1   
            AND TID.STOCK_CODE = ARRDATA(1); 
             
    ELSIF qryType = 'GET-ORDER_QTY(TRANS_ITEM_ID)' THEN 
                
             SELECT SUM(TID.QUANTITY)  BULK COLLECT INTO T_VARCHAR_DATA    
            FROM T_TRANS_HDR TH ,T_TRANS_ITEM_DTL TID 
            WHERE TH.TRANS_ID = TID.TRANS_ID 
                  AND TH.TRANS_TYPE = 'SOR' 
                  AND TID.ROW_STATUS = 1 
                  AND TID.QUANTITY > 0  
                  AND TID.TRANS_ID = ARRDATA(1) ;

    ELSIF qryType = 'GET-ORDER-NO-FOR-INVOICE-FOR-LEDGER' THEN
        SELECT ORD.DOC_NO
        BULK COLLECT INTO T_VARCHAR_DATA
        FROM T_TRANS_HDR TH , V_TRANS_HDR ORD, T_TRANS_ITEM_DTL TID 
        WHERE TH.TRANS_ID = TID.TRANS_ID AND TID.ROW_STATUS = 1 AND TID.SOR_TRANS_ID = ORD.TRANS_ID AND TH.TRANS_ID = qryValues
        GROUP BY ORD.DOC_NO; 
             
    ELSIF qryType = 'GET-ORDER-NO-FOR-RETURN-FOR-LEDGER' THEN
        SELECT ORD.DOC_NO
        BULK COLLECT INTO T_VARCHAR_DATA
        FROM T_TRANS_HDR ORD, T_TRANS_ITEM_DTL TID, T_TRANS_ITEM_DTL TIDR 
        WHERE TID.REF_TRANS_ITEM_ID = TIDR.TRANS_ITEM_ID AND TIDR.SOR_TRANS_ID = ORD.TRANS_ID AND TIDR.ROW_STATUS = 1 AND TID.TRANS_ID = qryValues
        GROUP BY ORD.DOC_NO; 

    ELSIF qryType = 'GET-PARTYWISE_QLTY_ALIAS' THEN 

         SELECT  
             DISTINCT DECODE(QLTY.ATTRIB_ALIAS_NAME,NULL,F_GET_ATTRIBUTE_VALUE(IV.ATTRIB_TYPE_AND_CODE,'STNQLTY'),QLTY.ATTRIB_ALIAS_NAME) 
             BULK COLLECT INTO T_VARCHAR_DATA
         FROM 
             T_TRANS_ITEM_BOM_DTL SB, V_ITEM_VARIANT_DTL IV,  
             (
                 SELECT
                     PML.PARTY_MISC_LINK_ID AS PK_ID,PML.PARTY_ID,SAM.ATTRIB_CODE AS QUALITY,SAM.ATTRIB_CODE AS QLTY_CODE, 
                     PML.ATTRIB_ALIAS_NAME,PML.LINK_TYPE,PML.ATTRIB_ID1
                 FROM 
                     T_PARTY_MISC_LINK PML,
                     T_ITEM_ATTRIB_MASTER SAM,
                     T_TRANS_HDR TH,T_TRANS_HDR_EXTD TEXTD  
                 WHERE 
                     TH.TRANS_ID = TEXTD.TRANS_ID(+) AND    
                     TEXTD.PARTY_ID = PML.PARTY_ID(+) AND  
                     PML.ATTRIB_ID1 = SAM.ATTRIB_ID (+) AND
                     TH.TRANS_ID = arrData(1) AND 
                     PML.LINK_TYPE = 'A'  
              )QLTY               
         WHERE 
             F_GET_ATTRIBUTE_VALUE(IV.ATTRIB_TYPE_AND_CODE,'STNQLTY') = QLTY.QLTY_CODE(+) AND 
             SB.BOM_VARIANT_ID  = IV.VARIANT_ID (+) AND
             IV.ITEM_TYPE_ID = 1005   AND 
             SB.TRANS_ITEM_BOM_ID = arrData(2); 
             
    ELSIF qryType = 'GET-PARTYWISE_COLOR_ALIAS' THEN 
         SELECT  
             DISTINCT DECODE(QLTY.ATTRIB_ALIAS_NAME,NULL,F_GET_ATTRIBUTE_VALUE(IV.ATTRIB_TYPE_AND_CODE,'STNCLR'),QLTY.ATTRIB_ALIAS_NAME) 
             BULK COLLECT INTO T_VARCHAR_DATA
         FROM 
             T_TRANS_ITEM_BOM_DTL SB, V_ITEM_VARIANT_DTL IV,  
             (
                 SELECT
                     PML.PARTY_MISC_LINK_ID AS PK_ID,PML.PARTY_ID,SAM.ATTRIB_DESC AS QUALITY,SAM.ATTRIB_CODE AS COLOR_CODE, 
                     PML.ATTRIB_ALIAS_NAME,PML.LINK_TYPE,PML.ATTRIB_ID1
                 FROM 
                     T_PARTY_MISC_LINK PML,
                     T_ITEM_ATTRIB_MASTER SAM,
                     T_TRANS_HDR TH,T_TRANS_HDR_EXTD TEXTD  
                 WHERE 
                     TH.TRANS_ID = TEXTD.TRANS_ID(+) AND    
                     TEXTD.PARTY_ID = PML.PARTY_ID(+) AND  
                     PML.ATTRIB_ID1 =SAM.ATTRIB_ID (+) AND
                     TH.TRANS_ID = arrData(1) AND 
                     PML.LINK_TYPE = 'CL'  
              )QLTY               
         WHERE 
             F_GET_ATTRIBUTE_VALUE(IV.ATTRIB_TYPE_AND_CODE,'STNCLR') = QLTY.COLOR_CODE(+) AND 
             SB.BOM_VARIANT_ID  = IV.VARIANT_ID (+) AND
             IV.ITEM_TYPE_ID = 1005   AND 
             SB.TRANS_ITEM_BOM_ID = arrData(2);  
     
     ELSIF qryType = 'CERTIFICATE_NO-(STYLE)' THEN
      
        SELECT DISTINCT IVM.VARIANT_NAME 
           BULK COLLECT INTO T_VARCHAR_DATA 
        FROM T_STOCK S, V_ITEM_VARIANT_RTN_DTL IV ,
             T_ITEM_VARIANT_MASTER IVM,T_STOCK_CERTIFICATE_DTL SCD 
        WHERE S.STOCK_ID = SCD.STOCK_ID
              AND S.VARIANT_ID = IV.VARIANT_ID 
              AND SCD.CERTIFICATE_ID = IVM.VARIANT_ID
              AND IV.ITEM_TYPE_ID = 1001
              AND S.STOCK_ID = qryValues;  
    
     ELSIF qryType = 'GET-TRANS-ATTRIB' THEN
         SELECT NVL(TIAD.ATTRIB_VALUE,IAM.ATTRIB_DESC)
         BULK COLLECT INTO T_VARCHAR_DATA   
         FROM T_TRANS_ITEM_ATTRIB_DTL TIAD, T_ITEM_ATTRIB_MASTER IAM 
         WHERE TIAD.ATTRIB_ID = IAM.ATTRIB_ID AND 
               TIAD.ATTRIB_TYPE_ID = arrData(2) AND 
               TIAD.TRANS_ITEM_ID = arrData(1) ; 

    ELSIF qryType = 'GET-PARTYWISE_KARAT_ALIAS' THEN 
         SELECT  
             DISTINCT DECODE(KT.ATTRIB_ALIAS_NAME,NULL,F_GET_ATTRIBUTE_VALUE(IV.ATTRIB_TYPE_AND_CODE,'KT'),KT.ATTRIB_ALIAS_NAME) 
             BULK COLLECT INTO T_VARCHAR_DATA
         FROM 
             T_TRANS_ITEM_BOM_DTL SB, V_ITEM_VARIANT_DTL IV,  
             (
                 SELECT
                     PML.PARTY_MISC_LINK_ID AS PK_ID,PML.PARTY_ID,SAM.ATTRIB_DESC AS KT,SAM.ATTRIB_CODE AS KT_CODE, 
                     PML.ATTRIB_ALIAS_NAME,PML.LINK_TYPE,PML.ATTRIB_ID1
                 FROM 
                     T_PARTY_MISC_LINK PML,
                     T_ITEM_ATTRIB_MASTER SAM,
                     T_TRANS_HDR TH,T_TRANS_HDR_EXTD TEXTD  
                 WHERE 
                     TH.TRANS_ID = TEXTD.TRANS_ID(+) AND    
                     TEXTD.PARTY_ID = PML.PARTY_ID(+) AND  
                     PML.ATTRIB_ID1 =SAM.ATTRIB_ID (+) AND
                     TH.TRANS_ID = arrData(1) AND 
                     PML.LINK_TYPE = 'KT'  
              )KT
         WHERE 
             F_GET_ATTRIBUTE_VALUE(IV.ATTRIB_TYPE_AND_CODE,'KT') = KT.KT_CODE(+) AND 
             SB.BOM_VARIANT_ID  = IV.VARIANT_ID (+) AND
             IV.ITEM_TYPE_ID = 1004   AND 
             SB.TRANS_ITEM_ID = arrData(2); 
    
    ELSIF qryType = 'GET-PARTYWISE_KARAT_ALIAS(TRANS_ITEM_BOM_ID)' THEN 
         SELECT  
             DISTINCT DECODE(KT.ATTRIB_ALIAS_NAME,NULL,F_GET_ATTRIBUTE_VALUE(IV.ATTRIB_TYPE_AND_CODE,'KT'),KT.ATTRIB_ALIAS_NAME) 
             BULK COLLECT INTO T_VARCHAR_DATA
         FROM 
             T_TRANS_ITEM_BOM_DTL SB, V_ITEM_VARIANT_DTL IV,  
             (
                 SELECT
                     PML.PARTY_MISC_LINK_ID AS PK_ID,PML.PARTY_ID,SAM.ATTRIB_DESC AS KT,SAM.ATTRIB_CODE AS KT_CODE, 
                     PML.ATTRIB_ALIAS_NAME,PML.LINK_TYPE,PML.ATTRIB_ID1
                 FROM 
                     T_PARTY_MISC_LINK PML,
                     T_ITEM_ATTRIB_MASTER SAM,
                     T_TRANS_HDR TH,T_TRANS_HDR_EXTD TEXTD  
                 WHERE 
                     TH.TRANS_ID = TEXTD.TRANS_ID(+) AND    
                     TEXTD.PARTY_ID = PML.PARTY_ID(+) AND  
                     PML.ATTRIB_ID1 =SAM.ATTRIB_ID (+) AND
                     TH.TRANS_ID = arrData(1) AND 
                     PML.LINK_TYPE = 'KT'  
              )KT
         WHERE 
             F_GET_ATTRIBUTE_VALUE(IV.ATTRIB_TYPE_AND_CODE,'KT') = KT.KT_CODE(+) AND 
             SB.BOM_VARIANT_ID  = IV.VARIANT_ID (+) AND
             IV.ITEM_TYPE_ID = 1004   AND 
             SB.TRANS_ITEM_BOM_ID = arrData(2); 

    ELSIF qryType = 'GET-PARTYWISE_CATG_ALIAS' THEN 
         SELECT  
             DISTINCT DECODE(CG.ATTRIB_ALIAS_NAME,NULL,F_GET_ATTRIBUTE_VALUE(IV.ATTRIB_TYPE_AND_CODE,'CATG'),CG.ATTRIB_ALIAS_NAME) 
             BULK COLLECT INTO T_VARCHAR_DATA
         FROM 
             T_TRANS_ITEM_DTL SB, V_ITEM_VARIANT_DTL IV,  
             (
                 SELECT
                     PML.PARTY_MISC_LINK_ID AS PK_ID,PML.PARTY_ID,SAM.ATTRIB_DESC AS CATG,SAM.ATTRIB_CODE AS CATG_CODE, 
                     PML.ATTRIB_ALIAS_NAME,PML.LINK_TYPE,PML.ATTRIB_ID1
                 FROM 
                     T_PARTY_MISC_LINK PML,
                     T_ITEM_ATTRIB_MASTER SAM,
                     T_TRANS_HDR TH,T_TRANS_HDR_EXTD TEXTD  
                 WHERE 
                     TH.TRANS_ID = TEXTD.TRANS_ID(+) AND    
                     TEXTD.PARTY_ID = PML.PARTY_ID(+) AND  
                     PML.ATTRIB_ID1 =SAM.ATTRIB_ID (+) AND
                     TH.TRANS_ID = arrData(1) AND 
                     PML.LINK_TYPE = 'CG'  
              )CG
         WHERE 
             F_GET_ATTRIBUTE_VALUE(IV.ATTRIB_TYPE_AND_CODE||'^'||IV.ATTRIB_TYPE_AND_CODE,'CATG') = CG.CATG_CODE(+) AND 
             SB.VARIANT_ID  = IV.VARIANT_ID (+) AND
             IV.ITEM_TYPE_ID = 1001   AND 
             SB.TRANS_ITEM_ID = arrData(2); 

    ELSIF qryType = 'GET-PARTYWISE_SUBCAT_ALIAS' THEN 
         SELECT  
             DISTINCT DECODE(SC.ATTRIB_ALIAS_NAME,NULL,F_GET_ATTRIBUTE_VALUE(IV.ATTRIB_TYPE_AND_CODE,'SUBCAT'),SC.ATTRIB_ALIAS_NAME) 
             BULK COLLECT INTO T_VARCHAR_DATA
         FROM 
             T_TRANS_ITEM_DTL SB, V_ITEM_VARIANT_DTL IV,  
             (
                 SELECT
                     PML.PARTY_MISC_LINK_ID AS PK_ID,PML.PARTY_ID,SAM.ATTRIB_DESC AS SUBCAT,SAM.ATTRIB_CODE AS SUBCAT_CODE, 
                     PML.ATTRIB_ALIAS_NAME,PML.LINK_TYPE,PML.ATTRIB_ID1
                 FROM 
                     T_PARTY_MISC_LINK PML,
                     T_ITEM_ATTRIB_MASTER SAM,
                     T_TRANS_HDR TH,T_TRANS_HDR_EXTD TEXTD  
                 WHERE 
                     TH.TRANS_ID = TEXTD.TRANS_ID(+) AND    
                     TEXTD.PARTY_ID = PML.PARTY_ID(+) AND  
                     PML.ATTRIB_ID1 =SAM.ATTRIB_ID (+) AND
                     TH.TRANS_ID = arrData(1) AND 
                     PML.LINK_TYPE = 'SC'  
              )SC
         WHERE 
             F_GET_ATTRIBUTE_VALUE(IV.ATTRIB_TYPE_AND_CODE||'^'||IV.ATTRIB_TYPE_AND_CODE,'SUBCAT') = SC.SUBCAT_CODE(+) AND 
             SB.VARIANT_ID  = IV.VARIANT_ID (+) AND
             IV.ITEM_TYPE_ID = 1001   AND 
             SB.TRANS_ITEM_ID = arrData(2); 

    ELSIF qryType = 'GET_FINDING_VARIANT_ALIAS' THEN     
        SELECT 
            PML.ATTRIB_ALIAS_NAME
            BULK COLLECT INTO T_VARCHAR_DATA 
        FROM 
            T_PARTY_MISC_LINK PML 
        WHERE
            PML.VARIANT_ID =  arrData(2)
            AND PML.PARTY_ID = arrData(1)
            AND PML.LINK_TYPE = 'FN';

    ELSIF qryType = 'GET_STONE_VARIANT_ALIAS' THEN     
        SELECT 
            PML.ATTRIB_ALIAS_NAME
            BULK COLLECT INTO T_VARCHAR_DATA 
        FROM 
            T_PARTY_MISC_LINK PML 
        WHERE
            PML.VARIANT_ID =  arrData(2)
            AND PML.PARTY_ID = arrData(1)
            AND PML.LINK_TYPE = 'SV';

     ELSIF qryType = 'GET-PARTYWISE-QLTY-CODE' THEN
         SELECT  
             DISTINCT QLTY.ATTRIB_ALIAS_NAME 
             BULK COLLECT INTO T_VARCHAR_DATA
         FROM 
             T_TRANS_ITEM_BOM_DTL SB, V_ITEM_VARIANT_DTL IV,  
             (
                 SELECT
                     PML.PARTY_MISC_LINK_ID AS PK_ID,PML.PARTY_ID,SAM.ATTRIB_DESC AS QUALITY,SAM.ATTRIB_CODE AS QLTY_CODE, 
                     PML.ATTRIB_ALIAS_NAME,PML.LINK_TYPE,PML.ATTRIB_ID1
                 FROM 
                     T_PARTY_MISC_LINK PML,
                     T_ITEM_ATTRIB_MASTER SAM,
                     T_TRANS_HDR TH,T_TRANS_HDR_EXTD TEXTD  
                 WHERE 
                     TH.TRANS_ID = TEXTD.TRANS_ID(+) AND    
                     TEXTD.PARTY_ID = PML.PARTY_ID(+) AND  
                     PML.ATTRIB_ID1 =SAM.ATTRIB_ID (+) AND
                     TH.TRANS_ID = arrData(1) AND 
                     PML.LINK_TYPE = 'A'  
              )QLTY               
         WHERE 
             F_GET_ATTRIBUTE_VALUE(IV.ATTRIB_TYPE_AND_CODE,'STNQLTY') = QLTY.QLTY_CODE(+) AND 
             SB.BOM_VARIANT_ID  = IV.VARIANT_ID (+) AND
             IV.ITEM_TYPE_ID = 1005   AND 
             SB.TRANS_ITEM_ID = arrData(2); 

     ELSIF qryType = 'GET-PARTYWISE-PURITY' THEN
         SELECT  
             DISTINCT KT.ATTRIB_ALIAS_NAME
             BULK COLLECT INTO T_VARCHAR_DATA
         FROM 
             T_TRANS_ITEM_BOM_DTL SB, V_ITEM_VARIANT_DTL IV,  
             (
                 SELECT
                     PML.PARTY_MISC_LINK_ID AS PK_ID,PML.PARTY_ID,SAM.ATTRIB_DESC AS KT,SAM.ATTRIB_CODE AS KT_CODE, 
                     PML.ATTRIB_ALIAS_NAME, PML.NOTES_1, PML.LINK_TYPE,PML.ATTRIB_ID1
                 FROM 
                     T_PARTY_MISC_LINK PML,
                     T_ITEM_ATTRIB_MASTER SAM,
                     T_TRANS_HDR TH,T_TRANS_HDR_EXTD TEXTD  
                 WHERE 
                     TH.TRANS_ID = TEXTD.TRANS_ID(+) AND    
                     TEXTD.PARTY_ID = PML.PARTY_ID(+) AND  
                     PML.ATTRIB_ID1 =SAM.ATTRIB_ID (+) AND
                     TH.TRANS_ID = arrData(1) AND 
                     PML.LINK_TYPE = 'KT'  
              )KT
         WHERE 
             F_GET_ATTRIBUTE_VALUE(IV.ATTRIB_TYPE_AND_CODE,'KT') = KT.KT_CODE(+) AND 
             SB.BOM_VARIANT_ID  = IV.VARIANT_ID (+) AND
             IV.ITEM_TYPE_ID = 1004   AND 
             SB.TRANS_ITEM_ID = arrData(2); 

    ELSIF qryType = 'GET_STYLE_ITEM_ALIAS' THEN     
        SELECT 
            PML.ATTRIB_ALIAS_NAME
            BULK COLLECT INTO T_VARCHAR_DATA 
        FROM 
            T_PARTY_MISC_LINK PML 
        WHERE
            PML.ATTRIB_ID1 =  arrData(2)
            AND PML.PARTY_ID = arrData(1)
            AND PML.LINK_TYPE = 'SY';    

     ELSIF qryType = 'GET-PARTYWISE-THEME' THEN
         SELECT  
             DISTINCT THEM.ATTRIB_ALIAS_NAME
             BULK COLLECT INTO T_VARCHAR_DATA
         FROM 
             T_TRANS_ITEM_DTL SB, V_ITEM_VARIANT_DTL IV,  
             (
                 SELECT
                     PML.PARTY_MISC_LINK_ID AS PK_ID,PML.PARTY_ID,SAM.ATTRIB_DESC AS THEME,SAM.ATTRIB_CODE AS THEME_CODE, 
                     PML.ATTRIB_ALIAS_NAME, PML.NOTES_1, PML.LINK_TYPE,PML.ATTRIB_ID1
                 FROM 
                     T_PARTY_MISC_LINK PML,
                     T_ITEM_ATTRIB_MASTER SAM,
                     T_TRANS_HDR TH,T_TRANS_HDR_EXTD TEXTD  
                 WHERE 
                     TH.TRANS_ID = TEXTD.TRANS_ID(+) AND    
                     TEXTD.PARTY_ID = PML.PARTY_ID(+) AND  
                     PML.ATTRIB_ID1 = SAM.ATTRIB_ID (+) AND
                     TH.TRANS_ID = arrData(1) AND 
                     PML.LINK_TYPE = 'TH'  
              )THEM
         WHERE 
             F_GET_ATTRIBUTE_VALUE(IV.ATTRIB_TYPE_AND_CODE||'^'||IV.ATTRIB_TYPE_AND_CODE,'THEME') = THEM.THEME_CODE(+) AND 
             SB.VARIANT_ID  = IV.VARIANT_ID (+) AND
             IV.ITEM_TYPE_ID = 1001 AND 
             SB.TRANS_ITEM_ID = arrData(2); 

     ELSIF qryType = 'GET-PARTYWISE-COLLETION' THEN
         SELECT  
             DISTINCT COLL.ATTRIB_ALIAS_NAME
             BULK COLLECT INTO T_VARCHAR_DATA
         FROM 
             T_TRANS_ITEM_DTL SB, V_ITEM_VARIANT_DTL IV,  
             (
                 SELECT
                     PML.PARTY_MISC_LINK_ID AS PK_ID,PML.PARTY_ID,SAM.ATTRIB_DESC AS COLL,SAM.ATTRIB_CODE AS COLL_CODE, 
                     PML.ATTRIB_ALIAS_NAME, PML.NOTES_1, PML.LINK_TYPE,PML.ATTRIB_ID1
                 FROM 
                     T_PARTY_MISC_LINK PML,
                     T_ITEM_ATTRIB_MASTER SAM,
                     T_TRANS_HDR TH,T_TRANS_HDR_EXTD TEXTD  
                 WHERE 
                     TH.TRANS_ID = TEXTD.TRANS_ID(+) AND    
                     TEXTD.PARTY_ID = PML.PARTY_ID(+) AND  
                     PML.ATTRIB_ID1 =SAM.ATTRIB_ID (+) AND
                     TH.TRANS_ID = arrData(1) AND 
                     PML.LINK_TYPE = 'LL'  
              )COLL
         WHERE 
             F_GET_ATTRIBUTE_VALUE(IV.ATTRIB_TYPE_AND_CODE||'^'||IV.ATTRIB_TYPE_AND_CODE,'COLCTN') = COLL.COLL_CODE(+) AND 
             SB.VARIANT_ID  = IV.VARIANT_ID(+) AND
             IV.ITEM_TYPE_ID = 1001 AND 
             SB.TRANS_ITEM_ID = arrData(2); 

    ELSIF qryType = 'GET_METAL_VARIANT_ALIAS' THEN     
        SELECT 
            PML.ATTRIB_ALIAS_NAME
            BULK COLLECT INTO T_VARCHAR_DATA 
        FROM 
            T_PARTY_MISC_LINK PML 
        WHERE
            PML.VARIANT_ID =  arrData(2)
            AND PML.PARTY_ID = arrData(1)
            AND PML.LINK_TYPE = 'MV';

    ELSIF qryType = 'GET-STONE-DESC' THEN    
    
        SELECT DESCRIPTION
        BULK COLLECT INTO T_VARCHAR_DATA 
        FROM 
            (   
                SELECT
                    TRANS_ITEM_ID, SOR_ORDER, DESCRIPTION
                FROM                
                (
                    SELECT
                        TID.TRANS_ITEM_ID,
                        DENSE_RANK() OVER(ORDER BY F_GET_ATTRIBUTE(IV.ATTRIB_TYPE_AND_VALUE,'STNSHP')) AS SOR_ORDER,
                        IV.ITEM_NAME || ' ' ||F_GET_ATTRIBUTE(IV.ATTRIB_TYPE_AND_VALUE,'STNSHP')  || ' ' ||
                        ROUND(SUM(DECODE(IV.ITEM_STOCK_UOM_CODE,'PCS',TIBD.QUANTITY,TIBD.QUANTITY * TIBD.CONVERSION_FACTOR))) || ' Pcs ' || 
                        TO_CHAR(SUM(DECODE(IV.ITEM_STOCK_UOM_CODE,'WT',TIBD.QUANTITY,TIBD.QUANTITY * TIBD.CONVERSION_FACTOR)),'0.000' ) || ' Cts'  AS DESCRIPTION
                    FROM
                        T_TRANS_ITEM_DTL TID,
                        T_TRANS_ITEM_BOM_DTL TIBD,
                        V_ITEM_VARIANT_RTN_DTL IV
                    WHERE
                        TID.TRANS_ITEM_ID =  TIBD.TRANS_ITEM_ID
                        AND TIBD.BOM_VARIANT_ID = IV.VARIANT_ID
                        AND IV.ITEM_TYPE_ID = 1005
                        AND TID.TRANS_ITEM_ID = arrData(1)
                    GROUP BY 
                        TID.TRANS_ITEM_ID,IV.ITEM_NAME,F_GET_ATTRIBUTE(IV.ATTRIB_TYPE_AND_VALUE,'STNSHP')
                )ORDER BY TRANS_ITEM_ID, SOR_ORDER  
            );  

    ELSIF qryType = 'GET-SOR-METAL-LOSS' THEN   
        SELECT 
            SUM(ROUND(TMLD.LOSS_QUANTITY,2))
        BULK COLLECT INTO T_VARCHAR_DATA
        FROM
            V_TRANS_MFG_LOSS_DTL TMLD, T_STOCK_BATCH_TRANS_LINK SBTL, V_ITEM_VARIANT_RTN_DTL MTLV  
        WHERE TMLD.VARIANT_ID = MTLV.VARIANT_ID
            AND TMLD.BATCH_ID = SBTL.BATCH_ID(+) 
            AND SBTL.SOR_TRANS_ITEM_ID = arrData(1)
            AND MTLV.ITEM_GROUP_ID = arrData(2);

    ELSIF qryType = 'GET-SOR-STONE-LOSS' THEN  
        SELECT 
            'LOSSQTY|'||NVL(SUM(TMLD.LOSS_QUANTITY*TMLD.LOSS_CONVERSION_FACTOR),0)||'^'||'LOSSWT|'||NVL(SUM(TMLD.LOSS_QUANTITY),0)||'^'|| 
            'BRKQTY|'||NVL(SUM(CASE WHEN RETID.STOCK_STATUS_ID = 1406 THEN DECODE(IVD.ITEM_STOCK_UOM_CODE,'PCS',RETID.QUANTITY, ROUND((RETID.QUANTITY * RETID.CONVERSION_FACTOR),0)) ELSE 0 END),0)||'^'||
            'BRKWT|'||NVL(SUM(CASE WHEN RETID.STOCK_STATUS_ID = 1406 THEN DECODE(IVD.ITEM_STOCK_UOM_CODE,'WT',RETID.QUANTITY, ROUND((RETID.QUANTITY * RETID.CONVERSION_FACTOR),3)) ELSE 0 END),0)
        BULK COLLECT INTO T_VARCHAR_DATA
        FROM
            V_TRANS_MFG_LOSS_DTL TMLD, T_STOCK_BATCH_TRANS_LINK SBTL, V_ITEM_VARIANT_RTN_DTL IVD,
            (SELECT RETID.TRANS_ID , RETID.STOCK_STATUS_ID , SUM(RETID.QUANTITY) AS QUANTITY,SUM(RETID.CONVERSION_FACTOR) AS CONVERSION_FACTOR ,SUM(RETID.STOCK_VALUE) AS STOCK_VALUE FROM T_TRANS_ITEM_DTL RETID ,T_TRANS_HDR TH WHERE RETID.TRANS_ID = TH.TRANS_ID AND TH.TRANS_TYPE = 'RTN' AND RETID.ROW_STATUS = 1  GROUP BY RETID.TRANS_ID , RETID.STOCK_STATUS_ID)RETID  
        WHERE 
            TMLD.RETURN_TRANS_ID = RETID.TRANS_ID
            AND TMLD.VARIANT_ID = IVD.VARIANT_ID
            AND TMLD.BATCH_ID = SBTL.BATCH_ID(+) 
            AND IVD.ITEM_TYPE_ID = 1005
            AND SBTL.SOR_TRANS_ITEM_ID = arrData(1);

    ELSIF qryType = 'GET-SOR-REJECTION-PCS-WT' THEN 
        SELECT 
            'REJPCS|'||NVL(SUM(DECODE(IV.ITEM_STOCK_UOM_CODE,'PCS',STS.QUANTITY,STS.QUANTITY*STS.CONVERSION_FACTOR)),0)||'^'|| 
            'REJWT|'||ROUND(NVL(SUM(DECODE(IV.ITEM_STOCK_UOM_CODE,'WT',STS.QUANTITY,STS.QUANTITY*STS.CONVERSION_FACTOR)),0),3)
        BULK COLLECT INTO T_VARCHAR_DATA
        FROM 
            T_TRANS_ITEM_DTL STS, T_TRANS_HDR STH, V_ITEM_VARIANT_RTN_DTL IV
        WHERE 
            STS.VARIANT_ID = IV.VARIANT_ID  AND 
            STS.TRANS_ID = STH.TRANS_ID  AND
            STS.SOR_TRANS_ITEM_ID = arrData(1) AND 
            STS.STOCK_STATUS_ID = 1405 AND                         
            STS.ROW_STATUS = 1 AND  
            STH.TRANS_SUBTYPE_ID <> 272 AND
            STH.LOCATION_ID = 2 AND 
            STH.ROW_STATUS = 1 AND
            STH.TRANS_TYPE = 'RTN';

    ELSIF qryType = 'GET_SKU_NO' THEN     
        EXECUTE IMMEDIATE
        'SELECT
            SKU.ADD_FLD1
        FROM
            MVW_VARIANT_SKU_NO SKU
        WHERE
            SKU.VARIANT_ID =  :V1'
		BULK COLLECT INTO T_VARCHAR_DATA
        USING arrData(1);
    
    ELSIF qryType = 'GET_LAST_ILO_DATE' THEN    

         SELECT DISTINCT TO_CHAR(MAX(TH.TRANS_DATE),'DD/MM/YYYY') AS TRANS_DATE 
         BULK COLLECT INTO T_VARCHAR_DATA
         FROM T_TRANS_HDR TH,T_TRANS_ITEM_DTL TID
         WHERE TH.TRANS_ID = TID.TRANS_ID
         AND TID.SRC_WCGROUP_ID = arrData(2)
         AND TH.TRANS_TYPE = 'ILO'
         AND TID.DEST_BATCH_ID = TO_NUMBER(arrData(1));
    
    ELSIF qryType = 'GET_STONE-COLOR(NATIVESHADE)' THEN   
        SELECT IM.ATTRIB_DESC BULK COLLECT INTO T_VARCHAR_DATA
        FROM T_ITEM_ATTRIB_MASTER_EXTD IAME , T_ITEM_ATTRIB_MASTER IM 
        WHERE 
            IAME.ATTRIB_ID1 = IM.ATTRIB_ID 
            AND IM.ATTRIB_TYPE_ID = 11030
            AND IAME.ATTRIB_ID = arrData(1)
        GROUP BY IM.ATTRIB_DESC ; 
    
    ELSIF qryType = 'GET_RETURN_TYPE' THEN 
    
        SELECT DECODE(FTBH.RATING, -1, 'Refund', 'Exchange') AS RETURN_TYPE
        BULK COLLECT INTO T_VARCHAR_DATA
        FROM T_FA_TRANS_BILL_HDR FTBH, T_FA_TRANS_HDR FTH
        WHERE FTBH.FA_TRANS_ID = FTH.FA_TRANS_ID AND FTH.REF_TRANS_ID = TO_NUMBER(arrData(1));
    
    ELSIF qryType = 'GET_LAST_IN_DATE' THEN 
        SELECT DISTINCT TO_CHAR(MAX(TH.TRANS_DATE),'DD/MM/YYYY') AS TRANS_DATE 
        BULK COLLECT INTO T_VARCHAR_DATA
        FROM T_TRANS_HDR TH,T_TRANS_ITEM_DTL TID
        WHERE TH.TRANS_ID = TID.TRANS_ID   
        AND TID.DEST_WCGROUP_ID = arrData(2)          
        AND TH.TRANS_TYPE IN('ILI','TRO','TRN')
        AND TID.DEST_STOCK_ID = arrData(1);

    ELSIF qryType = 'GET_FIRST_STOCK_IN_DATE' THEN     
        SELECT DISTINCT TO_CHAR(MIN(TH.TRANS_DATE),'DD/MM/YYYY') AS TRANS_DATE 
        BULK COLLECT INTO T_VARCHAR_DATA
        FROM T_TRANS_HDR TH,T_TRANS_ITEM_DTL TID
        WHERE TH.TRANS_ID = TID.TRANS_ID
        AND TH.TRANS_TYPE IN('OPS','PRI','GRN','SLG')  
        AND TID.STOCK_CODE = ARRDATA(1);
        
    ELSIF qryType = 'GET_STOCK_LATEST_SP' THEN     
        SELECT F_GETTRANSPRICEVALUE(0,TID.TRANS_ITEM_ID,0,0,'T') AS AMNT
        BULK COLLECT INTO T_VARCHAR_DATA
        FROM T_TRANS_ITEM_DTL TID
        WHERE TID.TRANS_ITEM_ID = (SELECT MAX(TID.TRANS_ITEM_ID)
                                   FROM T_TRANS_HDR TH, T_TRANS_ITEM_DTL TID
                                   WHERE TH.TRANS_ID = TID.TRANS_ID
                                   AND TID.ROW_STATUS = 1
                                   AND TH.TRANS_TYPE = 'SLG'
                                   AND TID.STOCK_CODE = ARRDATA(1)); 
                                           
    ELSIF qryType = 'GET_INT_DATA(LINK-TYP-ATC)' THEN 
        SELECT VARIANT_NAME  BULK COLLECT INTO T_VARCHAR_DATA
        FROM T_PARTY_MISC_LINK PML ,T_ITEM_ATTRIB_MASTER IAM 
        WHERE 
            PML.ATTRIB_ID1 = IAM.ATTRIB_ID  
            AND VARIANT_NAME IS NOT NULL
            AND PML.LINK_TYPE = '||ARRDATA(1)||'
            AND IAM.ATTRIB_CODE = '||ARRDATA(2)||'     
        GROUP BY VARIANT_NAME  ;

    ELSIF qryType = 'FETCH-LINKED-ORDER-NO' THEN   
        SELECT LNK_TH.DOC_NO BULK COLLECT INTO T_VARCHAR_DATA 
        FROM T_TRANS_ITEM_DTL TID,T_TRANS_ITEM_DTL_EXTD TIDE , T_TRANS_ITEM_DTL LNK_DTL, T_TRANS_HDR LNK_TH
        WHERE TID.TRANS_ITEM_ID = TIDE.TRANS_ITEM_ID 
            AND TO_NUMBER(TIDE.GC_NO) = LNK_DTL.TRANS_ITEM_ID(+)
            AND LNK_DTL.TRANS_ID = LNK_TH.TRANS_ID
            AND TID.TRANS_ID = qryValues;   
     
    ELSIF qryType = 'FETCH-BRAND-NAME-FROM-INVOICE' THEN   
        SELECT F_GET_ATTRIBUTE(IVD.ATTRIB_TYPE_AND_VALUE||'^'||IVD.ATTRIB_TYPE_AND_VALUE_A, 'BRAND') AS BRAND
        BULK COLLECT INTO T_VARCHAR_DATA
        FROM T_TRANS_ITEM_DTL TID, V_ITEM_VARIANT_RTN_DTL IVD 
        WHERE TID.VARIANT_ID = IVD.VARIANT_ID AND TID.ROW_STATUS = 1 AND TID.TRANS_ID = arrData(1); 

    ELSIF qryType = 'FETCH-PAYMENT-MODE-FOR-FA-TRANS-ID' THEN
        SELECT REPLACE(LISTAGG_CLOB(CFD.CONFIG_VALUE), ',', ' / ') AS PAY_MODE
        BULK COLLECT INTO T_VARCHAR_DATA
        FROM T_FA_TRANS_RECPAY_HDR FTRH, V_CONFIG_FIXED_DATA CFD 
        WHERE FTRH.PAY_MODE_ID = CFD.CONFIG_ID AND FTRH.ROW_STATUS = 1 AND FTRH.FA_TRANS_ID = arrData(1); 

    ELSIF qryType = 'FETCH-ISSUE-QUANTITY' THEN 

        SELECT SUM(QUANTITY) AS TOTAL_ISS_QTY 
        BULK COLLECT INTO T_VARCHAR_DATA
        FROM
        (
            SELECT 
            TID.QUANTITY,
            ROW_NUMBER() OVER(PARTITION BY TID.SOR_TRANS_ITEM_ID,TID.SRC_BATCH_ID ORDER BY NULL) AS ROW_NO
            FROM T_TRANS_HDR TH, T_TRANS_ITEM_DTL TID, T_STOCK_BATCH_DTL SBD, V_ITEM_VARIANT_RTN_DTL VD
            WHERE
            TID.SRC_BATCH_ID = SBD.BATCH_ID
            --AND SBD.PBAG_ID IS NULL
            AND SBD.BATCH_TYPE_ID = 1
            AND TID.VARIANT_ID = VD.VARIANT_ID AND VD.ITEM_TYPE_ID = 1001
            AND TH.TRANS_ID = TID.TRANS_ID
            AND TID.SRC_BATCH_ID > 0
            AND TID.SOR_TRANS_ITEM_ID = arrData(1)
            AND TH.TRANS_SUBTYPE_ID = 129 
            AND TH.TRANS_TYPE = 'ISS'
            AND TH.TRANS_DATE <= F_CONVERT_DATE(''||arrData(2)||'','DD/MM/YYYY','DD/MM/YYYY') 
        )WHERE ROW_NO = 1;

    ELSIF qryType = 'FETCH-ACTUAL-ISS-PCS' THEN 
/*
        SELECT SUM(ROUND(TID.QUANTITY*TID.CONVERSION_FACTOR))
        BULK COLLECT INTO T_VARCHAR_DATA
        FROM T_TRANS_HDR TH, T_TRANS_ITEM_DTL TID, V_ITEM_VARIANT_RTN_DTL IVD
        WHERE 
            TID.VARIANT_ID = IVD.VARIANT_ID 
            AND TH.TRANS_ID = TID.TRANS_ID
            AND TID.ROW_STATUS = 1   
            AND TH.TRANS_TYPE = 'TRO'
            AND TH.TRANS_DATE <= F_CONVERT_DATE(''||arrData(2)||'','DD/MM/YYYY','DD/MM/YYYY')
            AND TID.SOR_TRANS_ITEM_ID = arrData(1) 
            AND F_GET_ATTRIBUTE(IVD.ATTRIB_TYPE_AND_CODE,'STNTYPE') = arrData(3)
            AND F_GET_ATTRIBUTE(IVD.ATTRIB_TYPE_AND_CODE,'STNQLTY') = arrData(4)
            AND F_GET_ATTRIBUTE(IVD.ATTRIB_TYPE_AND_CODE,'STNSHP') = arrData(5)
            AND F_GET_ATTRIBUTE(IVD.ATTRIB_TYPE_AND_CODE,'STNCUT') = arrData(6)
            AND IVD.ITEM_TYPE_ID = 1005;
*/
        SELECT SUM(ROUND(TIB.QUANTITY*TIB.CONVERSION_FACTOR))
        BULK COLLECT INTO T_VARCHAR_DATA
        FROM T_TRANS_HDR TH, T_TRANS_ITEM_DTL TID, T_TRANS_ITEM_BOM_DTL TIB, V_ITEM_VARIANT_RTN_DTL IVD
        WHERE 
            TIB.BOM_VARIANT_ID = IVD.VARIANT_ID 
            AND TID.TRANS_ITEM_ID = TIB.TRANS_ITEM_ID 
            AND TH.TRANS_ID = TID.TRANS_ID
            AND TID.ROW_STATUS = 1   
            AND TH.TRANS_TYPE = 'SOR'
            AND TID.TRANS_ITEM_ID = arrData(1) 
            AND F_GET_ATTRIBUTE(IVD.ATTRIB_TYPE_AND_CODE,'STNTYPE') = arrData(3)
--            AND F_GET_ATTRIBUTE(IVD.ATTRIB_TYPE_AND_CODE,'STNQLTY') = arrData(4)
            AND F_GET_ATTRIBUTE(IVD.ATTRIB_TYPE_AND_CODE,'STNSHP') = arrData(5)
            AND F_GET_ATTRIBUTE(IVD.ATTRIB_TYPE_AND_CODE,'STNCUT') = arrData(6)
            AND IVD.ITEM_TYPE_ID = 1005;

    ELSIF qryType = 'FETCH-ACTUAL-ISS-WT' THEN 
/*
        SELECT SUM(TID.QUANTITY) 
        BULK COLLECT INTO T_VARCHAR_DATA
        FROM T_TRANS_HDR TH, T_TRANS_ITEM_DTL TID, V_ITEM_VARIANT_RTN_DTL IVD
        WHERE 
            TID.VARIANT_ID = IVD.VARIANT_ID 
            AND TH.TRANS_ID = TID.TRANS_ID
            AND TID.ROW_STATUS = 1   
            AND TH.TRANS_TYPE = 'TRO'
            AND TH.TRANS_DATE <= F_CONVERT_DATE(''||arrData(2)||'','DD/MM/YYYY','DD/MM/YYYY')
            AND TID.SOR_TRANS_ITEM_ID = arrData(1) 
            AND F_GET_ATTRIBUTE(IVD.ATTRIB_TYPE_AND_CODE,'STNTYPE') = arrData(3)
            AND F_GET_ATTRIBUTE(IVD.ATTRIB_TYPE_AND_CODE,'STNQLTY') = arrData(4)
            AND F_GET_ATTRIBUTE(IVD.ATTRIB_TYPE_AND_CODE,'STNSHP') = arrData(5)
            AND F_GET_ATTRIBUTE(IVD.ATTRIB_TYPE_AND_CODE,'STNCUT') = arrData(6)
            AND IVD.ITEM_TYPE_ID = 1005;
*/
        SELECT SUM(TIB.QUANTITY) 
        BULK COLLECT INTO T_VARCHAR_DATA
        FROM T_TRANS_HDR TH, T_TRANS_ITEM_DTL TID, T_TRANS_ITEM_BOM_DTL TIB, V_ITEM_VARIANT_RTN_DTL IVD
        WHERE 
            TIB.BOM_VARIANT_ID = IVD.VARIANT_ID 
            AND TID.TRANS_ITEM_ID = TIB.TRANS_ITEM_ID 
            AND TH.TRANS_ID = TID.TRANS_ID
            AND TID.ROW_STATUS = 1   
            AND TH.TRANS_TYPE = 'SOR'
            AND TID.SOR_TRANS_ITEM_ID = arrData(1) 
            AND F_GET_ATTRIBUTE(IVD.ATTRIB_TYPE_AND_CODE,'STNTYPE') = arrData(3)
--            AND F_GET_ATTRIBUTE(IVD.ATTRIB_TYPE_AND_CODE,'STNQLTY') = arrData(4)
            AND F_GET_ATTRIBUTE(IVD.ATTRIB_TYPE_AND_CODE,'STNSHP') = arrData(5)
            AND F_GET_ATTRIBUTE(IVD.ATTRIB_TYPE_AND_CODE,'STNCUT') = arrData(6)
            AND IVD.ITEM_TYPE_ID = 1005;

    ELSIF qryType = 'FETCH-ADJ-VOUCHER-NO' THEN
        SELECT FTH.VOUCHER_NO
        BULK COLLECT INTO T_VARCHAR_DATA
        FROM T_FA_TRANS_RECPAY_DTL FTRD, T_FA_TRANS_HDR FTH 
        WHERE FTRD.FA_TRANS_ID = FTH.FA_TRANS_ID AND FTRD.RECPAY_TYPE_ID = 30804 AND FTH.ROW_STATUS > 0 AND FTRD.ROW_STATUS > 0 AND FTRD.FA_TRANS_BILL_ID = arrData(1)
        GROUP BY FTH.VOUCHER_NO; 

    ELSIF qryType = 'FETCH-ADJ-STL-FA-TRANS-ID' THEN
        SELECT FTH.FA_TRANS_ID
        BULK COLLECT INTO T_VARCHAR_DATA
        FROM T_FA_TRANS_RECPAY_DTL FTRD, T_FA_TRANS_HDR FTH 
        WHERE FTH.FA_TRANS_TYPE = 'STL' AND FTRD.FA_TRANS_ID = FTH.FA_TRANS_ID AND FTRD.RECPAY_TYPE_ID = 30804 AND FTH.ROW_STATUS > 0 AND FTRD.ROW_STATUS > 0 AND FTRD.FA_TRANS_BILL_ID = arrData(1)
        GROUP BY FTH.FA_TRANS_ID; 
 
    ELSIF qryType = 'FETCH-HSN-SAC-TRANS-ID' THEN
        SELECT DISTINCT F_GET_ATTRIBUTE_VALUE(IV.ATTRIB_TYPE_AND_CODE||'^'||IV.ATTRIB_TYPE_AND_CODE_A,'HSN_SAC_CODE')
        BULK COLLECT INTO T_VARCHAR_DATA
        FROM T_TRANS_ITEM_DTL TID, V_ITEM_VARIANT_RTN_DTL IV
        WHERE TID.VARIANT_ID = IV.VARIANT_ID AND TID.ROW_STATUS = 1 AND TID.TRANS_ID = arrData(1)
        AND F_GET_ATTRIBUTE_VALUE(IV.ATTRIB_TYPE_AND_CODE||'^'||IV.ATTRIB_TYPE_AND_CODE_A,'HSN_SAC_CODE') IS NOT NULL; 

    ELSIF qryType = 'FETCH-HSN-SAC-TRANS-ITEM-ID' THEN
        SELECT DISTINCT F_GET_ATTRIBUTE_VALUE(IV.ATTRIB_TYPE_AND_CODE||'^'||IV.ATTRIB_TYPE_AND_CODE_A,'HSN_SAC_CODE')
        BULK COLLECT INTO T_VARCHAR_DATA
        FROM T_TRANS_ITEM_DTL TID, V_ITEM_VARIANT_RTN_DTL IV
        WHERE TID.VARIANT_ID = IV.VARIANT_ID AND TID.ROW_STATUS = 1 AND TID.TRANS_ITEM_ID = arrData(1)
        AND F_GET_ATTRIBUTE_VALUE(IV.ATTRIB_TYPE_AND_CODE||'^'||IV.ATTRIB_TYPE_AND_CODE_A,'HSN_SAC_CODE') IS NOT NULL; 


    ELSIF qryType = 'DIA_COLOR_CERT(BOM-TRANS_ITEM_ID)_BI' THEN
        SELECT 
            CASE WHEN SBCD.CERTIFICATE_ID > 0 THEN 
            F_GET_ATTRIBUTE(SS.ATTRIB_value,11429) ELSE F_GET_ATTRIBUTE(mv.ATTRIB_TYPE_AND_VALUE,'SHADE') END  
            BULK COLLECT INTO T_VARCHAR_DATA
        FROM 
            T_TRANS_ITEM_BOM_DTL STB,V_ITEM_VARIANT_RTN_DTL MV ,T_STOCK_BOM_ATTRIB_SMRY SS ,
            T_STOCK_BOM_CERTIFICATE_DTL SBCD 
        WHERE 
            STB.BOM_VARIANT_ID  = MV.VARIANT_ID
            AND STB.SRC_STOCK_BOM_ID = SS.STOCK_BOM_ID(+)  
            AND STB.SRC_STOCK_BOM_ID = SBCD.STOCK_BOM_ID(+)
            AND MV.ITEM_TYPE_ID = 1005
            AND SBCD.CERTIFICATE_ID > 0   
            AND STB.TRANS_ITEM_ID = qryValues
        GROUP BY CASE WHEN SBCD.CERTIFICATE_ID > 0 THEN F_GET_ATTRIBUTE(SS.ATTRIB_value,11429) ELSE F_GET_ATTRIBUTE(mv.ATTRIB_TYPE_AND_VALUE,'SHADE') END ; 

    ELSIF qryType = 'STONE_SHAPE_BI' THEN

        SELECT DISTINCT F_GET_ATTRIBUTE_VALUE(MV.ATTRIB_TYPE_AND_VALUE,'STNSHP')
        BULK COLLECT INTO T_VARCHAR_DATA
        FROM T_TRANS_ITEM_BOM_DTL STB,V_ITEM_VARIANT_RTN_DTL MV,T_STOCK_BOM_CERTIFICATE_DTL SCD 
        WHERE STB.BOM_VARIANT_ID  = MV.VARIANT_ID
        AND STB.SRC_STOCK_BOM_ID = SCD.STOCK_BOM_ID
        AND SCD.CERTIFICATE_ID >0
        AND MV.ITEM_TYPE_ID = 1005 
        AND STB.TRANS_ITEM_ID = qryValues;
    

    ELSIF qryType = 'STONE_QUALITY_BI' THEN

        SELECT DISTINCT MV.QUALITY_DESC
        BULK COLLECT INTO T_VARCHAR_DATA
        FROM T_TRANS_ITEM_BOM_DTL STB,T_SMRY_ITEM_VARIANT_STONE MV,T_STOCK_BOM_CERTIFICATE_DTL SCD 
        WHERE STB.BOM_VARIANT_ID  = MV.VARIANT_ID
        AND STB.SRC_STOCK_BOM_ID = SCD.STOCK_BOM_ID
        AND STB.TRANS_ITEM_ID = qryValues;

    ELSIF qryType = 'GET_PRANGE' THEN

        SELECT PRANGECODE 
        BULK COLLECT INTO T_VARCHAR_DATA
        FROM V_ATTRIB_SHAPE_RANGE SHR 
        WHERE SHR.ATTRIB_ID = qryValues;
        
    ELSIF qryType = 'FETCH_STONE_DETAILS_MJPL' THEN
        SELECT IVD.TAG_REMARK||'-'||NVL(CASE WHEN SUBSTR(TRIM(TO_CHAR(ROUND(DECODE(IVD.ITEM_STOCK_UOM_CODE,'WT',TIBD.QUANTITY,TIBD.QUANTITY * TIBD.CONVERSION_FACTOR),3),'999999999999999.999')),1,1) ='.' THEN '0'||TRIM(TO_CHAR(ROUND(DECODE(IVD.ITEM_STOCK_UOM_CODE,'WT',TIBD.QUANTITY,TIBD.QUANTITY * TIBD.CONVERSION_FACTOR),3),'999999999999999.999')) ELSE TRIM(TO_CHAR(ROUND(DECODE(IVD.ITEM_STOCK_UOM_CODE,'WT',TIBD.QUANTITY,TIBD.QUANTITY * TIBD.CONVERSION_FACTOR),3),'999999999999999.999')) END,'0.00')
        BULK COLLECT INTO T_VARCHAR_DATA
        FROM T_TRANS_ITEM_BOM_DTL TIBD, V_ITEM_VARIANT_RTN_DTL IVD 
        WHERE TIBD.BOM_VARIANT_ID = IVD.VARIANT_ID
        AND IVD.ITEM_TYPE_ID = 1005
        AND IVD.ITEM_GROUP_ID = arrData(2) 
        AND TRANS_ITEM_ID = arrData(1);           

    ELSIF qryType = 'LAST-ISSUE-PARTY' THEN   
--RAISE_APPLICATION_ERROR(-20001,'TEST->'||qryValues)    ;
        SELECT PARTY_NAME
        BULK COLLECT INTO T_VARCHAR_DATA
        FROM T_PARTY_MASTER
        WHERE PARTY_ID IN (
            SELECT PARTY_ID
            FROM (
                SELECT PARTY_ID FROM T_TRANS_ITEM_DTL TID,V_TRANS_HDR TH
                WHERE TID.TRANS_ID = TH.TRANS_ID
                AND TID.DEST_BATCH_ID > 0 AND TID.DEST_BATCH_ID = qryValues
                AND TH.TRANS_TYPE = 'ISS'
                ORDER BY TRANS_ITEM_ID DESC
            ) WHERE ROWNUM = 1
         );

    ELSIF qryType = 'GET-STONE-OPERATION(TRANS_ITEM_BOM_ID)' THEN
        SELECT 
            DISTINCT OM.OPERATION_NAME
        BULK COLLECT INTO T_VARCHAR_DATA
        FROM T_TRANS_ITEM_OPERATION_DTL TIOD, T_TRANS_ITEM_BOM_DTL TIB, 
            V_ITEM_VARIANT_RTN_DTL VD, T_OPERATION_MASTER OM
        WHERE 
            TIB.BOM_VARIANT_ID = VD.VARIANT_ID
            AND VD.ITEM_TYPE_ID = 1005
            AND TIOD.OPERATION_ID = OM.OPERATION_ID 
            AND TIOD.LABOUR_CALC_TRANS_ITEM_BOM_ID = TIB.TRANS_ITEM_BOM_ID
            AND TIOD.LABOUR_CALC_TRANS_ITEM_BOM_ID = qryValues;

    ELSIF qryType = 'GET-STONE-OPERATION(TRANS_ITEM_ID)' THEN
        SELECT 
            DISTINCT OM.OPERATION_NAME
        BULK COLLECT INTO T_VARCHAR_DATA
        FROM T_TRANS_ITEM_OPERATION_DTL TIOD, T_TRANS_ITEM_BOM_DTL TIB, 
            V_ITEM_VARIANT_RTN_DTL VD, T_OPERATION_MASTER OM
        WHERE 
            TIB.BOM_VARIANT_ID = VD.VARIANT_ID
            AND VD.ITEM_TYPE_ID = 1005
            AND TIOD.OPERATION_ID = OM.OPERATION_ID 
            AND TIOD.LABOUR_CALC_TRANS_ITEM_BOM_ID = TIB.TRANS_ITEM_BOM_ID
            AND TIB.TRANS_ITEM_ID = qryValues;
            
    ELSIF qryType = 'POLKI_QUALITY' THEN
         SELECT DISTINCT F_GET_ATTRIBUTE(MV.ATTRIB_TYPE_AND_CODE,'STNQLTY')  
         BULK COLLECT INTO T_VARCHAR_DATA
         FROM T_TRANS_ITEM_BOM_DTL STB,V_ITEM_VARIANT_DTL MV 
         WHERE STB.BOM_VARIANT_ID  = MV.VARIANT_ID
               AND ITEM_GROUP_ID = 4531
               AND STB.TRANS_ITEM_ID = qryValues;
               
    ELSIF qryType = 'DIA_GRADE' THEN
         SELECT DISTINCT F_GET_ATTRIBUTE(MV.ATTRIB_TYPE_AND_VALUE,'GRADE')  
         BULK COLLECT INTO T_VARCHAR_DATA
         FROM T_TRANS_ITEM_BOM_DTL STB,V_ITEM_VARIANT_DTL MV 
         WHERE STB.BOM_VARIANT_ID  = MV.VARIANT_ID
               AND ITEM_GROUP_ID = 1504  
               AND STB.TRANS_ITEM_ID = qryValues;               

    ELSIF qryType = 'DIA_CUT' THEN
         SELECT DISTINCT F_GET_ATTRIBUTE(MV.ATTRIB_TYPE_AND_CODE,'STNCUT')  
         BULK COLLECT INTO T_VARCHAR_DATA
         FROM T_TRANS_ITEM_BOM_DTL STB,V_ITEM_VARIANT_DTL MV 
         WHERE STB.BOM_VARIANT_ID  = MV.VARIANT_ID
               AND ITEM_GROUP_ID = 1504
               AND STB.TRANS_ITEM_ID = qryValues;

    ELSIF qryType = 'CLS_QUALITY(FAB)' THEN
         SELECT DISTINCT F_GET_ATTRIBUTE(MV.ATTRIB_TYPE_AND_CODE,'STNQLTY')  
         BULK COLLECT INTO T_VARCHAR_DATA
         FROM T_TRANS_ITEM_BOM_DTL STB,V_ITEM_VARIANT_DTL MV 
         WHERE STB.BOM_VARIANT_ID  = MV.VARIANT_ID
               AND ITEM_GROUP_ID NOT IN (1504,4531)
               AND ITEM_TYPE_ID = 1005
               AND STB.TRANS_ITEM_ID = qryValues;
    
    ELSIF qryType = 'GET-JWRETURNDATE(SORTRANSITEMID)' THEN
        SELECT TH.TRANS_DATE BULK COLLECT INTO T_VARCHAR_DATA
        FROM T_TRANS_HDR TH , T_TRANS_ITEM_DTL TID 
        WHERE TH.TRANS_ID = TID.TRANS_ID
            AND TH.TRANS_TYPE = 'JWR'
            AND TID.SOR_TRANS_ITEM_ID = qryValues 
            AND TID.ROW_STATUS = 1 ;
    
    ELSIF qryType = 'NETWT(FAB)' THEN
        SELECT SUM(WT) 
        BULK COLLECT INTO T_VARCHAR_DATA
        FROM
        (
            SELECT (DECODE(VD.ITEM_STOCK_UOM_CODE,'WT', TIB.QUANTITY,TIB.QUANTITY*TIB.CONVERSION_FACTOR)) AS WT
            FROM T_TRANS_ITEM_BOM_DTL TIB, V_ITEM_VARIANT_RTN_DTL VD
            WHERE TIB.BOM_VARIANT_ID = VD.VARIANT_ID
            AND VD.ITEM_TYPE_ID = 1004
            AND TIB.TRANS_ITEM_ID = qryValues
            UNION ALL
            SELECT (DECODE(VD.ITEM_STOCK_UOM_CODE,'WT', TIB.QUANTITY,TIB.QUANTITY*TIB.CONVERSION_FACTOR)) AS WT
            FROM T_TRANS_ITEM_BOM_DTL TIB, V_ITEM_VARIANT_RTN_DTL VD
            WHERE TIB.BOM_VARIANT_ID = VD.VARIANT_ID
            AND F_GET_ATTRIBUTE_ID(VD.ATTRIB_TYPE_AND_ATTRIB_ID,11012) IN (24956,25055)
            AND VD.ITEM_TYPE_ID = 1003
            AND TIB.TRANS_ITEM_ID = qryValues
        );

    ELSIF qryType = 'BATCH_CURRENT_DEPT' THEN
        BEGIN
            intCount := 0;        
        
            SELECT MAX(SBD.WCGROUP_ID) INTO intCount 
            FROM V_STOCK_BATCH_DTL SBD 
            WHERE SBD.BATCH_TYPE_ID  = 1  
            AND SBD.ROW_STATUS NOT IN (-1,-2,-3)  
            AND SBD.SOR_TRANS_ITEM_ID = arrData(1);

            IF intCount > 0 THEN
                SELECT 
                    WGM.WCGROUP_NAME
                BULK COLLECT INTO T_VARCHAR_DATA
                FROM 
                    V_STOCK_BATCH_DTL SBD,
                    T_WORKCENTER_GROUP_MASTER WGM
                WHERE
                    SBD.WCGROUP_ID = WGM.WCGROUP_ID
                    AND SBD.BATCH_TYPE_ID  = 1  
                    AND SBD.ROW_STATUS NOT IN (-1,-2,-3)  
                    AND SBD.SOR_TRANS_ITEM_ID = arrData(1);
            ELSE
                SELECT 
                    ISSWGM.WCGROUP_NAME
                BULK COLLECT INTO T_VARCHAR_DATA
                FROM 
                    V_STOCK_BATCH_DTL SBD,     
                    T_TRANS_ITEM_DTL ISSTID, T_WORKCENTER_GROUP_MASTER ISSWGM
                WHERE
                    ISSTID.SRC_WCGROUP_ID = ISSWGM.WCGROUP_ID
                    AND ISSTID.VARIANT_ID = arrData(2)
                    AND SBD.BATCH_ID = ISSTID.SRC_BATCH_ID 
                    AND SBD.SOR_TRANS_ITEM_ID =  ISSTID.SOR_TRANS_ITEM_ID
                    AND SBD.ISSUE_TRANS_ID = ISSTID.TRANS_ID
                    AND SBD.BATCH_TYPE_ID  = 1  
                    AND SBD.ROW_STATUS NOT IN (-1,-2,-3)  
                    AND SBD.SOR_TRANS_ITEM_ID = arrData(1);            
            END IF;

        END;

    ELSIF qryType = 'BATCH_CURRENT_WORKER' THEN
        BEGIN
            intCount := 0; 

            SELECT MAX(SBD.WC_ID) INTO intCount 
            FROM V_STOCK_BATCH_DTL SBD 
            WHERE SBD.BATCH_TYPE_ID  = 1  
            AND SBD.ROW_STATUS NOT IN (-1,-2,-3)  
            AND SBD.SOR_TRANS_ITEM_ID = arrData(1);

            IF intCount > 0 THEN
                SELECT 
                    WC.WC_NAME 
                BULK COLLECT INTO T_VARCHAR_DATA
                FROM 
                    V_STOCK_BATCH_DTL SBD,T_WORKCENTER_MASTER WC
                WHERE
                    SBD.WC_ID = WC.WC_ID
                    AND SBD.BATCH_TYPE_ID  = 1  
                    AND SBD.ROW_STATUS NOT IN (-1,-2,-3)  
                    AND SBD.SOR_TRANS_ITEM_ID = arrData(1);            
            ELSE
                SELECT 
                    PMJW.PARTY_NAME
                BULK COLLECT INTO T_VARCHAR_DATA
                FROM 
                    V_STOCK_BATCH_DTL SBD, T_PARTY_MASTER PMJW
                WHERE
                    SBD.PARTY_ID = PMJW.PARTY_ID
                    AND SBD.BATCH_TYPE_ID  = 1  
                    AND SBD.ROW_STATUS NOT IN (-1,-2,-3)  
                    AND SBD.SOR_TRANS_ITEM_ID = arrData(1);             
            END IF;
        
        END;

    ELSIF qryType = 'FETCH-BRAND-NAME-FOR-TRANS-ID' THEN
        SELECT DISTINCT F_GET_ATTRIBUTE_VALUE(IVD.ATTRIB_TYPE_AND_VALUE, 'BRAND') AS BRAND_NAME
        BULK COLLECT INTO T_VARCHAR_DATA
        FROM T_TRANS_ITEM_DTL TID, V_ITEM_VARIANT_RTN_DTL IVD
        WHERE TID.VARIANT_ID = IVD.VARIANT_ID AND TID.ROW_STATUS = 1 AND TID.TRANS_ID = qryValues;

     ELSIF qryType = 'METAL_RATE(BOM)' THEN
         SELECT
             NVL(MAX(TIBDE.TRANS_BOM_RATE),0)     
             BULK COLLECT INTO T_VARCHAR_DATA
         FROM
             T_TRANS_ITEM_BOM_DTL TIBD,
             V_ITEM_VARIANT_RTN_DTL IV,
             T_TRANS_ITEM_BOM_DTL_EXTD TIBDE
         WHERE
             TIBD.TRANS_ITEM_BOM_ID = TIBDE.TRANS_ITEM_BOM_ID (+)
             AND TIBD.BOM_VARIANT_ID = IV.VARIANT_ID 
             AND IV.ITEM_TYPE_ID = 1004
             AND TIBD.TRANS_ITEM_ID = qryValues
         GROUP BY 
             TIBD.TRANS_ITEM_ID;

    ELSIF qryType = 'GET-BOE-NO-FOR-EXPOSURE-REGISTER' THEN
        SELECT BOE_NO
        BULK COLLECT INTO T_VARCHAR_DATA
        FROM (
              SELECT CS.BOE_NO
              FROM V_CUSTOM_STOCK CS
              WHERE CS.REF_TRANS_ID = qryValues   
              GROUP BY CS.BOE_NO
             );

    ELSIF qryType = 'GET-BOE-DATE-FOR-EXPOSURE-REGISTER' THEN
        SELECT BOE_DATE
        BULK COLLECT INTO T_VARCHAR_DATA
        FROM (
              SELECT TO_CHAR(CS.BOE_DATE, 'dd.MM.yyyy') AS BOE_DATE
              FROM V_CUSTOM_STOCK CS
              WHERE CS.REF_TRANS_ID = qryValues   
              GROUP BY TO_CHAR(CS.BOE_DATE, 'dd.MM.yyyy')
             );

    ELSIF qryType = 'GET-METAL-CIN-BOE-NO-FOR-INVOICE' THEN
        SELECT BOE_NO
        BULK COLLECT INTO T_VARCHAR_DATA
        FROM (
              SELECT CS.BOE_NO
              FROM T_VA_TRANS_CUSTOM_DTL VTCD, V_CUSTOM_STOCK CS, T_VA_TRANS_HDR VH, V_TRANS_HDR TH
              WHERE VTCD.CUSTOM_STOCK_ID = CS.CUSTOM_STOCK_ID AND VTCD.VA_TRANS_ID = VH.VA_TRANS_ID AND CS.REF_TRANS_ID = TH.TRANS_ID AND
                    CS.ITEM_GROUP_ID IN (1501,1502,1503) AND (TH.TRANS_SUBTYPE_ID = 346 OR CS.TRANS_CATEGORY_LINK_ID IN (60,107)) AND 
                    VH.REF_TRANS_ID = qryValues   
              GROUP BY CS.BOE_NO
             );

    ELSIF qryType = 'GET-METAL-CIN-BOE-DATE-FOR-INVOICE' THEN
        SELECT BOE_DATE
        BULK COLLECT INTO T_VARCHAR_DATA
        FROM (
              SELECT TO_CHAR(CS.BOE_DATE, 'dd.MM.yyyy') AS BOE_DATE
              FROM T_VA_TRANS_CUSTOM_DTL VTCD, V_CUSTOM_STOCK CS, T_VA_TRANS_HDR VH, V_TRANS_HDR TH
              WHERE VTCD.CUSTOM_STOCK_ID = CS.CUSTOM_STOCK_ID AND VTCD.VA_TRANS_ID = VH.VA_TRANS_ID AND CS.REF_TRANS_ID = TH.TRANS_ID AND
                    CS.ITEM_GROUP_ID IN (1501,1502,1503) AND (TH.TRANS_SUBTYPE_ID = 346 OR CS.TRANS_CATEGORY_LINK_ID IN (60,107)) AND 
                    VH.REF_TRANS_ID = qryValues   
              GROUP BY TO_CHAR(CS.BOE_DATE, 'dd.MM.yyyy')
             );
    
    
    ELSIF qryType = 'GET-RATE-WC-OP-WISE' THEN
        
        arrData := F_FILL_STRING_TABLE(iData => qryValues ,iSeperator => ':');  
         
        SELECT WOM.RATE  BULK COLLECT INTO T_VARCHAR_DATA
        FROM T_WORKER_OPERATION_MASTER WOM 
        WHERE WOM.WC_ID = ARRDATA(1)
            AND WOM.OPERATION_ID = ARRDATA(2) ;
    
    ELSIF qryType = 'GET-ORDER-NO-FOR-INVOICE' THEN
        SELECT DOC_NO
        BULK COLLECT INTO T_VARCHAR_DATA
        FROM (
              SELECT TH.DOC_NO
              FROM T_TRANS_ITEM_DTL TID, V_TRANS_HDR TH
              WHERE TID.SOR_TRANS_ID = TH.TRANS_ID AND TID.ROW_STATUS = 1 AND TID.TRANS_ID = qryValues   
              GROUP BY TH.DOC_NO
             );

    ELSIF qryType = 'GET-ORDER-DATE-FOR-INVOICE' THEN
        SELECT TRANS_DATE
        BULK COLLECT INTO T_VARCHAR_DATA
        FROM (
              SELECT TO_CHAR(TH.TRANS_DATE, 'dd.MM.yyyy') AS TRANS_DATE
              FROM T_TRANS_ITEM_DTL TID, V_TRANS_HDR TH
              WHERE TID.SOR_TRANS_ID = TH.TRANS_ID AND TID.ROW_STATUS = 1 AND TID.TRANS_ID = qryValues   
              GROUP BY TO_CHAR(TH.TRANS_DATE, 'dd.MM.yyyy')
             );

     
    ELSIF qryType = 'GET-DATE-FOR(SBK)' THEN
        SELECT TRANS_DATE 
        BULK COLLECT INTO T_VARCHAR_DATA
        FROM 
        (
        SELECT ROWNUM , TH.TRANS_DATE , TID.SOR_TRANS_ITEM_ID  
        FROM T_TRANS_HDR TH , T_TRANS_ITEM_DTL TID     
        WHERE TH.TRANS_ID = TID.TRANS_ID
            AND TID.SOR_TRANS_ITEM_ID > 0
            AND TID.STOCK_CODE = qryValues  
            AND TH.TRANS_TYPE = 'SBK' 
        ORDER BY TH.TRANS_DATE DESC
        )WHERE ROWNUM = 1;  
    
    ELSIF qryType = 'GET-DATE-FOR(SLG)' THEN
        SELECT TRANS_DATE 
        BULK COLLECT INTO T_VARCHAR_DATA
        FROM 
        (
        SELECT ROWNUM , TH.TRANS_DATE , TID.SOR_TRANS_ITEM_ID  
        FROM T_TRANS_HDR TH , T_TRANS_ITEM_DTL TID     
        WHERE TH.TRANS_ID = TID.TRANS_ID
            AND TID.SOR_TRANS_ITEM_ID > 0
            AND TID.STOCK_CODE = qryValues  
            AND TH.TRANS_TYPE = 'SLG' 
        ORDER BY TH.TRANS_DATE DESC
        )WHERE ROWNUM = 1;  
    
    ELSIF qryType = 'GET-DATE-FOR(GRN)' THEN
        SELECT TRANS_DATE 
        BULK COLLECT INTO T_VARCHAR_DATA
        FROM 
        (
        SELECT ROWNUM , TH.TRANS_DATE , TID.SOR_TRANS_ITEM_ID  
        FROM T_TRANS_HDR TH , T_TRANS_ITEM_DTL TID     
        WHERE TH.TRANS_ID = TID.TRANS_ID
            AND TID.SOR_TRANS_ITEM_ID > 0
            AND TID.STOCK_CODE = qryValues  
            AND TH.TRANS_TYPE = 'GRN' 
        ORDER BY TH.TRANS_DATE DESC
        )WHERE ROWNUM = 1;   
    
    ELSIF qryType = 'GET-METAL-RATE(TRANS_ITEM_ID)' THEN
     
        SELECT  
            TIBFD.ROW_VALUE  BULK COLLECT INTO T_VARCHAR_DATA   
        FROM T_TRANS_ITEM_BOM_DTL TIBD, T_TRANS_ITEM_BOM_FORMULA_DTL TIBFD, T_FORMULA_PROCEDURE_DTL FPD, V_ITEM_VARIANT_RTN_DTL IV
        WHERE 
            TIBFD.ROW_NO = FPD.ROW_NO
            AND TIBFD.PROCEDURE_ID = FPD.PROCEDURE_ID
            AND FPD.ROW_DATA_TYPE_ID = 3001
            AND TIBD.TRANS_ITEM_BOM_ID = TIBFD.TRANS_ITEM_BOM_ID
            AND TIBD.BOM_VARIANT_ID = IV.VARIANT_ID 
            AND TIBD.QUANTITY > 0 
            AND IV.ITEM_TYPE_ID = 1004
            AND TIBD.TRANS_ITEM_ID = qryValues ;
             
    ELSIF qryType = 'CONCAT-WCGROUP' THEN
        SELECT WCG.WCGROUP_NAME||'-'||SBD.QUANTITY BULK COLLECT INTO T_VARCHAR_DATA
        FROM T_WORKCENTER_GROUP_MASTER WCG, V_STOCK_BATCH_DTL SBD
        WHERE SBD.WCGROUP_ID = WCG.WCGROUP_ID
            AND SBD.SOR_TRANS_ITEM_ID = qryValues
        GROUP BY SBD.SOR_TRANS_ITEM_ID;
        
    ELSIF qryType = 'DAILY-BOM-MTL-KT' THEN
        SELECT METAL_KT BULK COLLECT INTO T_VARCHAR_DATA
        FROM 
            (        
                SELECT FNGETATTRIBUTEDATA(IVR.ATTRIB_TYPE_AND_VALUE, 'KT') AS METAL_KT
                FROM T_DAILY_TRANS_ORDER_BOM DTOB, V_ITEM_VARIANT_RTN_DTL IVR
                WHERE DTOB.BOM_VARIANT_ID = IVR.VARIANT_ID
                    AND DTOB.ITEM_TYPE_ID = 1004
                    AND DTOB.TRANS_ITEM_ID = qryValues
                GROUP BY FNGETATTRIBUTEDATA(IVR.ATTRIB_TYPE_AND_VALUE, 'KT')
            );
        
    ELSIF qryType = 'DAILY-BOM-STN-QLTY' THEN
        SELECT METAL_KT BULK COLLECT INTO T_VARCHAR_DATA
        FROM 
            (        
                SELECT FNGETATTRIBUTEDATA(IVR.ATTRIB_TYPE_AND_VALUE, 'STNQLTY') AS METAL_KT
                FROM T_DAILY_TRANS_ORDER_BOM DTOB, V_ITEM_VARIANT_RTN_DTL IVR
                WHERE DTOB.BOM_VARIANT_ID = IVR.VARIANT_ID
                    AND DTOB.ITEM_TYPE_ID = 1005
                    AND DTOB.TRANS_ITEM_ID = qryValues
                GROUP BY FNGETATTRIBUTEDATA(IVR.ATTRIB_TYPE_AND_VALUE, 'STNQLTY')
            );
        
    ELSIF qryType = 'DAILY-BOM-MTL-CLR' THEN
        SELECT METAL_KT BULK COLLECT INTO T_VARCHAR_DATA
        FROM 
            (        
                SELECT FNGETATTRIBUTEDATA(IVR.ATTRIB_TYPE_AND_VALUE, 'CLR') AS METAL_KT
                FROM T_DAILY_TRANS_ORDER_BOM DTOB, V_ITEM_VARIANT_RTN_DTL IVR
                WHERE DTOB.BOM_VARIANT_ID = IVR.VARIANT_ID
                    AND DTOB.ITEM_TYPE_ID = 1004
                    AND DTOB.TRANS_ITEM_ID = qryValues
                GROUP BY FNGETATTRIBUTEDATA(IVR.ATTRIB_TYPE_AND_VALUE, 'CLR')
            );
            
    ELSIF qryType = 'CERTIFICATE-NO-STONE(TRANS_ITEM_ID)' THEN            
            SELECT CERT.VARIANT_NAME BULK COLLECT INTO T_VARCHAR_DATA
            FROM T_TRANS_ITEM_BOM_DTL TIBD, T_STOCK_BOM_CERTIFICATE_DTL SBCD, V_ITEM_VARIANT_RTN_DTL IVD, V_ITEM_VARIANT_RTN_DTL CERT
            WHERE TIBD.BOM_VARIANT_ID = IVD.VARIANT_ID
            AND TIBD.SRC_STOCK_BOM_ID = SBCD.STOCK_BOM_ID
            AND SBCD.CERTIFICATE_ID = CERT.VARIANT_ID
            AND IVD.ITEM_TYPE_ID = 1005
            AND TIBD.TRANS_ITEM_ID = qryValues;
    
    ELSIF qryType = 'STOCK-BOM-MTL-KT' THEN
        SELECT METAL_KT BULK COLLECT INTO T_VARCHAR_DATA
        FROM 
            (        
                SELECT FNGETATTRIBUTEDATA(IVR.ATTRIB_TYPE_AND_VALUE, 'KT') AS METAL_KT
                FROM T_STOCK_BOM_DTL SBD, V_ITEM_VARIANT_RTN_DTL IVR
                WHERE SBD.BOM_VARIANT_ID = IVR.VARIANT_ID
                    AND IVR.ITEM_TYPE_ID = 1004
                    AND SBD.STOCK_ID = qryValues
                GROUP BY FNGETATTRIBUTEDATA(IVR.ATTRIB_TYPE_AND_VALUE, 'KT')
            ); 
    
    ELSIF qryType = 'GET-RA-REF-DOC' THEN    
        
        arrData := F_FILL_STRING_TABLE(iData => qryValues ,iSeperator => ':');    
--          raise_application_error (-20100,'**'||qryValues);
        SELECT DISTINCT TH.DOC_NO BULK COLLECT INTO T_VARCHAR_DATA
        FROM T_TRANS_HDR TH , V_TRANS_ITEM_DTL TID 
        WHERE TH.ADDN_DATA =  arrData(1)  
        AND TH.ROW_STATUS = 1  
        AND TH.TRANS_ID = TID.TRANS_ID   
        AND TH.TRANS_SUBTYPE_ID =  arrData(2) 
        AND TID.ROW_IDENTITY_ID =  arrData(3)
        AND TH.ADDN_DATA > 0 ;
    
    ELSIF qryType = 'GET-ROUTING-VARIANT-NAME' THEN    
        
        arrData := F_FILL_STRING_TABLE(iData => qryValues ,iSeperator => ':');  
            
        SELECT DISTINCT IV.VARIANT_NAME BULK COLLECT INTO T_VARCHAR_DATA 
        FROM T_OPERATION_ROUTING_DTL ORD,T_ITEM_VARIANT_MASTER IV 
        WHERE ORD.VARIANT_ID = IV.VARIANT_ID
            AND ORD.ROUTING_ID  =  arrData(1)  ; 
            
    ELSIF qryType = 'GET-LAST-SHIPMENT-RATE' THEN    
            
        SELECT DISTINCT ITEM_RATE BULK COLLECT INTO T_VARCHAR_DATA
        FROM
        (
            SELECT TID.TRANS_ID,TID.TRANS_ITEM_ID,ROUND(TID.TRANS_RATE,2) AS ITEM_RATE 
            FROM V_TRANS_ITEM_DTL TID,T_TRANS_HDR TH, T_TRANS_HDR_EXTD THEX 
            WHERE
            TH.TRANS_ID = TID.TRANS_ID AND TH.TRANS_ID = THEX.TRANS_ID  AND 
            THEX.PARTY_ID = arrData(1) AND
            TID.ROW_STATUS = 1 AND TH.ROW_STATUS = 1 AND
            TH.VERIFIED_IND = 1 AND TID.VARIANT_ID = arrData(2) AND TH.TRANS_TYPE = 'INV'
            ORDER BY TH.TRANS_DATE DESC,TID.TRANS_ID DESC,TID.TRANS_ITEM_ID DESC
        ) WHERE ROWNUM = 1;
        
    ELSIF qryType = 'GET-ISSUE-WT(CAD/CAM)' THEN     
        arrData := F_FILL_STRING_TABLE(iData => qryValues ,iSeperator => ':'); 
        
        SELECT DISTINCT THEX.ADDN_REMARK1  BULK COLLECT INTO T_VARCHAR_DATA   
        FROM T_STOCK_BATCH_TRANS_LINK STL , T_TRANS_HDR_EXTD THEX
        WHERE STL.ISSUE_TRANS_ID = THEX.TRANS_ID 
            AND STL.BATCH_ID = arrData(1) ;


    ELSIF qryType = 'LATEST_BARCODE_CUSTOMER_VARIANT' THEN        
        
        SELECT DISTINCT NVL(TID.CUSTOMER_VARIANT_NAME,TID.TRANS_REMARK)
        BULK COLLECT INTO T_VARCHAR_DATA 
        FROM V_TRANS_ITEM_DTL TID 
        WHERE TRANS_ITEM_ID = 
                           (
                               SELECT MAX(TD.TRANS_ITEM_ID) 
                               FROM T_TRANS_HDR TH, T_TRANS_ITEM_DTL TD   
                               WHERE TH.TRANS_ID = TD.TRANS_ID
                               AND TD.ROW_STATUS = 1
                               AND TH.TRANS_TYPE = 'SLG'
                               AND TD.STOCK_CODE = qryValues
        )
        AND TID.CUSTOMER_VARIANT_NAME IS NOT NULL  ;

    ELSIF qryType = 'FETCH-STONE-SHP-PCS-WT-SUNNY' THEN        
        SELECT DESCRIPTION
        BULK COLLECT INTO T_VARCHAR_DATA
        FROM 
            (   
                SELECT
                    TRANS_ITEM_ID, SOR_ORDER, DESCRIPTION
                FROM                
                (
                    SELECT
                        TID.TRANS_ITEM_ID,
                        DENSE_RANK() OVER(ORDER BY F_GET_ATTRIBUTE(IV.ATTRIB_TYPE_AND_CODE,'STNSHP')) AS SOR_ORDER,
                        F_GET_ATTRIBUTE(IV.ATTRIB_TYPE_AND_CODE,'STNSHP')  || '-' ||
                        ROUND(DECODE(IV.ITEM_STOCK_UOM_CODE,'PCS',TIBD.QUANTITY,TIBD.QUANTITY * TIBD.CONVERSION_FACTOR)) || '/' || 
                        TRIM(TO_CHAR(DECODE(IV.ITEM_STOCK_UOM_CODE,'WT',TIBD.QUANTITY,TIBD.QUANTITY * TIBD.CONVERSION_FACTOR),'0.000'))  AS DESCRIPTION
                    FROM
                        T_TRANS_ITEM_DTL TID,
                        T_TRANS_ITEM_BOM_DTL TIBD,
                        V_ITEM_VARIANT_RTN_DTL IV
                    WHERE
                        TID.TRANS_ITEM_ID =  TIBD.TRANS_ITEM_ID
                        AND TIBD.BOM_VARIANT_ID = IV.VARIANT_ID
                        AND IV.ITEM_TYPE_ID = 1005
                        AND TID.TRANS_ITEM_ID = arrData(1)
                )ORDER BY TRANS_ITEM_ID, SOR_ORDER  
            );  
    
    ELSIF qryType = 'GET-GROUP-STATUS' THEN    
            
        SELECT BATCH_STATUS BULK COLLECT INTO T_VARCHAR_DATA
        FROM
        (
            SELECT DISTINCT CASE WHEN IVD.ITEM_TYPE_ID =  1013 THEN 'WAX' ELSE 'CASTED' END AS BATCH_STATUS
            FROM T_STOCK S, T_STOCK_DTL SD, T_STOCK_BOM_DTL SB,V_ITEM_VARIANT_RTN_DTL IVD
            WHERE
            SB.BOM_VARIANT_ID = IVD.VARIANT_ID
            AND S.STOCK_ID = SD.STOCK_ID
            AND S.STOCK_ID = SB.STOCK_ID
            AND IVD.ITEM_TYPE_ID IN(1013,1004)
            AND S.QUANTITY >0
            AND SD.BATCH_ID IN(
                SELECT BATCH_ID FROM T_STOCK_BATCH_DTL SBD 
                WHERE SBD.BATCH_TYPE_ID = 1 
                AND SBD.PBATCH_ID = qryValues
                UNION ALL
                SELECT BATCH_ID FROM T_STOCK_BATCH_DTL SBD 
                WHERE SBD.BATCH_TYPE_ID = 1 
                AND SBD.PBATCH_ID IN (SELECT BATCH_ID FROM T_STOCK_BATCH_DTL WHERE PBATCH_ID = qryValues)
            )  

        ) WHERE ROWNUM = 1;
        
    ELSIF qryType = 'GET-BATCH-STATUS' THEN    
            
        SELECT BATCH_STATUS BULK COLLECT INTO T_VARCHAR_DATA
        FROM
        (
            SELECT DISTINCT CASE WHEN IVD.ITEM_TYPE_ID =  1013 THEN 'WAX' ELSE 'CASTED' END AS BATCH_STATUS
            FROM T_STOCK S, T_STOCK_DTL SD, T_STOCK_BOM_DTL SB,V_ITEM_VARIANT_RTN_DTL IVD
            WHERE
            SB.BOM_VARIANT_ID = IVD.VARIANT_ID
            AND S.STOCK_ID = SD.STOCK_ID
            AND S.STOCK_ID = SB.STOCK_ID
            AND IVD.ITEM_TYPE_ID IN(1013,1004)
            AND S.QUANTITY >0
            AND SD.BATCH_ID = qryValues  

        ) WHERE ROWNUM = 1; 
        
    ELSIF qryType = 'GET-DIA-RATE' THEN    
            
         SELECT DISTINCT F_GET_ATTRIBUTE(MV.ATTRIB_TYPE_AND_CODE,'STNQLTY')||' - '|| STB.TRANS_BOM_RATE
         BULK COLLECT INTO T_VARCHAR_DATA
         FROM V_TRANS_ITEM_BOM_DTL STB,V_ITEM_VARIANT_DTL MV 
         WHERE STB.BOM_VARIANT_ID  = MV.VARIANT_ID
               AND ITEM_GROUP_ID = 1504  
               AND STB.TRANS_ITEM_ID = qryValues;
               
    ELSIF qryType = 'GET-CLS-RATE' THEN    
            
         SELECT DISTINCT F_GET_ATTRIBUTE(MV.ATTRIB_TYPE_AND_CODE,'STNQLTY')||' - '|| STB.TRANS_BOM_RATE
         BULK COLLECT INTO T_VARCHAR_DATA
         FROM V_TRANS_ITEM_BOM_DTL STB,V_ITEM_VARIANT_DTL MV 
         WHERE STB.BOM_VARIANT_ID  = MV.VARIANT_ID
               AND ITEM_TYPE_ID = 1005 
               AND ITEM_GROUP_ID <> 1504  
               AND STB.TRANS_ITEM_ID = qryValues; 
               
     ELSIF qryType = 'GET-SELLING-CODE' THEN
         strReturn := qryValues;
        
         FOR J IN(SELECT * FROM T_MISC_COMMON_DATA_MASTER WHERE DATA_TYPE_ID = 2328)
         LOOP
             strReturn := REPLACE(strReturn,J.DATA_CODE,J.DATA_VALUE);                
         END LOOP;
                
         RETURN strReturn; 
         
    ELSIF qryType = 'GET-ITEM-CODE' THEN
         strReturn := qryValues;
        
         FOR J IN(SELECT * FROM T_MISC_COMMON_DATA_MASTER WHERE DATA_TYPE_ID = 2329)
         LOOP
             strReturn := REPLACE(strReturn,J.DATA_CODE,J.DATA_VALUE);                
         END LOOP;
                
         RETURN strReturn;                                                                                 

    ELSIF qryType = 'COMPONENT_PIECES' THEN
        SELECT SUM(BOM.QUANTITY) AS QUANTITY
        BULK COLLECT INTO T_VARCHAR_DATA
        FROM T_TRANS_ITEM_BOM_DTL BOM, V_ITEM_VARIANT_DTL IVD
        WHERE BOM.BOM_VARIANT_ID = IVD.VARIANT_ID AND IVD.ITEM_TYPE_ID = 1002
        AND BOM.TRANS_ITEM_ID = qryValues;

    ELSIF qryType = 'GET-FIN-CUST-VAR-NAME' THEN
         SELECT IV.CUSTOMER_VARIANT_NAME
         BULK COLLECT INTO T_VARCHAR_DATA
         FROM T_TRANS_ITEM_BOM_DTL DTL, V_ITEM_VARIANT_DTL IV 
         WHERE DTL.BOM_VARIANT_ID = IV.VARIANT_ID AND IV.ITEM_TYPE_ID = 1003 AND DTL.TRANS_ITEM_ID = qryValues;
    
    ELSIF qryType = 'GET-BASE-METAL-KARAT' THEN
        IF arrData(1) > 0 THEN
            strWh1 := ' AND TID.TRANS_ID = '||arrData(1);
        ELSE
            strWh1 := ' AND TID.TRANS_ITEM_ID = '||arrData(2);
        END IF;
        
        EXECUTE IMMEDIATE 
       'SELECT WM_CONCAT(DISTINCT FNGETATTRIBUTEDATA(BIVD.ATTRIB_TYPE_AND_CODE, ''KT''))        
        FROM T_TRANS_ITEM_DTL TID, T_TRANS_ITEM_BOM_DTL TIBD, V_ITEM_VARIANT_DTL IVD, V_ITEM_VARIANT_DTL BIVD
        WHERE TID.TRANS_ITEM_ID = TIBD.TRANS_ITEM_ID AND TIBD.BOM_VARIANT_ID = IVD.VARIANT_ID AND IVD.BASE_VARIANT_ID = BIVD.VARIANT_ID
            AND IVD.ITEM_TYPE_ID = 1004 AND TID.ROW_STATUS = 1  '||strWh1 
        BULK COLLECT INTO T_VARCHAR_DATA;
        
     ELSIF qryType = 'FETCH-SCHEME-KNOCKOFF-DOC-NO' THEN 
        SELECT FTH.VOUCHER_NO
        BULK COLLECT INTO T_VARCHAR_DATA
        FROM T_FA_TRANS_BILL_HDR FTBH, T_FA_TRANS_RECPAY_DTL FTRD, T_FA_TRANS_HDR FTH
        WHERE FTBH.FA_TRANS_BILL_ID = FTRD.FA_TRANS_BILL_ID AND FTRD.FA_TRANS_ID = FTH.FA_TRANS_ID AND FTRD.ROW_STATUS = 1 AND 
              FTBH.FA_TRANS_BILL_ID = qryValues
        GROUP BY FTH.VOUCHER_NO;
    
    ELSIF qryType = 'GETHSNCODE(MASTER)' THEN
    
        SELECT IAM.ATTRIB_DESC 
        BULK COLLECT INTO T_VARCHAR_DATA
        FROM T_ITEM_MASTER IAM , T_ITEM_MASTER_ATTRIB_DTL IMAD ,T_ITEM_ATTRIB_CONFIG IAC  ,T_ITEM_ATTRIB_MASTER IAM 
        WHERE 
            IAM.ITEM_ID = IMAD.ITEM_ID
            AND IMAD.ITEM_ATTRIB_CONFIG_ID = IAC.ITEM_ATTRIB_CONFIG_ID
            AND IAC.ATTRIB_TYPE_ID = 11496
            AND IMAD.ATTRIB_ID = IAM.ATTRIB_ID
            AND IAM.ITEM_ID = qryValues; 

    ELSIF qryType = 'GR_WT_TOLLERANCE' THEN

        SELECT 'MINPER|'||MIN_PER||'^'||'MAXPER|'||MAX_PER 
        BULK COLLECT INTO T_VARCHAR_DATA
        FROM T_GR_WT_TOLLERANCE GWT
        WHERE qryValues BETWEEN FORM_WT AND TO_WT;
        
        
    ELSIF qryType = 'FETCH-GRADE(ITEMIDWISE)' THEN

        SELECT F_GET_ATTRIBUTE(IV.ATTRIB_TYPE_AND_CODE,'GRADE') BULK COLLECT INTO T_VARCHAR_DATA
        FROM T_TRANS_ITEM_BOM_DTL TIBD , V_ITEM_VARIANT_RTN_DTL IV
        WHERE TIBD.BOM_VARIANT_ID = IV.VARIANT_ID   
            AND IV.ITEM_TYPE_ID = 1005
            AND IV.ITEM_GROUP_ID = 1504 
            and tibd.TRANS_ITEM_ID = qryValues ;
            
    ELSIF qryType = 'FETCH-GRADE(STOCKID)' THEN

        SELECT F_GET_ATTRIBUTE(IV.ATTRIB_TYPE_AND_CODE,'GRADE') BULK COLLECT INTO T_VARCHAR_DATA
        FROM T_STOCK_BOM_DTL SBD , V_ITEM_VARIANT_RTN_DTL IV
        WHERE SBD.BOM_VARIANT_ID = IV.VARIANT_ID   
            AND IV.ITEM_TYPE_ID = 1005
            AND IV.ITEM_GROUP_ID = 1504 
            and SBD.STOCK_ID  = qryValues ;
       
    ELSIF qryType = 'FETCH-PARENTCODE(BR)' THEN   
         
        SELECT ATTRIB_VALUE  BULK COLLECT INTO T_VARCHAR_DATA
        FROM T_ITEM_VARIANT_ATTRIB_DTL IVAD , T_ITEM_ATTRIB_MASTER IAM  
        WHERE 
            IVAD.ATTRIB_ID = IAM.ATTRIB_ID
            AND IAM.ATTRIB_TYPE_ID = 11620 
            AND IVAD.VARIANT_ID = qryValues ;
         

    ELSIF qryType = 'GET-PARTY-STONE-TYPE-WISE-QLTYCLR' THEN 
        BEGIN
            SELECT PARTY_ID INTO iPartyID FROM T_TRANS_HDR_EXTD WHERE TRANS_ID = arrData(1);
        EXCEPTION
            WHEN NO_DATA_FOUND THEN
                iPartyID := 0;
        END;

        /*
        SELECT DISTINCT ATTRIB_ALIAS_NAME
        BULK COLLECT INTO T_VARCHAR_DATA
        FROM T_PARTY_MISC_LINK PML, 
        (
            SELECT 
            F_GET_ATTRIBUTE_ID(VD.ATTRIB_TYPE_AND_ATTRIB_ID,11010) AS STONE_TYPE_ID,
            F_GET_ATTRIBUTE_ID(VD.ATTRIB_TYPE_AND_ATTRIB_ID,11030) AS STONE_COLOR_ID,
            F_GET_ATTRIBUTE_ID(VD.ATTRIB_TYPE_AND_ATTRIB_ID,11007) AS STONE_QLTY_ID
            FROM T_TRANS_ITEM_BOM_DTL TIB, V_ITEM_VARIANT_RTN_DTL VD
            WHERE TIB.BOM_VARIANT_ID = VD.VARIANT_ID
            AND VD.ITEM_TYPE_ID = 1005
            AND TIB.TRANS_ITEM_ID = arrData(2)
        )BOM
        WHERE
        PML.PARTY_ID = iPartyID 
        AND ATTRIB_ID1 = STONE_TYPE_ID AND ATTRIB_ID2 = STONE_COLOR_ID AND ATTRIB_ID3 =STONE_QLTY_ID
        AND PML.LINK_TYPE = 'ST';
        */

         SELECT  
             DISTINCT DECODE(QLTY.ATTRIB_ALIAS_NAME,NULL,F_GET_ATTRIBUTE_VALUE(VD.ATTRIB_TYPE_AND_CODE,'STNQLTY'),QLTY.ATTRIB_ALIAS_NAME) 
             BULK COLLECT INTO T_VARCHAR_DATA
         FROM 
             T_TRANS_ITEM_BOM_DTL SB, V_ITEM_VARIANT_RTN_DTL VD,  
             (
                 SELECT
                     PML.*
                 FROM T_PARTY_MISC_LINK PML
                 WHERE PML.PARTY_ID = iPartyID  
                     AND PML.LINK_TYPE = 'ST'  
              )QLTY 
         WHERE 
            F_GET_ATTRIBUTE_ID(VD.ATTRIB_TYPE_AND_ATTRIB_ID,11010) = QLTY.ATTRIB_ID1(+)
            AND F_GET_ATTRIBUTE_ID(VD.ATTRIB_TYPE_AND_ATTRIB_ID,11030) = QLTY.ATTRIB_ID2(+)
            AND F_GET_ATTRIBUTE_ID(VD.ATTRIB_TYPE_AND_ATTRIB_ID,11007) = QLTY.ATTRIB_ID3(+)
            AND SB.BOM_VARIANT_ID  = VD.VARIANT_ID
            AND VD.ITEM_TYPE_ID = 1005 
            AND SB.TRANS_ITEM_ID = arrData(2);  
    
    ELSIF qryType = 'GET-METALRATE(TRANS_ITEM_ID)' THEN
         SELECT MAX(F_GETTRANSPRICEVALUE(0,0,TIBD.TRANS_ITEM_BOM_ID,0,'METALRATE'))  BULK COLLECT INTO T_VARCHAR_DATA   
         FROM T_TRANS_ITEM_DTL TID, T_TRANS_ITEM_BOM_DTL TIBD, V_ITEM_VARIANT_RTN_DTL IV
         WHERE 
            TIBD.BOM_VARIANT_ID = IV.VARIANT_ID   
            AND TID.TRANS_ITEM_ID = TIBD.TRANS_ITEM_ID
            AND TIBD.QUANTITY > 0
            AND IV.ITEM_TYPE_ID in (1003,1004) 
            AND TID.TRANS_ITEM_ID = qryValues;

    ELSIF qryType = 'PARTY-RESERVATION-MAPPING-TIME-FRAME' THEN

        SELECT TIME_FRAME BULK COLLECT INTO T_VARCHAR_DATA 
        FROM T_PARTY_RESERVATION_MAPPING
        WHERE PARTY_ID = arrData(1) 
        AND VARIANT_ID = arrData(2);

    ELSIF qryType = 'PARTY-RESERVATION-MAPPING-WCGROUP' THEN

        SELECT WGM.WCGROUP_NAME BULK COLLECT INTO T_VARCHAR_DATA 
        FROM T_PARTY_RESERVATION_MAPPING PRM, T_WORKCENTER_GROUP_MASTER WGM
        WHERE PRM.WCGROUP_ID = WGM.WCGROUP_ID
        AND PRM.PARTY_ID = arrData(1) 
        AND PRM.VARIANT_ID = arrData(2);

    ELSIF qryType = 'GET_FIRST_BARCODE_GEN_DATE' THEN     
        SELECT DISTINCT TO_CHAR(MIN(TH.TRANS_DATE),'DD/MM/YYYY') AS TRANS_DATE 
        BULK COLLECT INTO T_VARCHAR_DATA
        FROM T_TRANS_HDR TH,T_TRANS_ITEM_DTL TID
        WHERE TH.TRANS_ID = TID.TRANS_ID
        AND TH.TRANS_TYPE = 'SLG'  
        AND TID.STOCK_CODE = ARRDATA(1);
   
    ELSIF qryType = 'GET-MASTER-METAL-VARIANT' THEN
     
        arrData := F_FILL_STRING_TABLE(iData => qryValues ,iSeperator => ':');

        SELECT IV.VARIANT_ID BULK COLLECT INTO T_VARCHAR_DATA
        FROM T_ITEM_VARIANT_BOM_DTL IVBD , V_ITEM_VARIANT_RTN_DTL IV 
        WHERE MAIN_VARIANT_ID = ARRDATA(1) 
            AND IVBD.BOM_VARIANT_ID = IV.VARIANT_ID 
            AND IVBD.BOM_VARIANT_ID = ARRDATA(2)
            AND IV.ITEM_TYPE_ID = 1004  ;
    
    ELSIF qryType = 'GET-BULLIONRATE(TRANS_ITEM_ID)' THEN
         SELECT MAX(F_GETTRANSPRICEVALUE(0,0,TIBD.TRANS_ITEM_BOM_ID,0,'BASERATE'))  BULK COLLECT INTO T_VARCHAR_DATA   
         FROM T_TRANS_ITEM_DTL TID, T_TRANS_ITEM_BOM_DTL TIBD, V_ITEM_VARIANT_RTN_DTL IV
         WHERE 
            TIBD.BOM_VARIANT_ID = IV.VARIANT_ID   
            AND TID.TRANS_ITEM_ID = TIBD.TRANS_ITEM_ID
            AND TIBD.QUANTITY > 0
            AND IV.ITEM_TYPE_ID in (1003, 1004 )
            AND TID.TRANS_ITEM_ID = qryValues; 
    
    END IF;

    IF T_VARCHAR_DATA.COUNT > 0 THEN
        FOR I IN T_VARCHAR_DATA.FIRST..T_VARCHAR_DATA.LAST
        LOOP
            strReturn := strReturn||StrSeperator||T_VARCHAR_DATA(I).STRING_ELEM;
        END LOOP;
        
        strReturn := TRIM(SUBSTR(strReturn,2));
    END IF;

    RETURN SUBSTR(strReturn,1,4000); 
END;
/



DROP TABLE T_TRANS_VOUCHER_INFO CASCADE CONSTRAINTS;

CREATE TABLE T_TRANS_VOUCHER_INFO
(
  PK_ID                      NUMBER(10),
  DISPATCH_TRANS_ITEM_ID     NUMBER(10)         DEFAULT (0),
  SOR_TRANS_ITEM_ID          NUMBER(10)         DEFAULT (0),
  CREATION_DATE              DATE,
  VOUCHER_NO                 VARCHAR2(150 BYTE),
  EXPIRY_DATE                DATE,
  ROW_STATUS                 NUMBER(2)          DEFAULT (0),
  EMPLOYEE_NAME              VARCHAR2(150 BYTE),
  DEPARTMENT_ID              NUMBER(10)         DEFAULT (0),
  IS_PRINTED                 NUMBER(2)          DEFAULT (0),
  VOUCHER_DISPATCH_TRANS_ID  NUMBER(10)         DEFAULT (0),
  PRODUCT_DISPATCH_TRANS_ID  NUMBER(10)         DEFAULT (0),
  EMPLOYEE_ACCEPTED_DATE     DATE,
  EMPLOYEE_ACCEPTED_REMARKS  VARCHAR2(150 BYTE),
  EMPLOYEE_ACCEPTED_FILE     VARCHAR2(150 BYTE),
  IDENTITY_TYPE              NUMBER(10)         DEFAULT 0                     NOT NULL,
  VOUCHER_REDEM_IND          NUMBER(1),
  IDENTITY_DETAIL            VARCHAR2(250 BYTE)
)
TABLESPACE SEA_TB_MISC
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE
MONITORING;

COMMENT ON TABLE T_TRANS_VOUCHER_INFO IS 'VOUCHER_REDEM_IND =>  -1 : ON HOLD,  0 : UNHOLD,  1 : REDEMED';


CREATE UNIQUE INDEX PK_VCHR_INFO ON T_TRANS_VOUCHER_INFO
(PK_ID)
LOGGING
TABLESPACE SEA_TB_MISC
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );

ALTER TABLE T_TRANS_VOUCHER_INFO ADD (
  CONSTRAINT PK_VCHR_INFO
  PRIMARY KEY
  (PK_ID)
  USING INDEX PK_VCHR_INFO
  ENABLE VALIDATE);

ALTER TABLE T_TRANS_VOUCHER_INFO ADD (
  CONSTRAINT FK_IT_CFD_CI 
  FOREIGN KEY (IDENTITY_TYPE) 
  REFERENCES T_CONFIG_FIXED_DATA (CONFIG_ID)
  ENABLE VALIDATE,
  CONSTRAINT FK_VCHRINFO_DTID_TID 
  FOREIGN KEY (DISPATCH_TRANS_ITEM_ID) 
  REFERENCES T_TRANS_ITEM_DTL (TRANS_ITEM_ID)
  ENABLE VALIDATE,
  CONSTRAINT FK_VCHRINFO_PDID_TID 
  FOREIGN KEY (PRODUCT_DISPATCH_TRANS_ID) 
  REFERENCES T_TRANS_HDR (TRANS_ID)
  ENABLE VALIDATE,
  CONSTRAINT FK_VCHRINFO_STID_TID 
  FOREIGN KEY (SOR_TRANS_ITEM_ID) 
  REFERENCES T_TRANS_ITEM_DTL (TRANS_ITEM_ID)
  ENABLE VALIDATE,
  CONSTRAINT FK_VCHRINFO_VDID_TID 
  FOREIGN KEY (VOUCHER_DISPATCH_TRANS_ID) 
  REFERENCES T_TRANS_HDR (TRANS_ID)
  ENABLE VALIDATE);

DROP SEQUENCE FTRH_PINELAB;

CREATE SEQUENCE FTRH_PINELAB
  START WITH 3
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  NOCACHE
  ORDER;

DROP TABLE T_FTRH_PINELAB CASCADE CONSTRAINTS;

CREATE TABLE T_FTRH_PINELAB
(
  "FARecPayHdrID"    NUMBER(10),
  "FATransDtlID"     NUMBER(10),
  "FATransID"        NUMBER(10),
  "LocationID"       NUMBER(10),
  "YearID"           NUMBER(10),
  "RecPayHdrCode"    VARCHAR2(20 BYTE),
  "PayModeID"        NUMBER(10),
  "PayMode"          VARCHAR2(30 BYTE),
  "TransCurrRateID"  NUMBER(10),
  "TransExRate"      NUMBER(34,16),
  "TransAmount"      NUMBER(20,7),
  "LocalAmount"      NUMBER(20,7),
  "DrawnOnBankID"    NUMBER(10),
  "DrawnOnBank"      VARCHAR2(150 BYTE),
  "DrawnOnBranchID"  NUMBER(10),
  "DrawnOnBranch"    VARCHAR2(150 BYTE),
  "DrawnOnParty"     VARCHAR2(75 BYTE),
  "CardTypeID"       NUMBER(10),
  "CardType"         VARCHAR2(50 BYTE),
  "PayerAccountNo"   VARCHAR2(30 BYTE),
  "InstrumentNo"     VARCHAR2(30 BYTE),
  "InstrumentDate"   VARCHAR2(10 BYTE),
  "IssuingParty"     VARCHAR2(50 BYTE),
  "PartyID"          NUMBER(10),
  "PartyName"        VARCHAR2(200 BYTE),
  "AcceptanceNo"     VARCHAR2(100 BYTE),
  "Remarks"          VARCHAR2(100 BYTE),
  "RowStatus"        NUMBER(1),
  "SrNo"             NUMBER(5),
  "TerminalID"       NUMBER(10),
  "OldTransAmount"   NUMBER(20,7),
  "RecordStatus"     VARCHAR2(1 BYTE),
  "AccountID"        NUMBER(10),
  "RefTransID"       NUMBER(10),
  "CurrencyID"       NUMBER(10),
  "CurrencyCode"     VARCHAR2(50 BYTE),
  "AccountType"      VARCHAR2(50 BYTE),
  "IFSCCode"         VARCHAR2(20 BYTE),
  "CardNumber"       VARCHAR2(50 BYTE),
  "ExpiryMonth"      VARCHAR2(10 BYTE),
  "ExpiryYear"       VARCHAR2(10 BYTE),
  "PANNo"            VARCHAR2(20 BYTE),
  "PANVerified"      NUMBER(1),
  "GroupName"        VARCHAR2(100 BYTE),
  "Guid"             VARCHAR2(50 BYTE),
  "PkId"             NUMBER(10)                 DEFAULT 0,
  "ConsumeStatus"    NUMBER(1)                  DEFAULT 0
)
TABLESPACE SEA_TB_MISC
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE
MONITORING;


CREATE OR REPLACE PROCEDURE "P_SAVE_LOT_MAKING" 
(
    iTransId        IN T_TRANS_HDR.TRANS_ID%TYPE,
    iFilePointer    IN VARCHAR2,
    vStockCode      OUT T_STOCK.STOCK_CODE%TYPE        
)
AS

    strDirName          VARCHAR2(30);
    l_bfile             BFILE;
    l_clob              CLOB;
    xml_doc             DBMS_XMLDOM.DOMDocument;
    xml_nl              DBMS_XMLDOM.DOMNodeList;
    xml_node            DBMS_XMLDOM.DOMNode;
    
    lngTransId          T_TRANS_HDR.TRANS_ID%TYPE;
    lngTransItemId      T_TRANS_ITEM_DTL.TRANS_ITEM_ID%TYPE;
    lngTransItemBomId   T_TRANS_ITEM_DTL.TRANS_ITEM_ID%TYPE;
    lngStockId          T_TRANS_ITEM_DTL.TRANS_ITEM_ID%TYPE;
    lngStockBomId       T_TRANS_ITEM_DTL.TRANS_ITEM_ID%TYPE;
    strUOM              VARCHAR2(20);
    IsSetItem           VARCHAR(10);
    LastTagNo           T_STOCK.STOCK_CODE%TYPE;
    StockGroupCode      T_STOCK.STOCK_CODE%TYPE;
    TagLocationId       T_STOCK.STOCK_ID%TYPE;
    lngCalcMethodId     T_STOCK.STOCK_ID%TYPE;
    RowStatus           PLS_INTEGER;
    WipItemTypeId       T_STOCK.STOCK_ID%TYPE;
    
    intStockRow         PLS_INTEGER;
    intStockBomRow      PLS_INTEGER;
    intStockInOutRow    PLS_INTEGER;
    intTemp             PLS_INTEGER;
    intRow              PLS_INTEGER;
    blnLotEdit          BOOLEAN := FALSE;
    blnAddNewRow        BOOLEAN := FALSE;
    
    iWipItemTypeId      T_STOCK.WIP_ITEM_TYPE_ID%TYPE;
    iOrgQuantity        T_STOCK.QUANTITY%TYPE;
    iOrgCF              T_STOCK.CONVERSION_FACTOR%TYPE;
    iOrgValue           T_STOCK.STOCK_VALUE%TYPE;
    iOrgLabourValue     T_STOCK.STOCK_VALUE%TYPE;
    iInwardTransItemId  T_STOCK_TRANS_LINK.INWARD_TRANS_ITEM_ID%TYPE;
    iVendorId           T_STOCK_TRANS_LINK.INWARD_TRANS_ITEM_ID%TYPE;
    iOrgStockId         T_STOCK.STOCK_GROUPING_ID%TYPE;
    dblQty              T_STOCK.QUANTITY%TYPE;
    dblPcs              T_STOCK.QUANTITY%TYPE;
    dblWt               T_STOCK.QUANTITY%TYPE;
    dblRate             T_STOCK.QUANTITY%TYPE;
    dblAmount           T_STOCK.QUANTITY%TYPE;
    dblLabRate          T_STOCK.QUANTITY%TYPE;
    dblNewQtyForOrgLot  T_STOCK.QUANTITY%TYPE;
    dblNewPcsForOrgLot  T_STOCK.QUANTITY%TYPE;
    dblStockQty         T_STOCK.QUANTITY%TYPE;
    WastagePer          T_STOCK.QUANTITY%TYPE;
    strCodeGenMiscData  VARCHAR2(500);
    
    
    STOCK_Data PKG_STOCK_TABLE_OBJECT.STOCK_Str;
    STOCK_DTL_Data PKG_STOCK_TABLE_OBJECT.STOCK_DTL_Str;
    STL_Data PKG_STOCK_TABLE_OBJECT.STOCK_TRANS_LINK_Str;
    STOCK_BOM_Data PKG_STOCK_TABLE_OBJECT.STOCK_BOM_DTL_Str;
    SBTL_Data PKG_STOCK_TABLE_OBJECT.STOCK_BOM_TRANS_LINK_Str;    
    STOCK_IN_OUT_DTL_Data PKG_STOCK_TABLE_OBJECT.STOCK_IN_OUT_DTL_Str;
    
    STOCK_LOCATION_SP_Data PKG_STOCK_TABLE_OBJECT.STOCK_LOCATION_SP_Str;
    STOCK_BOM_LOC_SP_Data PKG_STOCK_TABLE_OBJECT.STOCK_BOM_LOC_SP_Str;
    
    TYPE TRANS_ITEM_COLS IS RECORD (
        DEST_STOCK_ID T_TRANS_ITEM_DTL.DEST_STOCK_ID%TYPE
    );

    TYPE TRANS_ITEM_UPD_COLS IS TABLE OF TRANS_ITEM_COLS INDEX BY BINARY_INTEGER;
    TRANS_ITEM_UPD_Data TRANS_ITEM_UPD_COLS;
    TRANS_BOM_UPD_Data TRANS_ITEM_UPD_COLS;
    
    
    TYPE TRANS_ITEM_PK_Str IS TABLE OF T_TRANS_ITEM_DTL.TRANS_ITEM_ID%TYPE INDEX BY BINARY_INTEGER;
    TRANS_ITEM_UPD_PKId TRANS_ITEM_PK_Str;
    TRANS_BOM_UPD_PKId TRANS_ITEM_PK_Str;

BEGIN

    IF iFilePointer IS NULL THEN
        
        FOR J IN(SELECT * FROM V_TRANS_ITEM_DTL WHERE TRANS_ID = iTransId)
        LOOP

            blnLotEdit := FALSE;
            blnAddNewRow := TRUE;
        
            IF J.WIP_ITEM_TYPE_ID = 19024 OR J.WIP_ITEM_TYPE_ID = 19025 THEN
                blnLotEdit := TRUE;
            END IF;
        
            IF blnLotEdit = TRUE AND J.ADD_NUM2 = 1 THEN
                blnAddNewRow := FALSE;
                J.QUANTITY := 0;
                J.CONVERSION_FACTOR := 0;
                J.STOCK_VALUE := 0;      
            END IF;
            
            /*######################################################################
                    GIVING EFFECT FOR NEW LOT
            ######################################################################*/                
                
            iOrgQuantity := 0; 
            iOrgCF:= 0;
            iOrgValue:= 0; 
            iOrgLabourValue:= 0;
        
            SELECT S.STOCK_GROUPING_ID, S.QUANTITY, S.CONVERSION_FACTOR, S.STOCK_VALUE, S.LABOUR_VALUE, S.QUANTITY * S.CONVERSION_FACTOR, STL.INWARD_TRANS_ITEM_ID, STL.VENDOR_ID, S.WIP_ITEM_TYPE_ID
            INTO iOrgStockId, iOrgQuantity, iOrgCF, iOrgValue , iOrgLabourValue, dblQty, iInwardTransItemId, iVendorId, iWipItemTypeId  
            FROM T_STOCK S,T_STOCK_TRANS_LINK STL 
            WHERE S.STOCK_ID = STL.STOCK_ID 
            AND S.STOCK_ID = J.SRC_STOCK_ID;
            
            
            IF blnLotEdit = FALSE THEN
                IF iOrgQuantity - J.QUANTITY < 0 THEN                    
                    raise_application_error (-20100,'##PIECES GETTING NEGATIVE FOR STOCK CODE : '||J.STOCK_CODE||'##');
                ELSIF dblQty - (J.QUANTITY * J.CONVERSION_FACTOR)  < -0.01 THEN
                    raise_application_error (-20100,'##WEIGHT GETTING NEGATIVE FOR STOCK CODE : '||J.STOCK_CODE||'##');
                ELSIF iOrgQuantity - J.QUANTITY = 0 AND dblQty - (J.QUANTITY * J.CONVERSION_FACTOR) > 0.01 THEN
                    raise_application_error (-20100,'##WEIGHT EXISTS WHILE PIECES GETTING ZERO FOR STOCK CODE : '||J.STOCK_CODE||'##');
                ELSIF iOrgQuantity - J.QUANTITY > 0 AND dblQty - (J.QUANTITY * J.CONVERSION_FACTOR) = 0 THEN
                    raise_application_error (-20100,'##PIECES EXISTS WHILE WEIGHT GETTING ZERO FOR STOCK CODE : '||J.STOCK_CODE||'##');
                END IF;
            END IF;
        
            IF blnAddNewRow = TRUE THEN     
            
                intStockRow := NVL(STOCK_Data.LAST,0) + 1;
        
                STOCK_Data(intStockRow).STOCK_ID := F_Get_PkId_From_Seq('T_STOCK');
                STOCK_Data(intStockRow).VARIANT_ID := J.VARIANT_ID;
        
                IF blnLotEdit = FALSE THEN
                    IF J.STOCK_CODE IS NOT NULL THEN
                        SELECT MAX(MAX_COUNT)
                        INTO intTemp
                        FROM 
                        (
                            SELECT 
                                CASE WHEN INSTR(STOCK_CODE,'/',1,1) <= 0 THEN 0 ELSE TO_NUMBER(SUBSTR(STOCK_CODE,INSTR(STOCK_CODE,'/',1,1)+1)) END AS MAX_COUNT
                            FROM T_STOCK 
                            WHERE DECODE(INSTR(STOCK_CODE,'/',1,1),0,STOCK_CODE,SUBSTR(STOCK_CODE,1,INSTR(STOCK_CODE,'/',1)-1)) = J.STOCK_CODE
                        );
            
                        IF intTemp >=0 THEN
                            STOCK_Data(intStockRow).STOCK_CODE := J.STOCK_CODE||'/'||(intTemp + 1);
                        END IF;
                    ELSE
                        strCodeGenMiscData := ',,'||TO_CHAR(PKG_SAVE_TRANSACTION_DATA.sysTime,'DD/MM/YYYY HH-MI-SS AM')||','||J.VARIANT_ID||',,'||ROUND(J.QUANTITY * J.CONVERSION_FACTOR,3)||','||PKG_SAVE_TRANSACTION_DATA.oTH_TransCatgLinkId||',,'||PKG_SAVE_TRANSACTION_DATA.intFYearId;
                        STOCK_Data(intStockRow).STOCK_CODE := PKG_CODE_GEN.F_CODE_GEN_FOR_OTHERS ('SLASHNO',0,PKG_SAVE_TRANSACTION_DATA.intLocationId,NULL);                                                                    
                    END IF;                
                ELSE
                    STOCK_Data(intStockRow).STOCK_CODE := J.STOCK_CODE;                            
                END IF;
                
                vStockCode := STOCK_Data(intStockRow).STOCK_CODE;

                STOCK_Data(intStockRow).QUANTITY := J.QUANTITY;
                STOCK_Data(intStockRow).CONVERSION_FACTOR := J.CONVERSION_FACTOR;
                STOCK_Data(intStockRow).STOCK_VALUE := (iOrgValue / (iOrgQuantity * iOrgCF)) * (J.QUANTITY * J.CONVERSION_FACTOR);
                STOCK_Data(intStockRow).LABOUR_VALUE := (iOrgLabourValue / (iOrgQuantity * iOrgCF)) * (J.QUANTITY * J.CONVERSION_FACTOR);
                STOCK_Data(intStockRow).STOCK_STATUS_ID := J.STOCK_STATUS_ID;
                
                IF J.WIP_ITEM_TYPE_ID = 19001 THEN
                    STOCK_Data(intStockRow).WIP_ITEM_TYPE_ID := 19025;                
                ELSE
                    STOCK_Data(intStockRow).WIP_ITEM_TYPE_ID := 19024;
                END IF;
                
                STOCK_Data(intStockRow).OWNER_PARTY_ID := 0;
                STOCK_Data(intStockRow).KARAT_COLOR := J.KARAT_COLOR;
                STOCK_Data(intStockRow).RFID_CODE := NULL;
        
                
                IF STOCK_Data(intStockRow).WIP_ITEM_TYPE_ID = 19025 THEN
                    STOCK_Data(intStockRow).STOCK_GROUPING_ID := J.SRC_STOCK_ID;
                ELSE
                    IF iOrgStockId > 0 THEN
                        STOCK_Data(intStockRow).STOCK_GROUPING_ID := iOrgStockId;
                    ELSE
                        STOCK_Data(intStockRow).STOCK_GROUPING_ID := J.SRC_STOCK_ID;
                    END IF;            
                END IF;                    
        
                STOCK_DTL_Data(intStockRow).STOCK_ID := STOCK_Data(intStockRow).STOCK_ID;
                STOCK_DTL_Data(intStockRow).BATCH_ID := 0;
                STOCK_DTL_Data(intStockRow).LOCATION_ID := PKG_SAVE_TRANSACTION_DATA.intLocationId;
                STOCK_DTL_Data(intStockRow).WC_ID := J.SRC_WC_ID;
                STOCK_DTL_Data(intStockRow).WCGROUP_ID := J.SRC_WCGROUP_ID;
                STOCK_DTL_Data(intStockRow).PARTY_ID := 0;
                STOCK_DTL_Data(intStockRow).TRANSIT_IND := 0;
        
                STL_Data(intStockRow).STOCK_ID := STOCK_Data(intStockRow).STOCK_ID;
                STL_Data(intStockRow).SOR_TRANS_ID := 0;
                STL_Data(intStockRow).SOR_TRANS_ITEM_ID := 0;
                STL_Data(intStockRow).PDO_TRANS_ITEM_ID := 0;
                STL_Data(intStockRow).SOR_TRANS_ITEM_BOM_ID := 0;
                STL_Data(intStockRow).INWARD_TRANS_ITEM_ID := iInwardTransItemId;
                STL_Data(intStockRow).CUSTOM_STOCK_ID := 0;
                STL_Data(intStockRow).RESERVE_PARTY_ID := 0;
                STL_Data(intStockRow).ISSUE_TRANS_ITEM_ID := J.TRANS_ITEM_ID;
                STL_Data(intStockRow).VENDOR_ID := iVendorId;
                STL_Data(intStockRow).STORE_BIN_ID := 0;
                STL_Data(intStockRow).RESERVE_LOCATION_ID := 0;
        
                IF STOCK_Data(intStockRow).WIP_ITEM_TYPE_ID = 19024 THEN
                    WastagePer := 0;
                    BEGIN
                        SELECT ROW_VALUE INTO WastagePer
                        FROM
                        (
                            SELECT BF.ROW_VALUE 
                            FROM T_TRANS_ITEM_BOM_FORMULA_DTL BF,T_TRANS_ITEM_BOM_DTL BOM, V_FORMULA_PROCEDURE_DTL FPD
                            WHERE BF.ROW_NO = FPD.ROW_NO
                            AND BF.PROCEDURE_ID = FPD.PROCEDURE_ID
                            AND BF.TRANS_ITEM_BOM_ID = BOM.TRANS_ITEM_ID
                            AND FPD.ROW_TYPE = 'LOSS%'
                            AND BOM.TRANS_ITEM_ID = J.TRANS_ITEM_ID
                        ) WHERE ROWNUM = 1;
                    EXCEPTION
                        WHEN NO_DATA_FOUND THEN
                            NULL;                                             
                    END;
                ELSE
                    WastagePer := J.ADD_NUM3;
                END IF;                    
                
                intTemp := intTemp + 1;
                STOCK_LOCATION_SP_Data(intStockRow).STOCK_LOC_SP_ID := F_Get_PkId_From_Seq('T_STOCK_LOCATION_SP');
                STOCK_LOCATION_SP_Data(intStockRow).STOCK_ID := STOCK_Data(intStockRow).STOCK_ID;
                STOCK_LOCATION_SP_Data(intStockRow).LOCATION_ID := PKG_SAVE_TRANSACTION_DATA.intLocationId;
                STOCK_LOCATION_SP_Data(intStockRow).SELLING_PRICE := J.TRANS_RATE;
                STOCK_LOCATION_SP_Data(intStockRow).LABOUR_PRICE := 0;
                STOCK_LOCATION_SP_Data(intStockRow).SELLING_AMOUNT := J.TRANS_AMOUNT;
                STOCK_LOCATION_SP_Data(intStockRow).LABOUR_AMOUNT := 0;
                STOCK_LOCATION_SP_Data(intStockRow).WASTAGE_PER := WastagePer;
                STOCK_LOCATION_SP_Data(intStockRow).LABOUR_CALC_METHOD_ID := 0;
                STOCK_LOCATION_SP_Data(intStockRow).LABOUR_CALC_METHOD_VAL_ID := 0; 
                STOCK_LOCATION_SP_Data(intStockRow).ESTIMATED_SP := 0; 
                
                intTemp := 0;
                FOR OP IN (SELECT * FROM T_TRANS_ITEM_OPERATION_DTL TIOD WHERE TIOD.LABOUR_VALUE >0 AND TIOD.LABOUR_CALC_TRANS_ITEM_BOM_ID <= (LABOUR_CALC_TRANS_ITEM_BOM_ID * 0) AND TIOD.TRANS_ITEM_ID = J.TRANS_ITEM_ID)
                LOOP
                    IF intTemp >0 THEN
                        raise_application_error (-20100,'## CANNOT FIXED MULTIPLE OPERATION AT STYLE LEVEL ##');
                    END IF;

                    intTemp := intTemp + 1;
                     
                    STOCK_LOCATION_SP_Data(intStockRow).LABOUR_PRICE := OP.LABOUR_RATE;
                    STOCK_LOCATION_SP_Data(intStockRow).LABOUR_AMOUNT := OP.LABOUR_VALUE;
                    STOCK_LOCATION_SP_Data(intStockRow).LABOUR_CALC_METHOD_ID := OP.LABOUR_CALC_METHOD_ID;
                    STOCK_LOCATION_SP_Data(intStockRow).LABOUR_CALC_METHOD_VAL_ID := OP.LABOUR_CALC_METHOD_VAL_ID; 
                END LOOP;

                intStockInOutRow := NVL(STOCK_IN_OUT_DTL_Data.LAST,0) + 1;        
                STOCK_IN_OUT_DTL_Data(intStockInOutRow).STOCK_IN_OUT_DTL_ID := F_Get_PkId_From_Seq('T_STOCK_IN_OUT_DTL');
                STOCK_IN_OUT_DTL_Data(intStockInOutRow).TRANS_ID := J.TRANS_ID;
                STOCK_IN_OUT_DTL_Data(intStockInOutRow).TRANS_ITEM_ID := J.TRANS_ITEM_ID;
                STOCK_IN_OUT_DTL_Data(intStockInOutRow).TRANS_ITEM_BOM_ID := 0;
                STOCK_IN_OUT_DTL_Data(intStockInOutRow).STOCK_ID := STOCK_Data(intStockRow).STOCK_ID;
                STOCK_IN_OUT_DTL_Data(intStockInOutRow).STOCK_BOM_ID := 0;
                STOCK_IN_OUT_DTL_Data(intStockInOutRow).VARIANT_ID := J.VARIANT_ID;
                STOCK_IN_OUT_DTL_Data(intStockInOutRow).BATCH_ID := 0;
                STOCK_IN_OUT_DTL_Data(intStockInOutRow).WC_ID := J.SRC_WC_ID;
                STOCK_IN_OUT_DTL_Data(intStockInOutRow).WCGROUP_ID := J.SRC_WCGROUP_ID;
                STOCK_IN_OUT_DTL_Data(intStockInOutRow).PARTY_ID := 0;
                STOCK_IN_OUT_DTL_Data(intStockInOutRow).OWNER_PARTY_ID := 0;
                STOCK_IN_OUT_DTL_Data(intStockInOutRow).QUANTITY := J.QUANTITY;
                STOCK_IN_OUT_DTL_Data(intStockInOutRow).CONVERSION_FACTOR := J.CONVERSION_FACTOR;
                STOCK_IN_OUT_DTL_Data(intStockInOutRow).STOCK_VALUE := J.STOCK_VALUE;
                STOCK_IN_OUT_DTL_Data(intStockInOutRow).LABOUR_VALUE := J.LABOUR_VALUE;
                STOCK_IN_OUT_DTL_Data(intStockInOutRow).ROW_IDENTITY := '+C';
                STOCK_IN_OUT_DTL_Data(intStockInOutRow).STOCK_EFFECT_DATE := F_GET_DATE_DBTIMEZONE;
                STOCK_IN_OUT_DTL_Data(intStockInOutRow).DEPARTMENT_IN_OUT_IND := 1;
                STOCK_IN_OUT_DTL_Data(intStockInOutRow).TRANSFER_VALUE := 0;
                STOCK_IN_OUT_DTL_Data(intStockInOutRow).PARENT_DEPARTMENT_IN_OUT_IND := 0;
        
                intRow := NVL(TRANS_ITEM_UPD_Data.LAST,0) + 1;  
                TRANS_ITEM_UPD_Data(intRow).DEST_STOCK_ID := STOCK_Data(intStockRow).STOCK_ID;
                TRANS_ITEM_UPD_PkId(intRow) := J.TRANS_ITEM_ID;
        
                UPDATE T_TRANS_ITEM_DTL SET 
                WIP_ITEM_TYPE_ID = STOCK_Data(intStockRow).WIP_ITEM_TYPE_ID, STOCK_CODE = STOCK_Data(intStockRow).STOCK_CODE,
                STOCK_VALUE = STOCK_Data(intStockRow).STOCK_VALUE,LABOUR_VALUE = STOCK_Data(intStockRow).LABOUR_VALUE
                WHERE TRANS_ITEM_ID = J.TRANS_ITEM_ID;          
        
                FOR B IN(SELECT TIBD.*, EXTD.TRANS_BOM_RATE, EXTD.TRANS_BOM_AMOUNT, EXTD.CALC_METHOD_ID FROM T_TRANS_ITEM_BOM_DTL TIBD, T_TRANS_ITEM_BOM_DTL_EXTD EXTD WHERE TIBD.TRANS_ITEM_BOM_ID = EXTD.TRANS_ITEM_BOM_ID AND TIBD.TRANS_ITEM_ID = J.TRANS_ITEM_ID)
                LOOP            
                    iOrgQuantity := 0; 
                    iOrgCF:= 0;
                    iOrgValue:= 0; 
                    iOrgLabourValue:= 0;
        
                    IF B.SRC_STOCK_BOM_ID >0 THEN
                        SELECT QUANTITY, CONVERSION_FACTOR, STOCK_VALUE, LABOUR_VALUE
                        INTO iOrgQuantity, iOrgCF, iOrgValue , iOrgLabourValue  
                        FROM T_STOCK WHERE STOCK_ID = J.SRC_STOCK_ID;
                    END IF;                      
            
                    intStockBomRow := NVL(STOCK_BOM_Data.LAST,0) + 1;
                    STOCK_BOM_Data(intStockBomRow).STOCK_BOM_ID := F_Get_PkId_From_Seq('T_STOCK_BOM_DTL');
                    STOCK_BOM_Data(intStockBomRow).STOCK_ID := STOCK_Data(intStockRow).STOCK_ID;
                    STOCK_BOM_Data(intStockBomRow).MAIN_VARIANT_ID := B.MAIN_VARIANT_ID;
                    STOCK_BOM_Data(intStockBomRow).PARENT_VARIANT_ID := B.PARENT_VARIANT_ID;
                    STOCK_BOM_Data(intStockBomRow).BOM_VARIANT_ID := B.BOM_VARIANT_ID;
                    STOCK_BOM_Data(intStockBomRow).ACTUAL_VARIANT_ID := B.ACTUAL_VARIANT_ID;
                    STOCK_BOM_Data(intStockBomRow).STOCK_STATUS_ID := B.STOCK_STATUS_ID;
                    STOCK_BOM_Data(intStockBomRow).BOM_LEVEL := B.BOM_LEVEL;
                    STOCK_BOM_Data(intStockBomRow).QUANTITY := B.QUANTITY;
                    STOCK_BOM_Data(intStockBomRow).CONVERSION_FACTOR := B.CONVERSION_FACTOR;
            
                    STOCK_BOM_Data(intStockBomRow).STOCK_VALUE := 0;
                    IF B.QUANTITY > 0 AND iOrgQuantity >0 THEN
                        STOCK_BOM_Data(intStockBomRow).STOCK_VALUE := (iOrgValue / iOrgQuantity * iOrgCF) * B.QUANTITY; 
                    END IF;
                            
                    STOCK_BOM_Data(intStockBomRow).BOM_SET_NO := B.BOM_SET_NO;
                    STOCK_BOM_Data(intStockBomRow).PARENT_SET_NO := B.PARENT_SET_NO;
                    STOCK_BOM_Data(intStockBomRow).ROW_NO := B.ROW_NO;
                    STOCK_BOM_Data(intStockBomRow).SPECIAL_CHARACTER := B.SPECIAL_CHARACTER;
                    STOCK_BOM_Data(intStockBomRow).STOCK_CODE := NULL;
            
                    SBTL_Data(intStockBomRow).STOCK_BOM_ID := STOCK_BOM_Data(intStockBomRow).STOCK_BOM_ID;
                    SBTL_Data(intStockBomRow).SOR_TRANS_ITEM_BOM_ID := 0;
                    SBTL_Data(intStockBomRow).CUSTOM_STOCK_ID := 0;
                    SBTL_Data(intStockBomRow).OWNER_PARTY_ID := 0;
                    SBTL_Data(intStockBomRow).INWARD_TRANS_ITEM_BOM_ID := 0;
                    SBTL_Data(intStockBomRow).INWARD_TRANS_ITEM_ID := 0;
            
                    STOCK_BOM_LOC_SP_Data(intStockBomRow).STOCK_BOM_LOC_SP_ID := F_Get_PkId_From_Seq('T_STOCK_BOM_LOCATION_SP');
                    STOCK_BOM_LOC_SP_Data(intStockBomRow).STOCK_BOM_ID := STOCK_BOM_Data(intStockBomRow).STOCK_BOM_ID;
                    STOCK_BOM_LOC_SP_Data(intStockBomRow).LOCATION_ID := PKG_SAVE_TRANSACTION_DATA.intLocationId;
                    STOCK_BOM_LOC_SP_Data(intStockBomRow).SELLING_PRICE := B.TRANS_BOM_RATE;
                    STOCK_BOM_LOC_SP_Data(intStockBomRow).SELLING_AMOUNT := B.TRANS_BOM_AMOUNT;
                    STOCK_BOM_LOC_SP_Data(intStockBomRow).CALC_METHOD_ID := B.CALC_METHOD_ID;
             
                    intStockInOutRow := NVL(STOCK_IN_OUT_DTL_Data.LAST,0) + 1;        
                    STOCK_IN_OUT_DTL_Data(intStockInOutRow).STOCK_IN_OUT_DTL_ID := F_Get_PkId_From_Seq('T_STOCK_IN_OUT_DTL');
                    STOCK_IN_OUT_DTL_Data(intStockInOutRow).TRANS_ID := J.TRANS_ID;
                    STOCK_IN_OUT_DTL_Data(intStockInOutRow).TRANS_ITEM_ID := J.TRANS_ITEM_ID;
                    STOCK_IN_OUT_DTL_Data(intStockInOutRow).TRANS_ITEM_BOM_ID := B.TRANS_ITEM_BOM_ID;
                    STOCK_IN_OUT_DTL_Data(intStockInOutRow).STOCK_ID := STOCK_Data(intStockRow).STOCK_ID;
                    STOCK_IN_OUT_DTL_Data(intStockInOutRow).STOCK_BOM_ID := STOCK_BOM_Data(intStockBomRow).STOCK_BOM_ID;
                    STOCK_IN_OUT_DTL_Data(intStockInOutRow).VARIANT_ID := B.BOM_VARIANT_ID;
                    STOCK_IN_OUT_DTL_Data(intStockInOutRow).BATCH_ID := 0;
                    STOCK_IN_OUT_DTL_Data(intStockInOutRow).WC_ID := J.SRC_WC_ID;
                    STOCK_IN_OUT_DTL_Data(intStockInOutRow).WCGROUP_ID := J.SRC_WCGROUP_ID;
                    STOCK_IN_OUT_DTL_Data(intStockInOutRow).PARTY_ID := 0;
                    STOCK_IN_OUT_DTL_Data(intStockInOutRow).OWNER_PARTY_ID := 0;
                    STOCK_IN_OUT_DTL_Data(intStockInOutRow).QUANTITY := STOCK_BOM_Data(intStockBomRow).QUANTITY;
                    STOCK_IN_OUT_DTL_Data(intStockInOutRow).CONVERSION_FACTOR := STOCK_BOM_Data(intStockBomRow).CONVERSION_FACTOR;
                    STOCK_IN_OUT_DTL_Data(intStockInOutRow).STOCK_VALUE := STOCK_BOM_Data(intStockBomRow).STOCK_VALUE;
                    STOCK_IN_OUT_DTL_Data(intStockInOutRow).LABOUR_VALUE := 0;
                    STOCK_IN_OUT_DTL_Data(intStockInOutRow).ROW_IDENTITY := '+C';
                    STOCK_IN_OUT_DTL_Data(intStockInOutRow).STOCK_EFFECT_DATE := F_GET_DATE_DBTIMEZONE;
                    STOCK_IN_OUT_DTL_Data(intStockInOutRow).DEPARTMENT_IN_OUT_IND := 1;
                    STOCK_IN_OUT_DTL_Data(intStockInOutRow).TRANSFER_VALUE := 0;
                    STOCK_IN_OUT_DTL_Data(intStockInOutRow).PARENT_DEPARTMENT_IN_OUT_IND := 0;
            
                    intRow := NVL(TRANS_BOM_UPD_Data.LAST,0) + 1;  
                    TRANS_BOM_UPD_Data(intRow).DEST_STOCK_ID := STOCK_BOM_Data(intStockBomRow).STOCK_BOM_ID;
                    TRANS_BOM_UPD_PkId(intRow) := B.TRANS_ITEM_BOM_ID;
            
                    UPDATE T_TRANS_ITEM_BOM_DTL SET STOCK_VALUE = STOCK_BOM_Data(intStockBomRow).STOCK_VALUE WHERE TRANS_ITEM_BOM_ID = B.TRANS_ITEM_BOM_ID;          
                
                END LOOP;        
            
                /*######################################################################
                        END GIVING EFFECT FOR NEW LOT
                ######################################################################*/
            END IF;                            

            /*######################################################################
                    GIVING EFFECT FOR NEW LOT
            ######################################################################*/
        
            IF blnLotEdit = FALSE THEN
            
                intStockInOutRow := NVL(STOCK_IN_OUT_DTL_Data.LAST,0) + 1;        
                STOCK_IN_OUT_DTL_Data(intStockInOutRow).STOCK_IN_OUT_DTL_ID := F_Get_PkId_From_Seq('T_STOCK_IN_OUT_DTL');
                STOCK_IN_OUT_DTL_Data(intStockInOutRow).TRANS_ID := J.TRANS_ID;
                STOCK_IN_OUT_DTL_Data(intStockInOutRow).TRANS_ITEM_ID := J.TRANS_ITEM_ID;
                STOCK_IN_OUT_DTL_Data(intStockInOutRow).TRANS_ITEM_BOM_ID := 0;
                STOCK_IN_OUT_DTL_Data(intStockInOutRow).STOCK_ID := J.SRC_STOCK_ID;
                STOCK_IN_OUT_DTL_Data(intStockInOutRow).STOCK_BOM_ID := 0;
                STOCK_IN_OUT_DTL_Data(intStockInOutRow).VARIANT_ID := J.VARIANT_ID;
                STOCK_IN_OUT_DTL_Data(intStockInOutRow).BATCH_ID := 0;
                STOCK_IN_OUT_DTL_Data(intStockInOutRow).WC_ID := J.SRC_WC_ID;
                STOCK_IN_OUT_DTL_Data(intStockInOutRow).WCGROUP_ID := J.SRC_WCGROUP_ID;
                STOCK_IN_OUT_DTL_Data(intStockInOutRow).PARTY_ID := 0;
                STOCK_IN_OUT_DTL_Data(intStockInOutRow).OWNER_PARTY_ID := 0;
                STOCK_IN_OUT_DTL_Data(intStockInOutRow).QUANTITY := STOCK_Data(intStockRow).QUANTITY;
                STOCK_IN_OUT_DTL_Data(intStockInOutRow).CONVERSION_FACTOR := STOCK_Data(intStockRow).CONVERSION_FACTOR;
                STOCK_IN_OUT_DTL_Data(intStockInOutRow).STOCK_VALUE := STOCK_Data(intStockRow).STOCK_VALUE;
                STOCK_IN_OUT_DTL_Data(intStockInOutRow).LABOUR_VALUE := STOCK_Data(intStockRow).LABOUR_VALUE;
                STOCK_IN_OUT_DTL_Data(intStockInOutRow).ROW_IDENTITY := '-C';
                STOCK_IN_OUT_DTL_Data(intStockInOutRow).STOCK_EFFECT_DATE := F_GET_DATE_DBTIMEZONE;
                STOCK_IN_OUT_DTL_Data(intStockInOutRow).DEPARTMENT_IN_OUT_IND := 1;
                STOCK_IN_OUT_DTL_Data(intStockInOutRow).TRANSFER_VALUE := 0;
                STOCK_IN_OUT_DTL_Data(intStockInOutRow).PARENT_DEPARTMENT_IN_OUT_IND := 0;
        
                
                IF iOrgQuantity - J.QUANTITY = 0 THEN
                    UPDATE T_STOCK 
                    SET QUANTITY = 0, 
                    CONVERSION_FACTOR = 0,
                    STOCK_VALUE = 0,
                    LABOUR_VALUE = 0   
                    WHERE STOCK_ID = J.SRC_STOCK_ID;                
                ELSE
                    UPDATE T_STOCK 
                    SET QUANTITY = QUANTITY - J.QUANTITY, 
                    CONVERSION_FACTOR = (dblQty - (J.QUANTITY * J.CONVERSION_FACTOR)) / (QUANTITY - J.QUANTITY),
                    STOCK_VALUE = STOCK_VALUE - ((STOCK_VALUE / dblQty) * (J.QUANTITY * J.CONVERSION_FACTOR)),
                    LABOUR_VALUE = LABOUR_VALUE - ((LABOUR_VALUE / dblQty) * (J.QUANTITY * J.CONVERSION_FACTOR))   
                    WHERE STOCK_ID = J.SRC_STOCK_ID;
                END IF; 
            
                FOR SB IN (SELECT * FROM T_STOCK_BOM_DTL WHERE STOCK_ID = J.SRC_STOCK_ID)
                LOOP
                    intStockInOutRow := NVL(STOCK_IN_OUT_DTL_Data.LAST,0) + 1;        
                    STOCK_IN_OUT_DTL_Data(intStockInOutRow).STOCK_IN_OUT_DTL_ID := F_Get_PkId_From_Seq('T_STOCK_IN_OUT_DTL');
                    STOCK_IN_OUT_DTL_Data(intStockInOutRow).TRANS_ID := J.TRANS_ID;
                    STOCK_IN_OUT_DTL_Data(intStockInOutRow).TRANS_ITEM_ID := J.TRANS_ITEM_ID;
                    STOCK_IN_OUT_DTL_Data(intStockInOutRow).TRANS_ITEM_BOM_ID := 0;
                    STOCK_IN_OUT_DTL_Data(intStockInOutRow).STOCK_ID := J.SRC_STOCK_ID;
                    STOCK_IN_OUT_DTL_Data(intStockInOutRow).STOCK_BOM_ID := SB.STOCK_BOM_ID;
                    STOCK_IN_OUT_DTL_Data(intStockInOutRow).VARIANT_ID := SB.BOM_VARIANT_ID;
                    STOCK_IN_OUT_DTL_Data(intStockInOutRow).BATCH_ID := 0;
                    STOCK_IN_OUT_DTL_Data(intStockInOutRow).WC_ID := J.SRC_WC_ID;
                    STOCK_IN_OUT_DTL_Data(intStockInOutRow).WCGROUP_ID := J.SRC_WCGROUP_ID;
                    STOCK_IN_OUT_DTL_Data(intStockInOutRow).PARTY_ID := 0;
                    STOCK_IN_OUT_DTL_Data(intStockInOutRow).OWNER_PARTY_ID := 0;
                    
                    IF iOrgQuantity - J.QUANTITY = 0 THEN                                        
                        STOCK_IN_OUT_DTL_Data(intStockInOutRow).QUANTITY := SB.QUANTITY; 
                        STOCK_IN_OUT_DTL_Data(intStockInOutRow).CONVERSION_FACTOR := SB.CONVERSION_FACTOR;
                        STOCK_IN_OUT_DTL_Data(intStockInOutRow).STOCK_VALUE := SB.STOCK_VALUE;
                    ELSE
                        STOCK_IN_OUT_DTL_Data(intStockInOutRow).QUANTITY := (SB.QUANTITY / dblQty) * (J.QUANTITY * J.CONVERSION_FACTOR); 
                        STOCK_IN_OUT_DTL_Data(intStockInOutRow).CONVERSION_FACTOR := SB.CONVERSION_FACTOR;
                        STOCK_IN_OUT_DTL_Data(intStockInOutRow).STOCK_VALUE := (SB.STOCK_VALUE / dblQty) * (J.QUANTITY * J.CONVERSION_FACTOR);
                    END IF;                                            
                    
                    STOCK_IN_OUT_DTL_Data(intStockInOutRow).LABOUR_VALUE := 0;
                    STOCK_IN_OUT_DTL_Data(intStockInOutRow).ROW_IDENTITY := '-C';
                    STOCK_IN_OUT_DTL_Data(intStockInOutRow).STOCK_EFFECT_DATE := F_GET_DATE_DBTIMEZONE;
                    STOCK_IN_OUT_DTL_Data(intStockInOutRow).DEPARTMENT_IN_OUT_IND := 1;
                    STOCK_IN_OUT_DTL_Data(intStockInOutRow).TRANSFER_VALUE := 0;
                    STOCK_IN_OUT_DTL_Data(intStockInOutRow).PARENT_DEPARTMENT_IN_OUT_IND := 0;
                END LOOP;
            
                IF iOrgQuantity - J.QUANTITY = 0 THEN
                    UPDATE T_STOCK_BOM_DTL 
                    SET QUANTITY = 0,STOCK_VALUE = 0
                    WHERE STOCK_ID = J.SRC_STOCK_ID;
                ELSE
                    UPDATE T_STOCK_BOM_DTL 
                    SET QUANTITY = QUANTITY - (QUANTITY / dblQty) * (J.QUANTITY * J.CONVERSION_FACTOR), 
                    STOCK_VALUE = STOCK_VALUE - ((STOCK_VALUE / dblQty) * (J.QUANTITY * J.CONVERSION_FACTOR))
                    WHERE STOCK_ID = J.SRC_STOCK_ID;
                END IF;                     
            
            	P_INS_UPD_ITEM_SUMMARY (
                    iCallMode => 'STOCK ITEM', 
                    iVariantId => 0, 
                    iTransItemId => 0,
                    iStockId => J.SRC_STOCK_ID,
                    iTransId => 0
                );

                --INSERTING DATA IN STOCK GROUPING TABLE
                IF J.STAMP_REMARK IS NOT NULL THEN
                    BEGIN
                        
                        SELECT GROUP_CODE INTO StockGroupCode FROM T_STOCK_GROUP
                        WHERE STOCK_CODE = J.STAMP_REMARK;
                        
                        INSERT INTO T_STOCK_GROUP
                        VALUES(STOCK_GROUP.NEXTVAL,StockGroupCode,vStockCode,0, 0, 0);
                    EXCEPTION
                        WHEN NO_DATA_FOUND THEN
                            SELECT ABS(DBMS_RANDOM.RANDOM) INTO StockGroupCode FROM DUAL;
                                                
                            INSERT INTO T_STOCK_GROUP
                            VALUES(STOCK_GROUP.NEXTVAL,StockGroupCode,J.STAMP_REMARK,0, 0, 0);
                            
                            INSERT INTO T_STOCK_GROUP
                            VALUES(STOCK_GROUP.NEXTVAL,StockGroupCode,vStockCode,0, 0, 0);
                    END;
                END IF; 

            ELSE
                SELECT S.QUANTITY, S.CONVERSION_FACTOR, S.STOCK_VALUE
                INTO iOrgQuantity, iOrgCF, iOrgValue 
                FROM T_STOCK S WHERE S.STOCK_ID = J.SRC_STOCK_ID;
            
                dblNewPcsForOrgLot := iOrgQuantity - J.QUANTITY;            
                dblNewQtyForOrgLot := (iOrgQuantity * iOrgCF) - (J.QUANTITY * J.CONVERSION_FACTOR);
            
                FOR X IN(SELECT * FROM T_STOCK WHERE STOCK_ID = iOrgStockId)
                LOOP
                    IF X.QUANTITY <= 0 THEN
                        raise_application_error (-20100,'##SOUCE LOT PIECES IS ZERO##');
                    ELSIF (X.QUANTITY * X.CONVERSION_FACTOR) + dblNewQtyForOrgLot < 0 THEN
                        raise_application_error (-20100,'##SOUCE LOT WEIGHT IS GETTING NEGATIVE##');
                    END IF;                         
                END LOOP;
        
                intStockInOutRow := NVL(STOCK_IN_OUT_DTL_Data.LAST,0) + 1;        
                STOCK_IN_OUT_DTL_Data(intStockInOutRow).STOCK_IN_OUT_DTL_ID := F_Get_PkId_From_Seq('T_STOCK_IN_OUT_DTL');
                STOCK_IN_OUT_DTL_Data(intStockInOutRow).TRANS_ID := J.TRANS_ID;
                STOCK_IN_OUT_DTL_Data(intStockInOutRow).TRANS_ITEM_ID := J.TRANS_ITEM_ID;
                STOCK_IN_OUT_DTL_Data(intStockInOutRow).TRANS_ITEM_BOM_ID := 0;
                STOCK_IN_OUT_DTL_Data(intStockInOutRow).STOCK_ID := J.SRC_STOCK_ID;
                STOCK_IN_OUT_DTL_Data(intStockInOutRow).STOCK_BOM_ID := 0;
                STOCK_IN_OUT_DTL_Data(intStockInOutRow).VARIANT_ID := J.VARIANT_ID;
                STOCK_IN_OUT_DTL_Data(intStockInOutRow).BATCH_ID := 0;
                STOCK_IN_OUT_DTL_Data(intStockInOutRow).WC_ID := J.SRC_WC_ID;
                STOCK_IN_OUT_DTL_Data(intStockInOutRow).WCGROUP_ID := J.SRC_WCGROUP_ID;
                STOCK_IN_OUT_DTL_Data(intStockInOutRow).PARTY_ID := 0;
                STOCK_IN_OUT_DTL_Data(intStockInOutRow).OWNER_PARTY_ID := 0;
                STOCK_IN_OUT_DTL_Data(intStockInOutRow).QUANTITY := iOrgQuantity;
                STOCK_IN_OUT_DTL_Data(intStockInOutRow).CONVERSION_FACTOR := iOrgCF;
                STOCK_IN_OUT_DTL_Data(intStockInOutRow).STOCK_VALUE := iOrgValue;
                STOCK_IN_OUT_DTL_Data(intStockInOutRow).LABOUR_VALUE := 0;
                STOCK_IN_OUT_DTL_Data(intStockInOutRow).ROW_IDENTITY := '-C';
                STOCK_IN_OUT_DTL_Data(intStockInOutRow).STOCK_EFFECT_DATE := F_GET_DATE_DBTIMEZONE;
                STOCK_IN_OUT_DTL_Data(intStockInOutRow).DEPARTMENT_IN_OUT_IND := 1;
                STOCK_IN_OUT_DTL_Data(intStockInOutRow).TRANSFER_VALUE := 0;
                STOCK_IN_OUT_DTL_Data(intStockInOutRow).PARENT_DEPARTMENT_IN_OUT_IND := 0;
        
        
                FOR SB IN (SELECT * FROM T_STOCK_BOM_DTL WHERE STOCK_ID = J.SRC_STOCK_ID)
                LOOP
                    intStockInOutRow := NVL(STOCK_IN_OUT_DTL_Data.LAST,0) + 1;        
                    STOCK_IN_OUT_DTL_Data(intStockInOutRow).STOCK_IN_OUT_DTL_ID := F_Get_PkId_From_Seq('T_STOCK_IN_OUT_DTL');
                    STOCK_IN_OUT_DTL_Data(intStockInOutRow).TRANS_ID := J.TRANS_ID;
                    STOCK_IN_OUT_DTL_Data(intStockInOutRow).TRANS_ITEM_ID := J.TRANS_ITEM_ID;
                    STOCK_IN_OUT_DTL_Data(intStockInOutRow).TRANS_ITEM_BOM_ID := 0;
                    STOCK_IN_OUT_DTL_Data(intStockInOutRow).STOCK_ID := J.SRC_STOCK_ID;
                    STOCK_IN_OUT_DTL_Data(intStockInOutRow).STOCK_BOM_ID := SB.STOCK_BOM_ID;
                    STOCK_IN_OUT_DTL_Data(intStockInOutRow).VARIANT_ID := SB.BOM_VARIANT_ID;
                    STOCK_IN_OUT_DTL_Data(intStockInOutRow).BATCH_ID := 0;
                    STOCK_IN_OUT_DTL_Data(intStockInOutRow).WC_ID := J.SRC_WC_ID;
                    STOCK_IN_OUT_DTL_Data(intStockInOutRow).WCGROUP_ID := J.SRC_WCGROUP_ID;
                    STOCK_IN_OUT_DTL_Data(intStockInOutRow).PARTY_ID := 0;
                    STOCK_IN_OUT_DTL_Data(intStockInOutRow).OWNER_PARTY_ID := 0;
                    STOCK_IN_OUT_DTL_Data(intStockInOutRow).QUANTITY := SB.QUANTITY; 
                    STOCK_IN_OUT_DTL_Data(intStockInOutRow).CONVERSION_FACTOR := SB.CONVERSION_FACTOR;
                    STOCK_IN_OUT_DTL_Data(intStockInOutRow).STOCK_VALUE := SB.STOCK_VALUE;
                    STOCK_IN_OUT_DTL_Data(intStockInOutRow).LABOUR_VALUE := 0;
                    STOCK_IN_OUT_DTL_Data(intStockInOutRow).ROW_IDENTITY := '-C';
                    STOCK_IN_OUT_DTL_Data(intStockInOutRow).STOCK_EFFECT_DATE := F_GET_DATE_DBTIMEZONE;
                    STOCK_IN_OUT_DTL_Data(intStockInOutRow).DEPARTMENT_IN_OUT_IND := 1;
                    STOCK_IN_OUT_DTL_Data(intStockInOutRow).TRANSFER_VALUE := 0;
                    STOCK_IN_OUT_DTL_Data(intStockInOutRow).PARENT_DEPARTMENT_IN_OUT_IND := 0;
                END LOOP;
            
                UPDATE T_STOCK SET QUANTITY = 0,CONVERSION_FACTOR = 0,STOCK_VALUE = 0,LABOUR_VALUE = 0 WHERE STOCK_ID = J.SRC_STOCK_ID;
                UPDATE T_STOCK_BOM_DTL SET QUANTITY = 0,CONVERSION_FACTOR = 0,STOCK_VALUE = 0 WHERE STOCK_ID = J.SRC_STOCK_ID; 
            
            	P_INS_UPD_ITEM_SUMMARY (
                    iCallMode => 'STOCK ITEM', 
                    iVariantId => 0, 
                    iTransItemId => 0,
                    iStockId => J.SRC_STOCK_ID,
                    iTransId => 0
                );

                -- GIVING EFFECT FOR ORG LOT
                SELECT S.QUANTITY, S.CONVERSION_FACTOR, S.STOCK_VALUE
                INTO iOrgQuantity, iOrgCF, iOrgValue
                FROM T_STOCK S WHERE S.STOCK_ID = iOrgStockId;
            
                IF iOrgCF >0 THEN
                    intStockInOutRow := NVL(STOCK_IN_OUT_DTL_Data.LAST,0) + 1;        
                    STOCK_IN_OUT_DTL_Data(intStockInOutRow).STOCK_IN_OUT_DTL_ID := F_Get_PkId_From_Seq('T_STOCK_IN_OUT_DTL');
                    STOCK_IN_OUT_DTL_Data(intStockInOutRow).TRANS_ID := J.TRANS_ID;
                    STOCK_IN_OUT_DTL_Data(intStockInOutRow).TRANS_ITEM_ID := J.TRANS_ITEM_ID;
                    STOCK_IN_OUT_DTL_Data(intStockInOutRow).TRANS_ITEM_BOM_ID := 0;
                    STOCK_IN_OUT_DTL_Data(intStockInOutRow).STOCK_ID := J.SRC_STOCK_ID;
                    STOCK_IN_OUT_DTL_Data(intStockInOutRow).STOCK_BOM_ID := 0;
                    STOCK_IN_OUT_DTL_Data(intStockInOutRow).VARIANT_ID := J.VARIANT_ID;
                    STOCK_IN_OUT_DTL_Data(intStockInOutRow).BATCH_ID := 0;
                    STOCK_IN_OUT_DTL_Data(intStockInOutRow).WC_ID := iOrgStockId;
                    STOCK_IN_OUT_DTL_Data(intStockInOutRow).WCGROUP_ID := J.SRC_WCGROUP_ID;
                    STOCK_IN_OUT_DTL_Data(intStockInOutRow).PARTY_ID := 0;
                    STOCK_IN_OUT_DTL_Data(intStockInOutRow).OWNER_PARTY_ID := 0;
                    STOCK_IN_OUT_DTL_Data(intStockInOutRow).QUANTITY := iOrgQuantity;
                    STOCK_IN_OUT_DTL_Data(intStockInOutRow).CONVERSION_FACTOR := iOrgCF;
                    STOCK_IN_OUT_DTL_Data(intStockInOutRow).STOCK_VALUE := iOrgValue;
                    STOCK_IN_OUT_DTL_Data(intStockInOutRow).LABOUR_VALUE := 0;
                    STOCK_IN_OUT_DTL_Data(intStockInOutRow).ROW_IDENTITY := '-C';
                    STOCK_IN_OUT_DTL_Data(intStockInOutRow).STOCK_EFFECT_DATE := F_GET_DATE_DBTIMEZONE;
                    STOCK_IN_OUT_DTL_Data(intStockInOutRow).DEPARTMENT_IN_OUT_IND := 1;
                    STOCK_IN_OUT_DTL_Data(intStockInOutRow).TRANSFER_VALUE := 0;
                    STOCK_IN_OUT_DTL_Data(intStockInOutRow).PARENT_DEPARTMENT_IN_OUT_IND := 0;
        
                    FOR SB IN (SELECT * FROM T_STOCK_BOM_DTL WHERE STOCK_ID = iOrgStockId)
                    LOOP
                        intStockInOutRow := NVL(STOCK_IN_OUT_DTL_Data.LAST,0) + 1;        
                        STOCK_IN_OUT_DTL_Data(intStockInOutRow).STOCK_IN_OUT_DTL_ID := F_Get_PkId_From_Seq('T_STOCK_IN_OUT_DTL');
                        STOCK_IN_OUT_DTL_Data(intStockInOutRow).TRANS_ID := J.TRANS_ID;
                        STOCK_IN_OUT_DTL_Data(intStockInOutRow).TRANS_ITEM_ID := J.TRANS_ITEM_ID;
                        STOCK_IN_OUT_DTL_Data(intStockInOutRow).TRANS_ITEM_BOM_ID := 0;
                        STOCK_IN_OUT_DTL_Data(intStockInOutRow).STOCK_ID := SB.STOCK_ID;
                        STOCK_IN_OUT_DTL_Data(intStockInOutRow).STOCK_BOM_ID := SB.STOCK_BOM_ID;
                        STOCK_IN_OUT_DTL_Data(intStockInOutRow).VARIANT_ID := SB.BOM_VARIANT_ID;
                        STOCK_IN_OUT_DTL_Data(intStockInOutRow).BATCH_ID := 0;
                        STOCK_IN_OUT_DTL_Data(intStockInOutRow).WC_ID := J.SRC_WC_ID;
                        STOCK_IN_OUT_DTL_Data(intStockInOutRow).WCGROUP_ID := J.SRC_WCGROUP_ID;
                        STOCK_IN_OUT_DTL_Data(intStockInOutRow).PARTY_ID := 0;
                        STOCK_IN_OUT_DTL_Data(intStockInOutRow).OWNER_PARTY_ID := 0;
                        STOCK_IN_OUT_DTL_Data(intStockInOutRow).QUANTITY := SB.QUANTITY; 
                        STOCK_IN_OUT_DTL_Data(intStockInOutRow).CONVERSION_FACTOR := SB.CONVERSION_FACTOR;
                        STOCK_IN_OUT_DTL_Data(intStockInOutRow).STOCK_VALUE := SB.STOCK_VALUE;
                        STOCK_IN_OUT_DTL_Data(intStockInOutRow).LABOUR_VALUE := 0;
                        STOCK_IN_OUT_DTL_Data(intStockInOutRow).ROW_IDENTITY := '-C';
                        STOCK_IN_OUT_DTL_Data(intStockInOutRow).STOCK_EFFECT_DATE := F_GET_DATE_DBTIMEZONE;
                        STOCK_IN_OUT_DTL_Data(intStockInOutRow).DEPARTMENT_IN_OUT_IND := 1;
                        STOCK_IN_OUT_DTL_Data(intStockInOutRow).TRANSFER_VALUE := 0;
                        STOCK_IN_OUT_DTL_Data(intStockInOutRow).PARENT_DEPARTMENT_IN_OUT_IND := 0;
                    END LOOP;
                
                    SELECT STOCK_VALUE / (QUANTITY * CONVERSION_FACTOR),LABOUR_VALUE / (QUANTITY * CONVERSION_FACTOR)
                    INTO dblRate, dblLabRate
                    FROM T_TRANS_ITEM_DTL WHERE TRANS_ITEM_ID = iInwardTransItemId;
                
                    dblPcs := iOrgQuantity + dblNewPcsForOrgLot;
                    dblWt := (iOrgQuantity * iOrgCF) + dblNewQtyForOrgLot;
                
                    UPDATE T_STOCK 
                    SET QUANTITY = dblPcs,CONVERSION_FACTOR = dblWt / dblPcs,
                    STOCK_VALUE = dblRate * dblWt,
                    LABOUR_VALUE = dblLabRate * dblWt 
                    WHERE STOCK_ID = iOrgStockId;
                
                    UPDATE T_STOCK_BOM_DTL SET 
                    QUANTITY = (QUANTITY / (iOrgQuantity * iOrgCF)) * dblWt,
                    STOCK_VALUE = (STOCK_VALUE / (iOrgQuantity * iOrgCF)) * dblWt
                    WHERE STOCK_ID = iOrgStockId;
                
                	P_INS_UPD_ITEM_SUMMARY (
                        iCallMode => 'STOCK ITEM', 
                        iVariantId => 0, 
                        iTransItemId => 0,
                        iStockId => iOrgStockId,
                        iTransId => 0
                    );

                    SELECT S.QUANTITY, S.CONVERSION_FACTOR, S.STOCK_VALUE
                    INTO iOrgQuantity, iOrgCF, iOrgValue
                    FROM T_STOCK S WHERE S.STOCK_ID = iOrgStockId;
                
                    intStockInOutRow := NVL(STOCK_IN_OUT_DTL_Data.LAST,0) + 1;        
                    STOCK_IN_OUT_DTL_Data(intStockInOutRow).STOCK_IN_OUT_DTL_ID := F_Get_PkId_From_Seq('T_STOCK_IN_OUT_DTL');
                    STOCK_IN_OUT_DTL_Data(intStockInOutRow).TRANS_ID := J.TRANS_ID;
                    STOCK_IN_OUT_DTL_Data(intStockInOutRow).TRANS_ITEM_ID := J.TRANS_ITEM_ID;
                    STOCK_IN_OUT_DTL_Data(intStockInOutRow).TRANS_ITEM_BOM_ID := 0;
                    STOCK_IN_OUT_DTL_Data(intStockInOutRow).STOCK_ID := J.SRC_STOCK_ID;
                    STOCK_IN_OUT_DTL_Data(intStockInOutRow).STOCK_BOM_ID := 0;
                    STOCK_IN_OUT_DTL_Data(intStockInOutRow).VARIANT_ID := J.VARIANT_ID;
                    STOCK_IN_OUT_DTL_Data(intStockInOutRow).BATCH_ID := 0;
                    STOCK_IN_OUT_DTL_Data(intStockInOutRow).WC_ID := iOrgStockId;
                    STOCK_IN_OUT_DTL_Data(intStockInOutRow).WCGROUP_ID := J.SRC_WCGROUP_ID;
                    STOCK_IN_OUT_DTL_Data(intStockInOutRow).PARTY_ID := 0;
                    STOCK_IN_OUT_DTL_Data(intStockInOutRow).OWNER_PARTY_ID := 0;
                    STOCK_IN_OUT_DTL_Data(intStockInOutRow).QUANTITY := iOrgQuantity;
                    STOCK_IN_OUT_DTL_Data(intStockInOutRow).CONVERSION_FACTOR := iOrgCF;
                    STOCK_IN_OUT_DTL_Data(intStockInOutRow).STOCK_VALUE := iOrgValue;
                    STOCK_IN_OUT_DTL_Data(intStockInOutRow).LABOUR_VALUE := 0;
                    STOCK_IN_OUT_DTL_Data(intStockInOutRow).ROW_IDENTITY := '+C';
                    STOCK_IN_OUT_DTL_Data(intStockInOutRow).STOCK_EFFECT_DATE := F_GET_DATE_DBTIMEZONE;
                    STOCK_IN_OUT_DTL_Data(intStockInOutRow).DEPARTMENT_IN_OUT_IND := 1;
                    STOCK_IN_OUT_DTL_Data(intStockInOutRow).TRANSFER_VALUE := 0;
                    STOCK_IN_OUT_DTL_Data(intStockInOutRow).PARENT_DEPARTMENT_IN_OUT_IND := 0;
        
                    FOR SB IN (SELECT * FROM T_STOCK_BOM_DTL WHERE STOCK_ID = iOrgStockId)
                    LOOP
                        intStockInOutRow := NVL(STOCK_IN_OUT_DTL_Data.LAST,0) + 1;        
                        STOCK_IN_OUT_DTL_Data(intStockInOutRow).STOCK_IN_OUT_DTL_ID := F_Get_PkId_From_Seq('T_STOCK_IN_OUT_DTL');
                        STOCK_IN_OUT_DTL_Data(intStockInOutRow).TRANS_ID := J.TRANS_ID;
                        STOCK_IN_OUT_DTL_Data(intStockInOutRow).TRANS_ITEM_ID := J.TRANS_ITEM_ID;
                        STOCK_IN_OUT_DTL_Data(intStockInOutRow).TRANS_ITEM_BOM_ID := 0;
                        STOCK_IN_OUT_DTL_Data(intStockInOutRow).STOCK_ID := SB.STOCK_ID;
                        STOCK_IN_OUT_DTL_Data(intStockInOutRow).STOCK_BOM_ID := SB.STOCK_BOM_ID;
                        STOCK_IN_OUT_DTL_Data(intStockInOutRow).VARIANT_ID := SB.BOM_VARIANT_ID;
                        STOCK_IN_OUT_DTL_Data(intStockInOutRow).BATCH_ID := 0;
                        STOCK_IN_OUT_DTL_Data(intStockInOutRow).WC_ID := J.SRC_WC_ID;
                        STOCK_IN_OUT_DTL_Data(intStockInOutRow).WCGROUP_ID := J.SRC_WCGROUP_ID;
                        STOCK_IN_OUT_DTL_Data(intStockInOutRow).PARTY_ID := 0;
                        STOCK_IN_OUT_DTL_Data(intStockInOutRow).OWNER_PARTY_ID := 0;
                        STOCK_IN_OUT_DTL_Data(intStockInOutRow).QUANTITY := SB.QUANTITY; 
                        STOCK_IN_OUT_DTL_Data(intStockInOutRow).CONVERSION_FACTOR := SB.CONVERSION_FACTOR;
                        STOCK_IN_OUT_DTL_Data(intStockInOutRow).STOCK_VALUE := SB.STOCK_VALUE;
                        STOCK_IN_OUT_DTL_Data(intStockInOutRow).LABOUR_VALUE := 0;
                        STOCK_IN_OUT_DTL_Data(intStockInOutRow).ROW_IDENTITY := '+C';
                        STOCK_IN_OUT_DTL_Data(intStockInOutRow).STOCK_EFFECT_DATE := F_GET_DATE_DBTIMEZONE;
                        STOCK_IN_OUT_DTL_Data(intStockInOutRow).DEPARTMENT_IN_OUT_IND := 1;
                        STOCK_IN_OUT_DTL_Data(intStockInOutRow).TRANSFER_VALUE := 0;
                        STOCK_IN_OUT_DTL_Data(intStockInOutRow).PARENT_DEPARTMENT_IN_OUT_IND := 0;
                    END LOOP;
                END IF;
            END IF;            
        END LOOP;    
    
        FORALL I IN STOCK_Data.FIRST..STOCK_Data.LAST
            INSERT INTO T_STOCK VALUES STOCK_Data(I);

        FORALL I IN STOCK_DTL_Data.FIRST..STOCK_DTL_Data.LAST
            INSERT INTO T_STOCK_DTL VALUES STOCK_DTL_Data(I);

        FORALL I IN STL_Data.FIRST..STL_Data.LAST
            INSERT INTO T_STOCK_TRANS_LINK VALUES STL_Data(I);

        FORALL I IN STOCK_LOCATION_SP_Data.FIRST..STOCK_LOCATION_SP_Data.LAST
            INSERT INTO T_STOCK_LOCATION_SP VALUES STOCK_LOCATION_SP_Data(I);

        FORALL I IN STOCK_BOM_Data.FIRST..STOCK_BOM_Data.LAST
            INSERT INTO T_STOCK_BOM_DTL VALUES STOCK_BOM_Data(I);

        FORALL I IN SBTL_Data.FIRST..SBTL_Data.LAST
            INSERT INTO T_STOCK_BOM_TRANS_LINK VALUES SBTL_Data(I);
        
        FORALL I IN STOCK_BOM_LOC_SP_Data.FIRST..STOCK_BOM_LOC_SP_Data.LAST
            INSERT INTO T_STOCK_BOM_LOCATION_SP VALUES STOCK_BOM_LOC_SP_Data(I);

        FORALL I IN STOCK_IN_OUT_DTL_Data.FIRST..STOCK_IN_OUT_DTL_Data.LAST
            INSERT INTO T_STOCK_IN_OUT_DTL VALUES STOCK_IN_OUT_DTL_Data(I);

        IF STOCK_Data.COUNT > 0 THEN
            FOR I IN STOCK_Data.FIRST..STOCK_Data.LAST
            LOOP
            	P_INS_UPD_ITEM_SUMMARY (
                    iCallMode => 'STOCK ITEM', 
                    iVariantId => 0, 
                    iTransItemId => 0,
                    iStockId => STOCK_Data(I).STOCK_ID,
                    iTransId => 0
                );
            END LOOP;
        END IF;            

        IF TRANS_ITEM_UPD_Data.COUNT >0 THEN
            FORALL I IN TRANS_ITEM_UPD_Data.FIRST..TRANS_ITEM_UPD_Data.LAST
           	UPDATE 
            (
                SELECT DEST_STOCK_ID FROM T_TRANS_ITEM_DTL WHERE TRANS_ITEM_ID = TRANS_ITEM_UPD_PKId(I)
            )
            SET ROW = TRANS_ITEM_UPD_Data(I);        
        END IF;            

        IF TRANS_BOM_UPD_Data.COUNT >0 THEN
            FORALL I IN TRANS_BOM_UPD_Data.FIRST..TRANS_BOM_UPD_Data.LAST
           	UPDATE 
            (
                SELECT DEST_STOCK_BOM_ID FROM T_TRANS_ITEM_BOM_DTL WHERE TRANS_ITEM_BOM_ID = TRANS_BOM_UPD_PKId(I)
            )
            SET ROW = TRANS_BOM_UPD_Data(I);        
        END IF;            


        STOCK_Data.DELETE;
        STOCK_DTL_Data.DELETE;
        STL_Data.DELETE;
        STOCK_BOM_Data.DELETE;
        SBTL_Data.DELETE;
        STOCK_IN_OUT_DTL_Data.DELETE;
        STOCK_LOCATION_SP_Data.DELETE;
        STOCK_BOM_LOC_SP_Data.DELETE;
        TRANS_ITEM_UPD_Data.DELETE;
        TRANS_BOM_UPD_Data.DELETE;
        TRANS_ITEM_UPD_PKId.DELETE;
        TRANS_BOM_UPD_PKId.DELETE;
    ELSE
        
        SELECT CONFIG_VALUE
        INTO strDirName
        FROM T_CONFIG_GLOBAL
        WHERE CONFIG_ID = 24;
        
        l_bfile := BFILENAME(strDirName, iFilePointer||'_ITEM.xml');
        IF dbms_lob.FILEEXISTS(l_bfile) = 1 THEN

            xml_doc := DBMS_XMLDOM.NewDOMDocument(xmltype( l_bfile , nls_charset_id('AL32UTF8')));
            xml_nl  := DBMS_XMLDOM.GetElementsByTagName(xml_doc, 'clsTransItemDetail');
            
            intTemp := 0;
            FOR i IN 0..(DBMS_XMLDOM.getLength(xml_nl) - 1) LOOP

                intTemp := intTemp +1;
                xml_node := DBMS_XMLDOM.Item(xml_nl, i);
                
                DBMS_XSLPROCESSOR.valueOf(xml_node, 'SrcStockId', lngStockId);
                DBMS_XSLPROCESSOR.valueOf(xml_node, 'Quantity1', dblPcs);
                DBMS_XSLPROCESSOR.valueOf(xml_node, 'Quantity2', dblWt);
                DBMS_XSLPROCESSOR.valueOf(xml_node, 'Rate', dblRate);
                DBMS_XSLPROCESSOR.valueOf(xml_node, 'LotName', LastTagNo);
                DBMS_XSLPROCESSOR.valueOf(xml_node, 'RowStatus', RowStatus);
                DBMS_XSLPROCESSOR.valueOf(xml_node, 'WastagePer', WastagePer);
                
                
                FOR J IN
                (
                    SELECT S.*,SD.LOCATION_ID,SD.WC_ID,SD.WCGROUP_ID,TID.ADD_NUM1 AS TAG_LOCATION_ID,STL.ISSUE_TRANS_ITEM_ID 
                    FROM T_STOCK S, V_STOCK_DTL SD,V_TRANS_ITEM_DTL TID, T_STOCK_TRANS_LINK STL 
                    WHERE STL.ISSUE_TRANS_ITEM_ID = TID.TRANS_ITEM_ID 
                    AND S.STOCK_ID = STL.STOCK_ID 
                    AND S.STOCK_ID = SD.STOCK_ID AND S.STOCK_ID = lngStockId
                )
                LOOP
                
                    PKG_SAVE_TRANSACTION_DATA.intLocationId := J.LOCATION_ID;

                    SELECT TRANS_HDR.NEXTVAL INTO lngTransId FROM DUAL;
                
                    INSERT INTO T_TRANS_HDR(TRANS_ID, TRANS_DATE, TRANS_TYPE, TRANS_SUBTYPE_ID, TRANS_CATEGORY_LINK_ID, LOCATION_ID, YEAR_ID, DOC_NO, REF_TRANS_ID, SRC_WC_ID, SRC_WCGROUP_ID, DEST_WC_ID, DEST_WCGROUP_ID, OPERATION_ID, TRANS_REMARK, ADDN_DATA, SETTLED_IND, ROW_STATUS, VERIFIED_IND, APPROVAL_DATE)
                    VALUES(lngTransId, TO_DATE(TO_CHAR(F_GET_DATE_DBTIMEZONE,'DD-MM-YYYY'),'DD-MM-YYYY'), 'ADJ', 536, 146, J.LOCATION_ID, 0, lngTransId, 0, 0, 0, 0, 0, 0, NULL, NULL, 0, 1, 1, NULL);

                    SELECT TRANS_ITEM_DTL.NEXTVAL INTO lngTransItemId FROM DUAL;
                    
                    IF J.WIP_ITEM_TYPE_ID = 19024 THEN
                        WipItemTypeId := 19001; 
                    ELSE
                        WipItemTypeId := J.WIP_ITEM_TYPE_ID;
                    END IF;
                    
                    IF RowStatus = 1 THEN
                        UPDATE T_TRANS_ITEM_DTL SET ROW_STATUS = -1 WHERE TRANS_ITEM_ID = J.ISSUE_TRANS_ITEM_ID;
                    END IF;                                            
                    
                    INSERT INTO T_TRANS_ITEM_DTL(TRANS_ITEM_ID, TRANS_ID, REF_TRANS_ITEM_ID, VARIANT_ID, QUANTITY, CONVERSION_FACTOR, STOCK_VALUE, LABOUR_VALUE, TRANS_REMARK, SRC_BATCH_ID, DEST_BATCH_ID, SRC_WC_ID, SRC_WCGROUP_ID, DEST_WC_ID, DEST_WCGROUP_ID, SRC_PARTY_ID, DEST_PARTY_ID, SRC_STOCK_ID, DEST_STOCK_ID, STOCK_STATUS_ID, WIP_ITEM_TYPE_ID, STOCK_CODE, LINE_NO, SOR_TRANS_ID, SOR_TRANS_ITEM_ID, PDO_TRANS_ITEM_ID, CUSTOM_STOCK_ID, KARAT_COLOR, SETTLED_IND, ROW_STATUS, SELLING_PRICE, ORG_BATCH_QTY, ORG_LABOUR_RATE)
                    VALUES(lngTransItemId, lngTransId, 0, J.VARIANT_ID, dblPcs, dblWt / dblPcs, 0 , 0, NULL, 0, 0, J.WC_ID, J.WCGROUP_ID, 0 , 0, 0, 0, J.STOCK_ID, 0, 1401, WipItemTypeId, J.STOCK_CODE, NULL, 0, 0, 0, 0, NULL, 0, 1, 0, 0, 0);                    

                    INSERT INTO T_TRANS_ITEM_DTL_EXTD(TRANS_ITEM_ID, REF_QUANTITY, ACTUAL_QUANTITY, ACTUAL_CONVERSION_FACTOR, PROCEDURE_ID, TRANS_RATE, TRANS_AMOUNT, QC_ID, REF_TRANS_ITEM_BOM_ID, STAMP_VARIANT_ID, ROUTING_ID, TRAY_NO, SET_VARIANT_ID, PTRANS_ITEM_ID, FIXED_PRICE_IND, RATE_AS_PER_FORMULA, INWARD_TRANS_ITEM_ID, OWNER_PARTY_ID, RESERVE_PARTY_ID, SCHEME_ID, ADD_NUM1, ADD_NUM2, ADD_NUM3, OLD_PK_ID, STOCK_GROUPING_ID, REPORT_SR_NO, STAMP_REMARK)
                    VALUES(lngTransItemId, 0, 0, 0, 0, dblRate, dblRate * dblPcs, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, J.TAG_LOCATION_ID, RowStatus, WastagePer, 0, 0, 0, LastTagNo);
                    
                    INSERT INTO T_TRANS_ITEM_OPERATION_DTL(TRANS_ITEM_OPERATION_ID, TRANS_ITEM_ID, VARIANT_ID, OPERATION_ID, OPERATION_TYPE_ID, LABOUR_CALC_METHOD_ID, LABOUR_DEPD_METHOD_ID, LABOUR_CALC_METHOD_VAL_ID, LABOUR_DEPD_METHOD_VAL_ID, LABOUR_CALC_TRANS_ITEM_BOM_ID, LABOUR_DEPD_TRANS_ITEM_BOM_ID, LABOUR_CALC_QUANTITY, LABOUR_DEPD_QUANTITY, PROCEDURE_ID, LABOUR_RATE, LABOUR_VALUE, RATE_AS_PER_FORMULA, LABOUR_CALC_CF, OLD_PK_ID, WC_ID)
                    SELECT TRANS_ITEM_OPERATION_DTL.NEXTVAL, lngTransItemId, VARIANT_ID, OPERATION_ID, OPERATION_TYPE_ID, LABOUR_CALC_METHOD_ID, LABOUR_DEPD_METHOD_ID, LABOUR_CALC_METHOD_VAL_ID, LABOUR_DEPD_METHOD_VAL_ID, LABOUR_CALC_TRANS_ITEM_BOM_ID, LABOUR_DEPD_TRANS_ITEM_BOM_ID, LABOUR_CALC_QUANTITY, LABOUR_DEPD_QUANTITY, PROCEDURE_ID, LABOUR_RATE, LABOUR_VALUE, RATE_AS_PER_FORMULA, LABOUR_CALC_CF, OLD_PK_ID, WC_ID
                    FROM T_TRANS_ITEM_OPERATION_DTL WHERE TRANS_ITEM_ID = J.ISSUE_TRANS_ITEM_ID AND LABOUR_CALC_TRANS_ITEM_BOM_ID <= (LABOUR_CALC_TRANS_ITEM_BOM_ID * 0);  

                END LOOP;                
            END LOOP;
        END IF;
        
--        DBMS_LOB.freetemporary (l_clob);
        DBMS_XMLDOM.freeDocument(xml_doc);
        
        l_bfile := BFILENAME(strDirName, iFilePointer||'_BOM.xml');
        IF dbms_lob.FILEEXISTS(l_bfile) = 1 THEN

            xml_doc := DBMS_XMLDOM.NewDOMDocument(xmltype( l_bfile , nls_charset_id('AL32UTF8')));
            xml_nl  := DBMS_XMLDOM.GetElementsByTagName(xml_doc, 'clsBOMConfig');        
            FOR i IN 0..(DBMS_XMLDOM.getLength(xml_nl) - 1) LOOP

                xml_node := DBMS_XMLDOM.Item(xml_nl, i);
                
                
                DBMS_XSLPROCESSOR.valueOf(xml_node, 'SrcStockBomId', lngStockBomId);
                DBMS_XSLPROCESSOR.valueOf(xml_node, 'Quantity1', dblPcs);
                DBMS_XSLPROCESSOR.valueOf(xml_node, 'Quantity2', dblWt);
                DBMS_XSLPROCESSOR.valueOf(xml_node, 'Rate', dblRate);
                DBMS_XSLPROCESSOR.valueOf(xml_node, 'Amount', dblAmount);
                DBMS_XSLPROCESSOR.valueOf(xml_node, 'StockUom', strUOM);
                DBMS_XSLPROCESSOR.valueOf(xml_node, 'CalcMethodId', lngCalcMethodId);                
                
                
                FOR J IN(SELECT * FROM T_STOCK_BOM_DTL WHERE STOCK_BOM_ID = lngStockBomId)
                LOOP

                    SELECT TRANS_ITEM_BOM_DTL.NEXTVAL INTO lngTransItemBomId FROM DUAL;
                    
                    IF strUOM = 'WT' THEN                     
                        INSERT INTO T_TRANS_ITEM_BOM_DTL(TRANS_ITEM_BOM_ID, TRANS_ITEM_ID, MAIN_VARIANT_ID, PARENT_VARIANT_ID, BOM_VARIANT_ID, ACTUAL_VARIANT_ID, STOCK_STATUS_ID, SRC_STOCK_BOM_ID, DEST_STOCK_BOM_ID, SOR_TRANS_ITEM_BOM_ID, BOM_LEVEL, QUANTITY, CONVERSION_FACTOR, STOCK_VALUE, BOM_SET_NO, PARENT_SET_NO, ROW_NO, SPECIAL_CHARACTER)
                        VALUES(lngTransItemBomId, lngTransItemId, J.MAIN_VARIANT_ID, J.PARENT_VARIANT_ID, J.BOM_VARIANT_ID, J.ACTUAL_VARIANT_ID, J.STOCK_STATUS_ID, J.STOCK_BOM_ID, 0, 0, J.BOM_LEVEL, dblWt, dblPcs/dblWt, 0, J.BOM_SET_NO, J.PARENT_SET_NO, J.ROW_NO, J.SPECIAL_CHARACTER);
                    ELSE
                        INSERT INTO T_TRANS_ITEM_BOM_DTL(TRANS_ITEM_BOM_ID, TRANS_ITEM_ID, MAIN_VARIANT_ID, PARENT_VARIANT_ID, BOM_VARIANT_ID, ACTUAL_VARIANT_ID, STOCK_STATUS_ID, SRC_STOCK_BOM_ID, DEST_STOCK_BOM_ID, SOR_TRANS_ITEM_BOM_ID, BOM_LEVEL, QUANTITY, CONVERSION_FACTOR, STOCK_VALUE, BOM_SET_NO, PARENT_SET_NO, ROW_NO, SPECIAL_CHARACTER)
                        VALUES(lngTransItemBomId, lngTransItemId, J.MAIN_VARIANT_ID, J.PARENT_VARIANT_ID, J.BOM_VARIANT_ID, J.ACTUAL_VARIANT_ID, J.STOCK_STATUS_ID, J.STOCK_BOM_ID, 0, 0, J.BOM_LEVEL, dblPcs, dblWt/dblPcs, 0, J.BOM_SET_NO, J.PARENT_SET_NO, J.ROW_NO, J.SPECIAL_CHARACTER);
                    END IF;                                            

                    INSERT INTO T_TRANS_ITEM_BOM_DTL_EXTD(TRANS_ITEM_BOM_ID, PTRANS_ITEM_BOM_ID, PROCEDURE_ID, TRANS_BOM_RATE, TRANS_BOM_AMOUNT, TRANS_BOM_LABOUR_VALUE, FETCH_QUANTITY_OPTION, FETCH_RATE_OPTION, TOLERANCE_UP_PERC, TOLERANCE_DOWN_PERC, ACTUAL_QUANTITY, ACTUAL_CONVERSION_FACTOR, CUSTOM_STOCK_ID, OWNER_PARTY_ID, RATE_AS_PER_FORMULA, INWARD_TRANS_ITEM_ID, INWARD_TRANS_ITEM_BOM_ID, OLD_PK_ID, STD_SELLING_RATE, STD_BUYING_RATE, CALC_METHOD_ID)
                    VALUES(lngTransItemBomId, 0, 0, dblRate, dblAmount, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, lngCalcMethodId);
                END LOOP;
            END LOOP;
        END IF;        

--        DBMS_LOB.freetemporary (l_clob);
        DBMS_XMLDOM.freeDocument(xml_doc);
        
        P_SAVE_LOT_MAKING(lngTransId,NULL,vStockCode);    
            
    END IF;        
    
EXCEPTION
    WHEN OTHERS THEN
        PKG_ERR.ErrorMsg := SQLERRM||CHR(13)||DBMS_UTILITY.FORMAT_ERROR_BACKTRACE;
        PKG_ERR.RAISE(-20100);
END;
/

CREATE TABLE T_DAILY_TRANS_ALL
(
  TRANS_ID                NUMBER(10)            DEFAULT (0),
  LOCATION_ID             NUMBER(10)            DEFAULT (0),
  REF_LOCATION_ID         NUMBER(10)            DEFAULT (0),
  TRANS_TYPE              VARCHAR2(10 BYTE),
  TRANS_SUBTYPE_ID        NUMBER(10)            DEFAULT (0),
  TRANS_CATEGORY_LINK_ID  NUMBER(10)            DEFAULT (0),
  TRANS_ITEM_ID           NUMBER(10)            DEFAULT (0),
  SUBTYPE                 VARCHAR2(1000 BYTE),
  TRANS_CATEGORY          VARCHAR2(1000 BYTE),
  SHIPMENT_DATE           DATE,
  SHIPMENT_ADDRESS_ID     NUMBER(10),
  BILL_ADDRESS_ID         NUMBER(10),
  TERMS_ID                NUMBER(10),
  TRANS_CURR_RATE_ID      NUMBER(10),
  TRANS_EXCH_RATE         NUMBER(20,7),
  BILL_NO                 VARCHAR2(750 BYTE),
  CREATED_BY              NUMBER(10),
  ENTRY_DATE              DATE,
  VERIFIED_IND            NUMBER(1),
  DOC_NO                  VARCHAR2(50 BYTE),
  TRANS_DATE              DATE,
  REF_DOC_NO              VARCHAR2(50 BYTE),
  REF_DOC_DATE            DATE,
  INWARD_DOC_NO           VARCHAR2(50 BYTE),
  INWARD_DOC_DATE         DATE,
  SOR_DOC_NO              VARCHAR2(50 BYTE),
  SOR_DOC_DATE            DATE,
  PARTY_ID                NUMBER(10)            DEFAULT (0),
  OPERATION_ID            NUMBER(10)            DEFAULT (0),
  REF_TRANS_ITEM_ID       NUMBER(10)            DEFAULT (0),
  REF_TRANS_ID            NUMBER(10)            DEFAULT (0),
  INWARD_TRANS_ITEM_ID    NUMBER(10)            DEFAULT (0),
  INWARD_TRANS_ID         NUMBER(10)            DEFAULT (0),
  VARIANT_ID              NUMBER(10)            DEFAULT (0),
  SRC_BATCH_ID            NUMBER(10)            DEFAULT (0),
  DEST_BATCH_ID           NUMBER(10)            DEFAULT (0),
  SRC_WC_ID               NUMBER(10)            DEFAULT (0),
  SRC_WCGROUP_ID          NUMBER(10)            DEFAULT (0),
  DEST_WC_ID              NUMBER(10)            DEFAULT (0),
  DEST_WCGROUP_ID         NUMBER(10)            DEFAULT (0),
  SRC_PARTY_ID            NUMBER(10)            DEFAULT (0),
  DEST_PARTY_ID           NUMBER(10)            DEFAULT (0),
  SRC_STOCK_ID            NUMBER(10)            DEFAULT (0),
  DEST_STOCK_ID           NUMBER(10)            DEFAULT (0),
  STOCK_STATUS_ID         NUMBER(10)            DEFAULT (0),
  WIP_ITEM_TYPE_ID        NUMBER(10)            DEFAULT (0),
  STOCK_CODE              VARCHAR2(150 BYTE),
  LINE_NO                 VARCHAR2(150 BYTE),
  SOR_TRANS_ID            NUMBER(10)            DEFAULT (0),
  SOR_TRANS_ITEM_ID       NUMBER(10)            DEFAULT (0),
  SOR_VARIANT_ID          NUMBER(10)            DEFAULT (0),
  CUSTOM_STOCK_ID         NUMBER(10)            DEFAULT (0),
  KARAT_COLOR             VARCHAR2(150 BYTE),
  SETTLED_IND             NUMBER(2)             DEFAULT (0),
  ROW_STATUS              NUMBER(2)             DEFAULT (0),
  QUANTITY                NUMBER(20,7)          DEFAULT (0),
  CONVERSION_FACTOR       NUMBER(20,7)          DEFAULT (0),
  PIECES                  NUMBER(10)            DEFAULT (0),
  WEIGHT                  NUMBER(23,7),
  TRANS_RATE              NUMBER(23,7),
  TRANS_AMOUNT            NUMBER(23,7),
  STOCK_VALUE             NUMBER(23,7),
  LABOUR_VALUE            NUMBER(23,7),
  ORG_LABOOUR_RATE        NUMBER(23,7),
  TRANS_REMARK            VARCHAR2(1500 BYTE),
  HEADER_REMARKS          VARCHAR2(500 BYTE),
  RETURN_ITEM_STATUS      VARCHAR2(25 BYTE),
  IMAGE_FILE_NAME         VARCHAR2(500 BYTE),
  ADD_NUM3                NUMBER(20,7),
  ROW_IDENTITY_ID         NUMBER(10),
  STAMP_VARIANT_ID        NUMBER(10),
  STAMP_REMARK            VARCHAR2(4000 BYTE),
  ROUTING_ID              NUMBER(10),
  CUSTOMER_VARIANT_NAME   VARCHAR2(1000 BYTE),
  UPC_NO                  VARCHAR2(100 BYTE),
  BATCH_NO                VARCHAR2(100 BYTE),
  GC_NO                   VARCHAR2(100 BYTE),
  PRODUCTION_REMARK       VARCHAR2(1200 BYTE),
  CUSTOMER_REMARK         VARCHAR2(1200 BYTE),
  PRICING_REMARK          VARCHAR2(1200 BYTE),
  SPECIAL_REMARK          VARCHAR2(1200 BYTE),
  TRAY_NO                 NUMBER(10),
  PTRANS_ITEM_ID          NUMBER(10),
  MISC_REMARK_1           VARCHAR2(4000 BYTE),
  MISC_REMARK_2           VARCHAR2(500 BYTE),
  SALES_PERSON_ID         NUMBER(10)            DEFAULT (0),
  CERTIFICATE_NO          VARCHAR2(75 BYTE),
  SALES_PERSON_ID1        NUMBER(10)            DEFAULT (0),
  PIECES_1003             NUMBER(20,7)          DEFAULT (0),
  WEIGHT_1003             NUMBER(20,7)          DEFAULT (0),
  PG_WEIGHT_1003          NUMBER(20,7)          DEFAULT (0),
  VALUE_1003              NUMBER(20,7)          DEFAULT (0),
  AMOUNT_1003             NUMBER(20,7)          DEFAULT (0),
  WEIGHT_1004             NUMBER(20,7)          DEFAULT (0),
  PG_WEIGHT_1004          NUMBER(20,7)          DEFAULT (0),
  VALUE_1004              NUMBER(20,7)          DEFAULT (0),
  AMOUNT_1004             NUMBER(20,7)          DEFAULT (0),
  PIECES_1005             NUMBER(20,7)          DEFAULT (0),
  WEIGHT_1005             NUMBER(20,7)          DEFAULT (0),
  VALUE_1005              NUMBER(20,7)          DEFAULT (0),
  AMOUNT_1005             NUMBER(20,7)          DEFAULT (0),
  WEIGHT_1501             NUMBER(20,7)          DEFAULT (0),
  PG_WEIGHT_1501          NUMBER(20,7)          DEFAULT (0),
  VALUE_1501              NUMBER(20,7)          DEFAULT (0),
  AMOUNT_1501             NUMBER(20,7)          DEFAULT (0),
  WEIGHT_1502             NUMBER(20,7)          DEFAULT (0),
  PG_WEIGHT_1502          NUMBER(20,7)          DEFAULT (0),
  VALUE_1502              NUMBER(20,7)          DEFAULT (0),
  AMOUNT_1502             NUMBER(20,7)          DEFAULT (0),
  WEIGHT_1503             NUMBER(20,7)          DEFAULT (0),
  PG_WEIGHT_1503          NUMBER(20,7)          DEFAULT (0),
  VALUE_1503              NUMBER(20,7)          DEFAULT (0),
  AMOUNT_1503             NUMBER(20,7)          DEFAULT (0),
  PIECES_1504             NUMBER(20,7)          DEFAULT (0),
  WEIGHT_1504             NUMBER(20,7)          DEFAULT (0),
  VALUE_1504              NUMBER(20,7)          DEFAULT (0),
  AMOUNT_1504             NUMBER(20,7)          DEFAULT (0),
  PIECES_1539             NUMBER(20,7)          DEFAULT (0),
  WEIGHT_1539             NUMBER(20,7)          DEFAULT (0),
  VALUE_1539              NUMBER(20,7)          DEFAULT (0),
  AMOUNT_1539             NUMBER(20,7)          DEFAULT (0),
  PIECES_1510             NUMBER(20,7)          DEFAULT (0),
  WEIGHT_1510             NUMBER(20,7)          DEFAULT (0),
  VALUE_1510              NUMBER(20,7)          DEFAULT (0),
  AMOUNT_1510             NUMBER(20,7)          DEFAULT (0),
  PIECES_1511             NUMBER(20,7)          DEFAULT (0),
  WEIGHT_1511             NUMBER(20,7)          DEFAULT (0),
  VALUE_1511              NUMBER(20,7)          DEFAULT (0),
  AMOUNT_1511             NUMBER(20,7)          DEFAULT (0),
  PIECES_1866             NUMBER(20,7)          DEFAULT (0),
  WEIGHT_1866             NUMBER(20,7)          DEFAULT (0),
  PG_WEIGHT_1866          NUMBER(20,7)          DEFAULT (0),
  VALUE_1866              NUMBER(20,7)          DEFAULT (0),
  AMOUNT_1866             NUMBER(20,7)          DEFAULT (0),
  PIECES_4538             NUMBER(20,7)          DEFAULT (0),
  WEIGHT_4538             NUMBER(20,7)          DEFAULT (0),
  VALUE_4538              NUMBER(20,7)          DEFAULT (0),
  AMOUNT_4538             NUMBER(20,7)          DEFAULT (0),
  PIECES_4531             NUMBER(20,7)          DEFAULT (0),
  WEIGHT_4531             NUMBER(20,7)          DEFAULT (0),
  VALUE_4531              NUMBER(20,7)          DEFAULT (0),
  AMOUNT_4531             NUMBER(20,7)          DEFAULT (0),
  PCS_1003_1501           NUMBER(20,7)          DEFAULT (0),
  WT_1003_1501            NUMBER(20,7)          DEFAULT (0),
  PG_1003_1501            NUMBER(20,7)          DEFAULT (0),
  AMT_1003_1501           NUMBER(20,7)          DEFAULT (0),
  VAL_1003_1501           NUMBER(20,7)          DEFAULT (0),
  PCS_1003_1502           NUMBER(20,7)          DEFAULT (0),
  WT_1003_1502            NUMBER(20,7)          DEFAULT (0),
  PG_1003_1502            NUMBER(20,7)          DEFAULT (0),
  AMT_1003_1502           NUMBER(20,7)          DEFAULT (0),
  VAL_1003_1502           NUMBER(20,7)          DEFAULT (0),
  PCS_1003_1503           NUMBER(20,7)          DEFAULT (0),
  WT_1003_1503            NUMBER(20,7)          DEFAULT (0),
  PG_1003_1503            NUMBER(20,7)          DEFAULT (0),
  AMT_1003_1503           NUMBER(20,7)          DEFAULT (0),
  VAL_1003_1503           NUMBER(20,7)          DEFAULT (0),
  PIECES_4569             NUMBER(20,7)          DEFAULT (0),
  WEIGHT_4569             NUMBER(20,7)          DEFAULT (0),
  VALUE_4569              NUMBER(20,7)          DEFAULT (0),
  AMOUNT_4569             NUMBER(20,7)          DEFAULT (0),
  OWNER_PIECES_1504       NUMBER(20,7)          DEFAULT (0),
  OWNER_WEIGHT_1504       NUMBER(20,7)          DEFAULT (0),
  OWNER_VALUE_1504        NUMBER(20,7)          DEFAULT (0),
  OWNER_AMOUNT_1504       NUMBER(20,7)          DEFAULT (0),
  OWNER_PIECES_1005       NUMBER(20,7)          DEFAULT (0),
  OWNER_WEIGHT_1005       NUMBER(20,7)          DEFAULT (0),
  OWNER_VALUE_1005        NUMBER(20,7)          DEFAULT (0),
  OWNER_AMOUNT_1005       NUMBER(20,7)          DEFAULT (0)
)
TABLESPACE SEA_TB_MISC
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE
MONITORING;


CREATE INDEX PK_DAILY_TRANS_ALL ON T_DAILY_TRANS_ALL
(TRANS_ITEM_ID)
LOGGING
TABLESPACE LIVE_INDEX_2
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );

CREATE OR REPLACE TRIGGER DAILY_TRANS_ALL_BEF  
BEFORE INSERT OR UPDATE ON T_DAILY_TRANS_ALL FOR EACH ROW
BEGIN

    FOR X IN (SELECT NVL(SUM(LABOUR_VALUE),0) AS AMOUNT FROM T_TRANS_ITEM_OPERATION_DTL WHERE TRANS_ITEM_ID = :NEW.TRANS_ITEM_ID)
    LOOP
        :NEW.LABOUR_VALUE := X.AMOUNT;
    END LOOP;
    
    BEGIN
        SELECT  
            NVL(SUM(ROUND(DECODE(IV.ITEM_GROUP_ID,1504,TIBD.QUANTITY * TIBD.CONVERSION_FACTOR,0))),0) AS DIA_PCS,
            NVL(SUM(ROUND(DECODE(IV.ITEM_GROUP_ID,1504,TIBD.QUANTITY,0),3)),0) AS DIA_WT,
            NVL(SUM(ROUND(DECODE(IV.ITEM_GROUP_ID,1504,0,TIBD.QUANTITY * TIBD.CONVERSION_FACTOR))),0) AS CLS_PCS,
            NVL(SUM(ROUND(DECODE(IV.ITEM_GROUP_ID,1504,0,TIBD.QUANTITY),3)),0) AS CLS_WT
        INTO :NEW.OWNER_PIECES_1504,:NEW.OWNER_WEIGHT_1504,:NEW.OWNER_PIECES_1005,:NEW.OWNER_WEIGHT_1005            
        FROM 
            T_STOCK_BOM_TRANS_LINK SBTL,T_TRANS_ITEM_BOM_DTL TIBD,V_ITEM_VARIANT_RTN_DTL IV
        WHERE 
            TIBD.DEST_STOCK_BOM_ID = SBTL.STOCK_BOM_ID
            AND TIBD.BOM_VARIANT_ID = IV.VARIANT_ID
            AND SBTL.OWNER_PARTY_ID > 0
            AND IV.ITEM_TYPE_ID = 1005
            AND TIBD.TRANS_ITEM_ID =  :NEW.TRANS_ITEM_ID 
        GROUP BY TIBD.TRANS_ITEM_ID;     
    
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            NULL;
    END;

EXCEPTION
    WHEN OTHERS THEN
        RAISE_APPLICATION_ERROR (-20999, SUBSTR(SQLERRM,1,500)||DBMS_UTILITY.FORMAT_ERROR_BACKTRACE);
END;
/


CREATE OR REPLACE TRIGGER DAILY_TRANS_ALL_ROW  
AFTER INSERT OR UPDATE OR DELETE ON T_DAILY_TRANS_ALL FOR EACH ROW
DECLARE

    vSQL VARCHAR2(32000) := NULL;

BEGIN

    IF DELETING THEN
        --raise_application_error (-20100,'xxx');
        DELETE FROM T_DAILY_TRANS_ALL_FORMULA WHERE TRANS_ITEM_ID = :NEW.TRANS_ITEM_ID;  
        
        RETURN;   
    ELSIF INSERTING THEN
        --raise_application_error (-20100,'xxx');
        
        IF :NEW.TRANS_RATE + :NEW.TRANS_AMOUNT = 0 THEN
            RETURN;
        END IF; 

        BEGIN
            INSERT INTO T_DAILY_TRANS_ALL_FORMULA(TRANS_ITEM_ID)
            VALUES(:NEW.TRANS_ITEM_ID);
        EXCEPTION
            WHEN OTHERS THEN
                IF INSTR(SQLERRM,'PK_DAILY_TRANS_ALL_FORMULA') >0 THEN
                    NULL;
                END IF;                                            
        END;            
    END IF;

    FOR KK IN(
        SELECT RT.CONFIG_CODE AS ROW_TYPE_CODE,TIBFD.ROW_VALUE
        FROM 
            T_TRANS_ITEM_BOM_FORMULA_DTL TIBFD, T_TRANS_ITEM_BOM_DTL TIBD, 
            T_FORMULA_PROCEDURE_DTL FPD, T_CONFIG_FORMULA_FIXED_DATA RT
        WHERE 
        TIBFD.PROCEDURE_ID = FPD.PROCEDURE_ID
        AND TIBFD.ROW_NO = FPD.ROW_NO
        AND FPD.ROW_TYPE_ID = RT.CONFIG_ID
        AND TIBD.TRANS_ITEM_BOM_ID = TIBFD.TRANS_ITEM_BOM_ID
        AND TIBD.TRANS_ITEM_ID = :NEW.TRANS_ITEM_ID
        AND TIBFD.ROW_VALUE > 0
        AND RT.CONFIG_CODE IS NOT NULL
    )
    LOOP
        IF INSTR(vSQL,KK.ROW_TYPE_CODE,1,1) = 0 OR vSQL IS NULL THEN
            vSQL := vSQL||',"'||KK.ROW_TYPE_CODE||'" = '||KK.ROW_VALUE;
        END IF;            
    END LOOP;
 
    IF vSQL IS NOT NULL THEN
        EXECUTE IMMEDIATE 'UPDATE T_DAILY_TRANS_ALL_FORMULA SET '||SUBSTR(vSQL,2)||' WHERE TRANS_ITEM_ID = '||:NEW.TRANS_ITEM_ID;
    END IF;
    
    vSQL := NULL;

    FOR KK IN(
        SELECT FPD.ROW_DATA_TYPE_ID ,RT.CONFIG_CODE AS ROW_TYPE_CODE,TIFD.ROW_VALUE
        FROM T_TRANS_ITEM_FORMULA_DTL TIFD,T_FORMULA_PROCEDURE_DTL FPD, T_CONFIG_FORMULA_FIXED_DATA RT
        WHERE 
        TIFD.PROCEDURE_ID = FPD.PROCEDURE_ID
        AND TIFD.ROW_NO = FPD.ROW_NO
        AND FPD.ROW_TYPE_ID = RT.CONFIG_ID
        AND TIFD.ROW_VALUE > 0
        AND TIFD.TRANS_ITEM_ID = :NEW.TRANS_ITEM_ID
        AND (RT.CONFIG_CODE IS NOT NULL OR FPD.ROW_DATA_TYPE_ID = 231)
    )
    LOOP
        IF KK.ROW_DATA_TYPE_ID = 231 THEN
            EXECUTE IMMEDIATE 'UPDATE T_DAILY_TRANS_ALL_FORMULA SET FIRST_ROW = '||KK.ROW_VALUE||' WHERE TRANS_ITEM_ID = '||:NEW.TRANS_ITEM_ID;
        ELSE
            IF INSTR(vSQL,KK.ROW_TYPE_CODE,1,1) = 0 OR vSQL IS NULL THEN
                vSQL := vSQL||',"'||KK.ROW_TYPE_CODE||'" = '||KK.ROW_VALUE;
            END IF;                
        END IF;
    END LOOP;

    IF vSQL IS NOT NULL THEN
        EXECUTE IMMEDIATE 'UPDATE T_DAILY_TRANS_ALL_FORMULA SET '||SUBSTR(vSQL,2)||' WHERE TRANS_ITEM_ID = '||:NEW.TRANS_ITEM_ID;
    END IF;

EXCEPTION
    WHEN OTHERS THEN
        RAISE_APPLICATION_ERROR (-20999, SUBSTR(SQLERRM,1,500)||DBMS_UTILITY.FORMAT_ERROR_BACKTRACE);
END;
/


ALTER TABLE T_DAILY_TRANS_ALL ADD (
  CONSTRAINT PK_DTA
  PRIMARY KEY
  (TRANS_ITEM_ID)
  USING INDEX PK_DAILY_TRANS_ALL
  ENABLE VALIDATE);


CREATE TABLE T_DAILY_UPDATE_TRANS
(
  TRANS_ID    NUMBER(10),
  ROW_STATUS  NUMBER(1)
)
TABLESPACE SEA_TB_MISC
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE
MONITORING;


CREATE UNIQUE INDEX UNQ_DUT ON T_DAILY_UPDATE_TRANS
(TRANS_ID)
LOGGING
TABLESPACE SEA_TB_MISC
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );

ALTER TABLE T_DAILY_UPDATE_TRANS ADD (
  CONSTRAINT NN_DUT_1
  CHECK (TRANS_ID IS NOT NULL)
  ENABLE VALIDATE,
  CONSTRAINT UNQ_DUT
  UNIQUE (TRANS_ID)
  USING INDEX UNQ_DUT
  ENABLE VALIDATE);


CREATE OR REPLACE PROCEDURE "P_SEND_MAIL" (
   icalltype   VARCHAR2,                                                -- SOR 
   itransid    NUMBER,
   isessionid  PLS_INTEGER
)
AS
   TYPE ty_email_data IS TABLE OF t_mail_template%ROWTYPE;

   arrdata            string_table                         := string_table();
   obj_email_data     ty_email_data;
   iemailconfig       t_config_fixed_data.config_id%TYPE;
   ismsconfig         t_config_global.config_id%TYPE;
   ismsdefaultcontact t_config_global.config_remarks%TYPE;
   iclientid          t_config_fixed_data.config_id%TYPE;
   vcalltype          VARCHAR2 (500 BYTE)                  := NULL;
   vmailattachement   VARCHAR2 (32000 BYTE)                := NULL;
   vsmstemplate       VARCHAR2 (32000 BYTE)                := NULL;
   strstatus    varchar2(50 byte);
   idocno             VARCHAR2 (500 BYTE);
   EmailBody          CLOB                := NULL;
   strData   VARCHAR2 (32000 BYTE)                := NULL;
   strRowData   VARCHAR2 (32000 BYTE)                := NULL;
   strColData   VARCHAR2 (32000 BYTE)                := NULL;
   
BEGIN
   
   FOR x IN (SELECT config_id, config_value, config_remarks
               FROM t_config_global
              WHERE config_id IN (0,704,593))
   LOOP
      CASE
         WHEN x.config_id = 0 THEN
            iclientid := x.config_value;
         WHEN x.config_id = 704 THEN
            iemailconfig := x.config_value;
         WHEN x.config_id = 593 THEN
            ismsconfig := x.config_value;
            ismsdefaultContact := x.config_remarks;
      END CASE;
   END LOOP;

   IF iemailconfig > 0 THEN
      IF icalltype = 'SOR' THEN
         FOR n IN (
            SELECT 
                th.trans_id, th.trans_date, th.trans_type, th.trans_subtype_id, th.trans_category_link_id, th.doc_no, thx.bill_address_id, 
                ths.shipment_address_id 
            FROM t_trans_hdr th, t_trans_hdr_extd thx, t_trans_hdr_shipment ths
            WHERE th.trans_id = thx.trans_id and th.trans_id = ths.trans_id and th.trans_id = iTransId
         )
         LOOP 
            BEGIN
               SELECT *
               BULK COLLECT INTO obj_email_data
                 FROM (SELECT   *
                           FROM t_mail_template
                          WHERE trans_type = n.trans_type
                            AND trans_subtype_id IN (0, n.trans_subtype_id)
                            AND trans_category_link_id IN (0, n.trans_category_link_id)
                       ORDER BY trans_category_link_id DESC, trans_subtype_id DESC)
                WHERE ROWNUM = 1;
            EXCEPTION
               WHEN NO_DATA_FOUND THEN
                  NULL;
            END;
            
            IF obj_email_data.COUNT > 0 THEN
                EmailBody :=  obj_email_data (1).email_body;
               BEGIN
                  SELECT email_id
                    INTO obj_email_data (1).to_email
                    FROM t_misc_address_master
                   WHERE address_id = n.bill_address_id;
               EXCEPTION
                  WHEN NO_DATA_FOUND THEN
                     obj_email_data (1).to_email := NULL;
               END;

               IF obj_email_data (1).to_email IS NOT NULL THEN 
                  EmailBody := REPLACE (EmailBody, '{DOC_NO}', n.doc_no);
               END IF;
            END IF;

         END LOOP;

      ELSIF icalltype = 'POC' THEN
         FOR n IN (SELECT th.trans_id, th.trans_type,
                          th.trans_category_link_id, th.trans_subtype_id,
                          th.doc_no, th.trans_date, oth.doc_no AS order_no,
                          th.last_modified_session AS session_id
                     FROM t_trans_hdr th, t_trans_hdr oth
                    WHERE th.ref_trans_id = oth.trans_id
                      AND th.trans_id = itransid)
         LOOP
            BEGIN
               SELECT *
               BULK COLLECT INTO obj_email_data
                 FROM (SELECT   *
                           FROM t_mail_template
                          WHERE trans_type = icalltype
                            AND trans_subtype_id IN (0, n.trans_subtype_id)
                            AND trans_category_link_id IN (0, n.trans_category_link_id)
                       ORDER BY trans_category_link_id DESC, trans_subtype_id DESC)
                WHERE ROWNUM = 1;
            EXCEPTION
               WHEN NO_DATA_FOUND THEN
                  NULL;
            END;

            IF obj_email_data.COUNT > 0 THEN
                EmailBody :=  obj_email_data (1).email_body;
               IF obj_email_data (1).to_email IS NOT NULL THEN
                  EmailBody := REPLACE (EmailBody, '{DOC_NO}', n.doc_no );
                  EmailBody := REPLACE (EmailBody, '{ORDER_NO}',n.order_no);
                  /*
                  p_mail_service
                                (iclientid           => iclientid,
                                 vtoaddress          => obj_email_data (1).to_email,
                                 vccaddress          => obj_email_data (1).to_ccemail,
                                 vbccaddress         => obj_email_data (1).to_bccemail,
                                 vsubject            => obj_email_data (1).email_subject,
                                 vbody               => EmailBody,
                                 vattachmenturl      => vmailattachement
                                );
                   */
               END IF;
            END IF;
         END LOOP;
         
      ELSIF icalltype = 'PRO-VENDOR' THEN
         FOR n IN (SELECT th.trans_id, th.trans_type, th.trans_category_link_id, th.trans_subtype_id, th.doc_no, th.trans_date, oth.doc_no AS order_no,
                          pm.party_name AS vendor_name, th.last_modified_session AS session_id,pm.party_id as vendor_id
                     FROM t_trans_hdr th, t_trans_hdr_extd thx, t_trans_hdr oth, t_party_master pm
                    WHERE th.trans_id = thx.trans_id and th.ref_trans_id = oth.trans_id AND thx.party_id = pm.party_id AND th.trans_id = itransid)
         LOOP
            BEGIN
               SELECT *
               BULK COLLECT INTO obj_email_data
                 FROM (SELECT   *
                           FROM t_mail_template
                          WHERE trans_type = icalltype
                            AND trans_subtype_id IN (0, n.trans_subtype_id)
                            AND trans_category_link_id IN (0, n.trans_category_link_id)
                       ORDER BY trans_category_link_id DESC, trans_subtype_id DESC)
                WHERE ROWNUM = 1;
            EXCEPTION
               WHEN NO_DATA_FOUND THEN
                  NULL;
            END; 

            IF obj_email_data.COUNT > 0 THEN  
               BEGIN
                  SELECT email_id
                    INTO obj_email_data (1).to_email
                    FROM t_misc_address_master
                   WHERE address_type_Id = 8002 and email_id is not null and party_id = n.vendor_id;
               EXCEPTION
                  WHEN NO_DATA_FOUND THEN
                     obj_email_data (1).to_email := NULL;
               END; 
               
                IF obj_email_data (1).to_email IS NOT NULL THEN
                    EmailBody :=  obj_email_data (1).email_body;
                  EmailBody := REPLACE (EmailBody, '{DOC_NO}', n.doc_no );
                  EmailBody := REPLACE (EmailBody, '{ORDER_NO}',n.order_no);
                  EmailBody := REPLACE (EmailBody, '{VENDOR_NAME}', n.vendor_name );
                /*  
                  p_mail_service
                                (iclientid           => iclientid,
                                 vtoaddress          => obj_email_data (1).to_email,
                                 vccaddress          => obj_email_data (1).to_ccemail,
                                 vbccaddress         => obj_email_data (1).to_bccemail,
                                 vsubject            => obj_email_data (1).email_subject,
                                 vbody               => EmailBody,
                                 vattachmenturl      => vmailattachement
                                );
                */
               END IF;
            END IF;
         END LOOP;
         
    ELSIF icalltype IN ('PRO', 'GRN', 'PRO-ACC','GRN-ACC') THEN 
         --FOR VERIFICATION LINK 'http://app.synergicssolutions.com/MUTHOOT/Verification/SESSION_ID/QUERY_SETTING_ID/TRANS_ID
         /*
            SELECT th.trans_id, th.trans_type, th.trans_category_link_id, th.trans_subtype_id, th.doc_no, th.trans_date, oth.doc_no AS order_no,
                  pm.party_name AS vendor_name, th.last_modified_session AS session_id,pm.party_id as vendor_id
             FROM t_trans_hdr th,t_trans_hdr_extd thx, t_trans_hdr oth, t_party_master pm
            WHERE th.trans_id = thx.trans_id and th.ref_trans_id = oth.trans_id AND thx.party_id = pm.party_id AND th.trans_id = itransid)*/ 
        IF iclientid = 135 THEN
            FOR X IN (
                SELECT TH.TRANS_SUBTYPE_ID,TH.TRANS_CATEGORY_LINK_ID,VEND.PARTY_NAME AS VENDOR_NAME,CUST.PARTY_NAME AS CUSTOMER_NAME,TH.DOC_NO,TH.TRANS_DATE,MAX(OTH.DOC_NO) AS ORDER_NO,
                ROUND(MAX(CASE WHEN FPD.ROW_TYPE_ID = 1474 THEN TFD.ROW_VALUE ELSE 0 END),2) AS ADVANCE_AMOUNT,ROUND(MAX(CASE WHEN FPD.ROW_TYPE_ID = 1476 THEN TFD.ROW_VALUE ELSE 0 END),2) AS BALANCE_AMOUNT
                FROM V_TRANS_HDR OTH,T_TRANS_FORMULA_DTL TFD,V_FORMULA_PROCEDURE_DTL FPD,T_PARTY_MASTER CUST,T_PARTY_MASTER VEND,V_TRANS_HDR TH
                WHERE TH.TRANS_ID = TFD.TRANS_ID
                AND TFD.PROCEDURE_ID = FPD.PROCEDURE_ID
                AND TH.REF_TRANS_ID = OTH.TRANS_ID
                AND OTH.PARTY_ID = CUST.PARTY_ID
                AND TFD.ROW_NO = FPD.ROW_NO
                AND TH.PARTY_ID = VEND.PARTY_ID
                AND TH.TRANS_ID = itransid
                GROUP BY TH.TRANS_SUBTYPE_ID,TH.TRANS_CATEGORY_LINK_ID,VEND.PARTY_NAME,TH.DOC_NO,TH.TRANS_DATE,CUST.PARTY_NAME
            )
            LOOP
                SELECT *
                BULK COLLECT INTO obj_email_data
                FROM (
                    SELECT *
                    FROM T_MAIL_TEMPLATE
                    WHERE TRANS_TYPE = icalltype
                    AND TRANS_SUBTYPE_ID IN (0, X.TRANS_SUBTYPE_ID)
                    AND TRANS_CATEGORY_LINK_ID IN (0, X.TRANS_CATEGORY_LINK_ID)
                    ORDER BY TRANS_CATEGORY_LINK_ID DESC, TRANS_SUBTYPE_ID DESC
                )
                WHERE ROWNUM = 1;

                IF obj_email_data.COUNT > 0 THEN
                    IF obj_email_data (1).to_email IS NOT NULL THEN
                        EmailBody :=  obj_email_data (1).email_body;
                        EmailBody := '<![CDATA[<html><head><style>table, th, td {  border: 1px solid black;  border-collapse: collapse; padding: 3px;}</style></head><body>'||EmailBody;
                        EmailBody := REPLACE (EmailBody, '{BALANCE_AMOUNT}',X.BALANCE_AMOUNT);
                        EmailBody := REPLACE (EmailBody, '{ADVANCE_AMOUNT}',X.ADVANCE_AMOUNT);
                        EmailBody := REPLACE (EmailBody, '{VENDOR_NAME}', X.VENDOR_NAME);
                        EmailBody := REPLACE (EmailBody, '{TRANS_DATE}', X.TRANS_DATE);
                        EmailBody := REPLACE (EmailBody, '{CUSTOMER_NAME}', X.CUSTOMER_NAME);
                        EmailBody := REPLACE (EmailBody, '{ORDER_NO}', X.ORDER_NO);
                        EmailBody := REPLACE (EmailBody, '{DOC_NO}', X.DOC_NO);

                        obj_email_data (1).email_subject := REPLACE (obj_email_data (1).email_subject, '{VENDOR_NAME}', X.VENDOR_NAME);
                        obj_email_data (1).email_subject := REPLACE (obj_email_data (1).email_subject, '{ORDER_NO}', X.ORDER_NO);
                  
                        IF INSTR(EmailBody,'{MUTHOOT_GRID}') IS NOT NULL THEN
                            strData := '<table>';
                            strRowData := '<tr>
                                <th>Product</th>
                                <th>Purity</th>
                                <th>Product Wt</th>
                                <th>Product Rate</th>
                                <th>Pre GST Amount</th>
                                <th>CGST Amount</th>
                                <th>SGST Amount</th>
                                <th>IGST Amount</th>
                                <th>Advance</th>
                                <th>Balance</th>
                                ';
                            FOR Y IN (
                                WITH DATA AS (
                                    SELECT 
                                    TH.TRANS_ID,F_GET_ATTRIBUTE(IVD.ATTRIB_TYPE_AND_VALUE,'CATG') AS PRODUCT,
                                    F_GET_ATTRIBUTE(IVD.ATTRIB_TYPE_AND_VALUE,'KT') AS PURITY,TID.QUANTITY*TID.CONVERSION_FACTOR AS PRODUCT_WT,(STIB.AMOUNT_1004/STIB.WEIGHT_1004) AS PRODUCT_RATE,
                                    STIB.AMOUNT_1004 AS PRE_GST_AMOUNT,NULL AS CGST_AMOUNT,NULL AS SGST_AMOUNT,NULL AS IGST_AMOUNT,NULL AS ADVANCE_AMOUNT,NULL AS BALANCE_AMOUNT
                                    FROM T_PARTY_MASTER CUST,T_PARTY_MASTER VEND,V_TRANS_HDR TH,V_TRANS_ITEM_DTL TID,V_TRANS_HDR OTH,V_ITEM_VARIANT_RTN_DTL IVD,T_SMRY_TRANS_ITEM_BOM STIB
                                    WHERE TH.TRANS_ID = TID.TRANS_ID
                                    AND TID.SOR_TRANS_ID = OTH.TRANS_ID
                                    AND TH.PARTY_ID = VEND.PARTY_ID
                                    AND OTH.PARTY_ID = CUST.PARTY_ID
                                    AND TID.VARIANT_ID = IVD.VARIANT_ID
                                    AND TID.TRANS_ITEM_ID = STIB.TRANS_ITEM_ID
                                    AND TID.ROW_STATUS = 1
                                    AND TH.ROW_STATUS = 1
                                    AND TH.TRANS_ID = itransid
                                )
                                SELECT 
                                PRODUCT,PURITY,SUM(PRODUCT_WT) AS PRODUCT_WT,ROUND(SUM(PRE_GST_AMOUNT) / SUM(PRODUCT_WT),2) AS PRODUCT_RATE,ROUND(SUM(PRE_GST_AMOUNT),2) AS PRE_GST_AMOUNT,
                                NULL AS CGST_AMOUNT,NULL AS SGST_AMOUNT,NULL AS IGST_AMOUNT
                                FROM DATA
                                GROUP BY PRODUCT,PURITY
                                UNION ALL
                                SELECT 
                                NULL AS VARIANT_NAME,
                                'TOTAL' AS PURITY,SUM(DISTINCT DATA.PRODUCT_WT) AS PRODUCT_WT,NULL AS METAL_RATE,
                                ROUND(SUM(DISTINCT DATA.PRE_GST_AMOUNT),2) AS PRE_GST_AMOUNT,
                                ROUND(MAX(CASE WHEN FPD.ROW_TYPE_ID = 1397 THEN TFD.ROW_VALUE ELSE 0 END),2) AS CGST_AMOUNT,
                                ROUND(MAX(CASE WHEN FPD.ROW_TYPE_ID = 1398 THEN TFD.ROW_VALUE ELSE 0 END),2) AS SGST_AMOUNT,
                                ROUND(MAX(CASE WHEN FPD.ROW_TYPE_ID = 1400 THEN TFD.ROW_VALUE ELSE 0 END),2) AS IGST_AMOUNT
                                FROM T_TRANS_FORMULA_DTL TFD,V_FORMULA_PROCEDURE_DTL FPD,DATA
                                WHERE DATA.TRANS_ID = TFD.TRANS_ID
                                AND TFD.PROCEDURE_ID = FPD.PROCEDURE_ID
                                AND TFD.ROW_NO = FPD.ROW_NO
                                ORDER BY PRODUCT
                            )
                            LOOP
                                strRowData := strRowData||'<tr>';
                                strColData := strColData||'<td>'||Y.PRODUCT||'</td>';
                                strColData := strColData||'<td>'||Y.PURITY||'</td>';
                                strColData := strColData||'<td align="right">'||Y.PRODUCT_WT||'</td>';
                                strColData := strColData||'<td align="right">'||Y.PRODUCT_RATE||'</td>';
                                strColData := strColData||'<td align="right">'||Y.PRE_GST_AMOUNT||'</td>';
                                strColData := strColData||'<td align="right">'||Y.CGST_AMOUNT||'</td>';
                                strColData := strColData||'<td align="right">'||Y.SGST_AMOUNT||'</td>';
                                strColData := strColData||'<td align="right">'||Y.IGST_AMOUNT||'</td>';
                                strColData := strColData||'<td align="right">'||X.ADVANCE_AMOUNT||'</td>';
                                strColData := strColData||'<td align="right">'||X.BALANCE_AMOUNT||'</td>';
                                strRowData := strRowData||strColData||'</tr>';
                                strColData := NULL;
                            END LOOP;
                            strData := strData||strRowData||'</table>';
                            EmailBody := REPLACE (EmailBody, '{MUTHOOT_GRID}', strData);
                        END IF;
                    END IF;

                    IF obj_email_data (1).remarks IS NOT NULL THEN
                        arrdata := f_fill_string_table (iData => obj_email_data(1).remarks,iSeperator => '|');

                        IF arrdata.COUNT > 1 THEN 
                            EmailBody := EmailBody||arrdata(1) || isessionid ||'/'||arrdata(2)|| '/' ||itransid;
                        END IF;
                    END IF;

                    EmailBody := EmailBody||'</body></html>]]>';

                    IF ismsconfig > 0 THEN
                        BEGIN
                            SELECT sms_text 
                            INTO vsmstemplate
                            FROM (
                                SELECT sms_text
                                FROM t_sms_template
                                WHERE trans_type = icalltype
                                AND trans_subtype_id IN (0, X.TRANS_SUBTYPE_ID)
                                AND trans_category_link_id IN (0, X.TRANS_CATEGORY_LINK_ID)
                                ORDER BY trans_category_link_id DESC, trans_subtype_id DESC
                            )
                            WHERE ROWNUM = 1;
                        EXCEPTION
                            WHEN OTHERS THEN
                                vsmstemplate := NULL;
                        END;

                        IF vsmstemplate IS NOT NULL THEN                     
                            vsmstemplate := REPLACE(vsmstemplate,'{ORDER_NO}', X.ORDER_NO);
                            vsmstemplate := REPLACE(vsmstemplate,'{VENDOR_NAME}', X.VENDOR_NAME);
                            vsmstemplate := REPLACE(vsmstemplate,'{DOC_NO}', X.DOC_NO);
                            vsmstemplate := REPLACE(vsmstemplate,'{F_GET_DATE_DBTIMEZONE}', TO_CHAR(F_GET_DATE_DBTIMEZONE,'DD-MON-YYYY')); 
                            vsmstemplate := REPLACE(vsmstemplate,'{LINEFIT}',' \r\n ');
                            vsmstemplate := REGEXP_REPLACE(vsmstemplate,'<p>|</p>|&nbsp;','');                                    

                            IF arrdata.COUNT > 1 THEN 
                                vsmstemplate := vsmstemplate||' ' ||arrdata(1) || isessionid || '/' || arrdata (2) || '/' || itransid;
                            END IF;
                        END IF;
                    END IF;

                    IF vcalltype = 'PRO' THEN
                        vcalltype := 'PRO-VENDOR';
                        P_SEND_MAIL(vcalltype, itransid, isessionid);
                    END IF; 
                END IF;
            END LOOP;

        ELSE
            NULL;
        END IF;

    ELSE
         FOR n IN (SELECT th.trans_id, th.trans_type, th.trans_category_link_id, th.trans_subtype_id, th.doc_no, th.trans_date, oth.doc_no AS order_no,
                          pm.party_name AS vendor_name, th.last_modified_session AS session_id,pm.party_id as vendor_id
                     FROM v_trans_hdr th, t_trans_hdr oth, t_party_master pm
                    WHERE th.ref_trans_id = oth.trans_id AND th.party_id = pm.party_id AND th.trans_id = itransid)
         LOOP
            BEGIN
               SELECT *
               BULK COLLECT INTO obj_email_data
                 FROM (SELECT   *
                           FROM t_mail_template
                          WHERE trans_type = n.trans_type
                            AND trans_subtype_id IN (0, n.trans_subtype_id)
                            AND trans_category_link_id IN (0, n.trans_category_link_id)
                       ORDER BY trans_category_link_id DESC, trans_subtype_id DESC)
                WHERE ROWNUM = 1;
            EXCEPTION
               WHEN NO_DATA_FOUND THEN
                  NULL;
            END; 

            IF obj_email_data.COUNT > 0 THEN
               IF obj_email_data (1).to_email IS NOT NULL THEN
                    EmailBody :=  obj_email_data (1).email_body;
                  EmailBody := REPLACE (EmailBody, '{DOC_NO}', n.doc_no );
                  EmailBody := REPLACE (EmailBody, '{ORDER_NO}',n.order_no);
                  EmailBody := REPLACE (EmailBody, '{VENDOR_NAME}', n.vendor_name );
                  /*
                  p_mail_service
                                (iclientid           => iclientid,
                                 vtoaddress          => obj_email_data (1).to_email,
                                 vccaddress          => obj_email_data (1).to_ccemail,
                                 vbccaddress         => obj_email_data (1).to_bccemail,
                                 vsubject            => obj_email_data (1).email_subject,
                                 vbody               => EmailBody,
                                 vattachmenturl      => vmailattachement
                                );
                   */ 
               END IF;
            END IF;
         END LOOP; 
      END IF;
    END IF;

    IF obj_email_data.COUNT > 0 THEN
        IF EmailBody IS NOT NULL THEN
            p_mail_service (iclientid           => iclientid,
                         vtoaddress          => obj_email_data (1).to_email,
                         vccaddress          => obj_email_data (1).to_ccemail,
                         vbccaddress         => obj_email_data (1).to_bccemail,
                         vsubject            => obj_email_data (1).email_subject,
                         vbody               => EmailBody,
                         vattachmenturl      => vmailattachement
                        );
        END IF;

        IF ismsdefaultcontact IS NOT NULL AND vsmstemplate IS NOT NULL THEN 
            P_sea_sms_service (iclientid, ismsdefaultcontact, vsmstemplate); 
        END IF;
    END IF;

EXCEPTION
   WHEN OTHERS
   THEN
      raise_application_error (-20100, SUBSTR (SQLERRM, 1, 500) || DBMS_UTILITY.format_error_backtrace );
END p_send_mail;
/

ALTER TABLE T_DASHBOARD_WORKSPACE_SETTING ADD DASHBOARD_GROUP_ID NUMBER (10);

DROP TABLE T_GENERATE_METAL_LEDGER CASCADE CONSTRAINTS;

CREATE TABLE T_GENERATE_METAL_LEDGER
(
  SESSION_ID      NUMBER(10),
  DATA_MODE       VARCHAR2(10 BYTE),
  TYPE            VARCHAR2(10 BYTE),
  TRANS_ITEM_ID   NUMBER(10),
  PARTY_TYPE_ID   NUMBER(10),
  PARTY_ID        NUMBER(10),
  PARTY_NAME      VARCHAR2(250 BYTE),
  ENTRY_TYPE      CHAR(5 BYTE),
  TRANS_TYPE      VARCHAR2(3 BYTE),
  SUBTYPE         VARCHAR2(100 BYTE),
  TRANS_ID        NUMBER(10),
  DOC_NO          VARCHAR2(50 BYTE),
  TRANS_DATE      DATE,
  STYLE_VARIANT   VARCHAR2(100 BYTE),
  METAL_VARIANT   VARCHAR2(100 BYTE),
  FINENESS        NUMBER(20,7),
  QUANTITY        NUMBER(20,7),
  PG_WEIGHT       NUMBER(20,7),
  WASTAGE         NUMBER(20,7),
  WASTAGE_PG      NUMBER(20,7),
  TOTAL_PG        NUMBER(20,7),
  TRANS_AMOUNT    NUMBER(20,7),
  TRANS_CATEGORY  VARCHAR2(100 BYTE),
  LOCK_DATE       DATE,
  GROSS_WT        NUMBER(20,7),
  DIA_WT          NUMBER(20,7),
  CLS_WT          NUMBER(20,7),
  REMARK          VARCHAR2(500 BYTE),
  TRANS_REMARK    VARCHAR2(500 BYTE),
  ROW_IDENTITY    NUMBER(5),
  AMOUNT_1004     NUMBER(20,7),
  AMOUNT_1504     NUMBER(20,7),
  AMOUNT_1005     NUMBER(20,7),
  LABOUR_AMOUNT   NUMBER(20,7),
  VARIANT_ID      NUMBER(10)
)
TABLESPACE SEA_TB_MISC
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE
MONITORING;


DROP TABLE T_TEMP_METAL_LEDGER CASCADE CONSTRAINTS;

CREATE TABLE T_TEMP_METAL_LEDGER
(
  SESSION_ID         NUMBER(10),
  REP_TYPE           VARCHAR2(75 BYTE),
  ISSUE_TRANS_ID     NUMBER(10),
  TRANS_ID           NUMBER(10),
  BATCH_ID           NUMBER(10),
  PARTY_NAME         VARCHAR2(250 BYTE),
  DOC_NO             VARCHAR2(75 BYTE),
  TRANS_DATE         DATE,
  BATCH_NO           VARCHAR2(75 BYTE),
  ORDER_NO           VARCHAR2(75 BYTE),
  ORDER_PARTY        VARCHAR2(250 BYTE),
  VARIANT_NAME       VARCHAR2(4000 BYTE),
  WASTAGE            NUMBER(20,7),
  ISS_WT             NUMBER(20,7),
  REMOVE_WT          NUMBER(20,7),
  RTN_WT             NUMBER(20,7),
  DIA_WT             NUMBER(20,7),
  CLS_WT             NUMBER(20,7),
  OTH_WT             NUMBER(20,7),
  BROKEN_WT          NUMBER(20,7),
  RHODIUM_VAL        NUMBER(20,7),
  VAL                NUMBER(20,7),
  OTHERS_VAL         NUMBER,
  DESCRIPTION        VARCHAR2(75 BYTE),
  KT                 VARCHAR2(50 BYTE),
  METAL_WT           NUMBER(20,7),
  METAL_PG_WT        NUMBER(20,7),
  METAL_PG_995_WT    NUMBER(20,7),
  METAL_WASTAGE      NUMBER(20,7),
  METAL_WASTAGE_PG   NUMBER(20,7),
  METAL_WASTAGE_995  NUMBER(20,7),
  NET_RTN_WT         NUMBER(20,7),
  NET_RTN_PG_WT      NUMBER(20,7),
  NET_RTN_PG_995_WT  NUMBER(20,7)
)
TABLESPACE SEA_TB_MISC
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE
MONITORING;


DROP TABLE ORDER_STATUS_RC CASCADE CONSTRAINTS;

CREATE TABLE ORDER_STATUS_RC
(
  SESSION_ID          NUMBER(10),
  ROWNO               NUMBER(5),
  DOC_NO              VARCHAR2(50 BYTE),
  TRANS_DATE          DATE,
  BATCH_NO            VARCHAR2(50 BYTE),
  VARIANT_NAME        VARCHAR2(100 BYTE),
  ORDER_TYPE          VARCHAR2(20 BYTE),
  ITEM_GROUP          VARCHAR2(50 BYTE),
  PARENT_KARAT        VARCHAR2(100 BYTE),
  ORDER_KARAT         VARCHAR2(50 BYTE),
  ODRER_VARIANT_NAME  VARCHAR2(100 BYTE),
  STYLE_VARIANT       VARCHAR2(100 BYTE),
  ORDER_PCS           NUMBER(10)                DEFAULT (0),
  ORDER_WT            NUMBER(20,7)              DEFAULT (0),
  BAG_PCS             NUMBER(10)                DEFAULT (0),
  BAG_WT              NUMBER(20,7)              DEFAULT (0),
  RESERVE_PCS         NUMBER(10)                DEFAULT (0),
  RESERVE_WT          NUMBER(20,7)              DEFAULT (0),
  STOCK_PCS           NUMBER(10)                DEFAULT (0),
  STOCK_WT            NUMBER(20,7)              DEFAULT (0),
  DEPARTMENT          VARCHAR2(250 BYTE),
  WORKER              VARCHAR2(100 BYTE),
  TRANS_ID            NUMBER(10),
  TRANS_ITEM_ID       NUMBER(10),
  TRANS_ITEM_BOM_ID   NUMBER(10),
  BATCH_ID            NUMBER(10),
  VARIANT_ID          NUMBER(10),
  MAIN_BATCH_NO       VARCHAR2(50 BYTE),
  MAIN_BATCH_ID       VARCHAR2(50 BYTE)
)
TABLESPACE SEA_TB_MISC
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE
MONITORING;

DROP TABLE T_TAG_SORT CASCADE CONSTRAINTS;

CREATE TABLE T_TAG_SORT
(
  TRANS_ITEM_ID  NUMBER(10),
  SESSION_ID     NUMBER(10)
)
TABLESPACE SEA_TB_MISC
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE
MONITORING;

CREATE TABLE T_FA_TRANS_BILL_HDR_OTHERS
(
  FA_TRANS_BILL_ID        NUMBER(10),
  TRANS_TYPE              VARCHAR2(3 BYTE)      NOT NULL,
  TRANS_SUBTYPE_ID        NUMBER(10)            NOT NULL,
  TRANS_CATEGORY_LINK_ID  NUMBER(10)            NOT NULL,
  DOC_NO                  VARCHAR2(50 BYTE),
  TRANS_DATE              DATE                  NOT NULL,
  PARTY_ID                NUMBER(10),
  TERMS_ID                NUMBER(10),
  AWB_NO                  VARCHAR2(30 BYTE),
  BILL_NO                 VARCHAR2(100 BYTE),
  BILL_DATE               DATE,
  SHIPMENT_BILL_NO        VARCHAR2(200 BYTE),
  SHIPMENT_BILL_DATE      DATE,
  BANK_REF_NO             VARCHAR2(30 BYTE),
  GOLD_CERTIFICATE_DATE   DATE,
  YEAR_ID                 NUMBER(10),
  VOUCHER_NO              VARCHAR2(50 BYTE),
  FA_TRANS_DATE           DATE,
  REF_TRANS_ID            NUMBER(10)
)
TABLESPACE SEA_TB_FA
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE
MONITORING;


CREATE UNIQUE INDEX PK_FTBHO_FTBID ON T_FA_TRANS_BILL_HDR_OTHERS
(FA_TRANS_BILL_ID)
LOGGING
TABLESPACE SEA_TB_MISC
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );

ALTER TABLE T_FA_TRANS_BILL_HDR_OTHERS ADD (
  CONSTRAINT PK_FTBHO_FTBID
  PRIMARY KEY
  (FA_TRANS_BILL_ID)
  USING INDEX PK_FTBHO_FTBID
  ENABLE VALIDATE);

CREATE TABLE TMP_WT_AVG_VAL
(
  SR_NO             NUMBER,
  TRANS_ID          NUMBER,
  DOC_NO            VARCHAR2(50 BYTE),
  DOC_DATE          DATE,
  TYPE              VARCHAR2(4 BYTE),
  OP_MTL_WT         NUMBER,
  OP_DIA_PT_WT      NUMBER,
  OP_DIA_NPT_WT     NUMBER,
  OP_CLS_WT         NUMBER,
  OP_OTH_WT         NUMBER,
  OP_MTL_VAL        NUMBER,
  OP_DIA_PT_VAL     NUMBER,
  OP_DIA_NPT_VAL    NUMBER,
  OP_CLS_VAL        NUMBER,
  OP_OTH_VAL        NUMBER,
  PRI_MTL_WT        NUMBER,
  PRI_DIA_PT_WT     NUMBER,
  PRI_DIA_NPT_WT    NUMBER,
  PRI_CLS_WT        NUMBER,
  PRI_OTH_WT        NUMBER,
  PRI_MTL_VAL       NUMBER,
  PRI_DIA_PT_VAL    NUMBER,
  PRI_DIA_NPT_VAL   NUMBER,
  PRI_CLS_VAL       NUMBER,
  PRI_OTH_VAL       NUMBER,
  PRT_MTL_WT        NUMBER,
  PRT_DIA_PT_WT     NUMBER,
  PRT_DIA_NPT_WT    NUMBER,
  PRT_CLS_WT        NUMBER,
  PRT_OTH_WT        NUMBER,
  PRT_MTL_VAL       NUMBER,
  PRT_DIA_PT_VAL    NUMBER,
  PRT_DIA_NPT_VAL   NUMBER,
  PRT_CLS_VAL       NUMBER,
  PRT_OTH_VAL       NUMBER,
  INV_MTL_WT        NUMBER,
  INV_DIA_PT_WT     NUMBER,
  INV_DIA_NPT_WT    NUMBER,
  INV_CLS_WT        NUMBER,
  INV_OTH_WT        NUMBER,
  INV_MTL_VAL       NUMBER,
  INV_DIA_PT_VAL    NUMBER,
  INV_DIA_NPT_VAL   NUMBER,
  INV_CLS_VAL       NUMBER,
  INV_OTH_VAL       NUMBER,
  SRN_MTL_WT        NUMBER,
  SRN_DIA_PT_WT     NUMBER,
  SRN_DIA_NPT_WT    NUMBER,
  SRN_CLS_WT        NUMBER,
  SRN_OTH_WT        NUMBER,
  SRN_MTL_VAL       NUMBER,
  SRN_DIA_PT_VAL    NUMBER,
  SRN_DIA_NPT_VAL   NUMBER,
  SRN_CLS_VAL       NUMBER,
  SRN_OTH_VAL       NUMBER,
  RECO_MTL_WT       NUMBER,
  RECO_DIA_PT_WT    NUMBER,
  RECO_DIA_NPT_WT   NUMBER,
  RECO_CLS_WT       NUMBER,
  RECO_OTH_WT       NUMBER,
  RECO_MTL_VAL      NUMBER,
  RECO_DIA_PT_VAL   NUMBER,
  RECO_DIA_NPT_VAL  NUMBER,
  RECO_CLS_VAL      NUMBER,
  RECO_OTH_VAL      NUMBER,
  RFR_MTL_WT        NUMBER,
  RFR_MTL_VAL       NUMBER,
  LOSS_MTL_WT       NUMBER,
  LOSS_DIA_PT_WT    NUMBER,
  LOSS_DIA_NPT_WT   NUMBER,
  LOSS_CLS_WT       NUMBER,
  LOSS_OTH_WT       NUMBER,
  LOSS_MTL_VAL      NUMBER,
  LOSS_DIA_PT_VAL   NUMBER,
  LOSS_DIA_NPT_VAL  NUMBER,
  LOSS_CLS_VAL      NUMBER,
  LOSS_OTH_VAL      NUMBER,
  CL_MTL_WT         NUMBER,
  CL_DIA_PT_WT      NUMBER,
  CL_DIA_NPT_WT     NUMBER,
  CL_CLS_WT         NUMBER,
  CL_OTH_WT         NUMBER,
  CL_MTL_VAL        NUMBER,
  CL_DIA_PT_VAL     NUMBER,
  CL_DIA_NPT_VAL    NUMBER,
  CL_CLS_VAL        NUMBER,
  CL_OTH_VAL        NUMBER
)
TABLESPACE SEA_TB_MISC
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE
MONITORING;


DROP SEQUENCE SHOPPING_CART;

CREATE SEQUENCE SHOPPING_CART
  START WITH 1
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  NOCACHE
  ORDER;

CREATE TABLE T_DAILY_TRANS_ALL_FORMULA
(
  TRANS_ITEM_ID            NUMBER(10),
  FIRST_ROW                NUMBER(20,7)         DEFAULT (0),
  WHOLESALE                NUMBER(20,7)         DEFAULT (0),
  TROUNC                   NUMBER(20,7)         DEFAULT (0),
  "LOSS%"                  NUMBER(20,7)         DEFAULT (0),
  MKUP                     NUMBER(20,7)         DEFAULT (0),
  AMT                      NUMBER(20,7)         DEFAULT (0),
  RETFEE                   NUMBER(20,7)         DEFAULT (0),
  WHBEFALLOW               NUMBER(20,7)         DEFAULT (0),
  WHAFTALLOW               NUMBER(20,7)         DEFAULT (0),
  "GM%ATALLOW"             NUMBER(20,7)         DEFAULT (0),
  RETAIL                   NUMBER(20,7)         DEFAULT (0),
  CUSTGMPER                NUMBER(20,7)         DEFAULT (0),
  BASERATE                 NUMBER(20,7)         DEFAULT (0),
  "VAT%"                   NUMBER(20,7)         DEFAULT (0),
  VATAMT                   NUMBER(20,7)         DEFAULT (0),
  "TDS%"                   NUMBER(20,7)         DEFAULT (0),
  ITEMRATE                 NUMBER(20,7)         DEFAULT (0),
  DISC_SCHEM_PER           NUMBER(20,7)         DEFAULT (0),
  DISC                     NUMBER(20,7)         DEFAULT (0),
  COST                     NUMBER(20,7)         DEFAULT (0),
  "CLP-POINTS"             NUMBER(20,7)         DEFAULT (0),
  "CLP-REDEEM"             NUMBER(20,7)         DEFAULT (0),
  DEFVALUE                 NUMBER(20,7)         DEFAULT (0),
  GOLDLOSS                 NUMBER(20,7)         DEFAULT (0),
  GV                       NUMBER(20,7)         DEFAULT (0),
  DISC_SCHEM               NUMBER(20,7)         DEFAULT (0),
  RATEMARKUP               NUMBER(20,7)         DEFAULT (0),
  FA                       NUMBER(20,7)         DEFAULT (0),
  CASH                     NUMBER(20,7)         DEFAULT (0),
  URDPURCHASE              NUMBER(20,7)         DEFAULT (0),
  SAVINGWINNER             NUMBER(20,7)         DEFAULT (0),
  REDEMPTION               NUMBER(20,7)         DEFAULT (0),
  RECEIPTS                 NUMBER(20,7)         DEFAULT (0),
  BALANCE                  NUMBER(20,7)         DEFAULT (0),
  "ADDDISC%"               NUMBER(20,7)         DEFAULT (0),
  FRT                      NUMBER(20,7)         DEFAULT (0),
  EXCHANGE                 NUMBER(20,7)         DEFAULT (0),
  NETFOB                   NUMBER(20,7)         DEFAULT (0),
  "DISC%"                  NUMBER(20,7)         DEFAULT (0),
  ADDDISC                  NUMBER(20,7)         DEFAULT (0),
  DISC_TRADE               NUMBER(20,7)         DEFAULT (0),
  ADVANCE                  NUMBER(20,7)         DEFAULT (0),
  OGP                      NUMBER(20,7)         DEFAULT (0),
  SRN                      NUMBER(20,7)         DEFAULT (0),
  "Bank"                   NUMBER(20,7)         DEFAULT (0),
  "CreditCard"             NUMBER(20,7)         DEFAULT (0),
  "DebitCard"              NUMBER(20,7)         DEFAULT (0),
  "CreditAmount"           NUMBER(20,7)         DEFAULT (0),
  EDP                      NUMBER(20,7)         DEFAULT (0),
  SLDP                     NUMBER(20,7)         DEFAULT (0),
  CUSTOMRATE               NUMBER(20,7)         DEFAULT (0),
  TAX                      NUMBER(20,7)         DEFAULT (0),
  "VAT%-1"                 NUMBER(20,7)         DEFAULT (0),
  "VATAMT-1"               NUMBER(20,7)         DEFAULT (0),
  "VAT%-2"                 NUMBER(20,7)         DEFAULT (0),
  "VATAMT-2"               NUMBER(20,7)         DEFAULT (0),
  "VAT%-3"                 NUMBER(20,7)         DEFAULT (0),
  "VATAMT-3"               NUMBER(20,7)         DEFAULT (0),
  "EXCISE%"                NUMBER(20,7)         DEFAULT (0),
  EXDPO                    NUMBER(20,7)         DEFAULT (0),
  CSDP                     NUMBER(20,7)         DEFAULT (0),
  DPDP                     NUMBER(20,7)         DEFAULT (0),
  "CST%"                   NUMBER(20,7)         DEFAULT (0),
  "Profit%"                NUMBER(20,7)         DEFAULT (0),
  CBSP                     NUMBER(20,7)         DEFAULT (0),
  EDV                      NUMBER(20,7)         DEFAULT (0),
  SLDV                     NUMBER(20,7)         DEFAULT (0),
  EXDIV                    NUMBER(20,7)         DEFAULT (0),
  CSDV                     NUMBER(20,7)         DEFAULT (0),
  DPDV                     NUMBER(20,7)         DEFAULT (0),
  CBDAV                    NUMBER(20,7)         DEFAULT (0),
  CBDEP                    NUMBER(20,7)         DEFAULT (0),
  CBDEV                    NUMBER(20,7)         DEFAULT (0),
  "CST AMOUNT = 1"         NUMBER(20,7)         DEFAULT (0),
  CWP                      NUMBER(20,7)         DEFAULT (0),
  CWV                      NUMBER(20,7)         DEFAULT (0),
  AP                       NUMBER(20,7)         DEFAULT (0),
  BPP                      NUMBER(20,7)         DEFAULT (0),
  TCP                      NUMBER(20,7)         DEFAULT (0),
  TCV                      NUMBER(20,7)         DEFAULT (0),
  DDP                      NUMBER(20,7)         DEFAULT (0),
  DDV                      NUMBER(20,7)         DEFAULT (0),
  RCP                      NUMBER(20,7)         DEFAULT (0),
  RCV                      NUMBER(20,7)         DEFAULT (0),
  MCDP                     NUMBER(20,7)         DEFAULT (0),
  EXCISEDUTY               NUMBER(20,7)         DEFAULT (0),
  DISCAMT                  NUMBER(20,7)         DEFAULT (0),
  "SDDISC%"                NUMBER(20,7)         DEFAULT (0),
  SDDISCAMT                NUMBER(20,7)         DEFAULT (0),
  "SDPAC%"                 NUMBER(20,7)         DEFAULT (0),
  SDPACAMT                 NUMBER(20,7)         DEFAULT (0),
  CDNAGCHG                 NUMBER(20,7)         DEFAULT (0),
  CDNSSCHG                 NUMBER(20,7)         DEFAULT (0),
  CDNREIMB                 NUMBER(20,7)         DEFAULT (0),
  CDNWHFEES                NUMBER(20,7)         DEFAULT (0),
  CDNPKGCHG                NUMBER(20,7)         DEFAULT (0),
  CDNFRTCHG                NUMBER(20,7)         DEFAULT (0),
  CDNADDNFRTCHG            NUMBER(20,7)         DEFAULT (0),
  CDNAIRVALNCHG            NUMBER(20,7)         DEFAULT (0),
  CDNINSEXP                NUMBER(20,7)         DEFAULT (0),
  CDNASSYCHG               NUMBER(20,7)         DEFAULT (0),
  CDNWTCHG                 NUMBER(20,7)         DEFAULT (0),
  CDNFUELCHG               NUMBER(20,7)         DEFAULT (0),
  CDNBDBCHG                NUMBER(20,7)         DEFAULT (0),
  RATE                     NUMBER(20,7)         DEFAULT (0),
  "EXCISE AMOUNT"          NUMBER(20,7)         DEFAULT (0),
  "CST %-1"                NUMBER(20,7)         DEFAULT (0),
  DISC_RATE                NUMBER(20,7)         DEFAULT (0),
  CSTAMT                   NUMBER(20,7)         DEFAULT (0),
  "MRKUP%"                 NUMBER(20,7)         DEFAULT (0),
  "BROK%"                  NUMBER(20,7)         DEFAULT (0),
  BROKGROSSAMT             NUMBER(20,7)         DEFAULT (0),
  "BROKTDS%"               NUMBER(20,7)         DEFAULT (0),
  BROKNETAMT               NUMBER(20,7)         DEFAULT (0),
  "TCS%"                   NUMBER(20,7)         DEFAULT (0),
  FDV                      NUMBER(20,7)         DEFAULT (0),
  FORMULA_WASTAGE          NUMBER(20,7)         DEFAULT (0),
  "IGST1%"                 NUMBER(20,7)         DEFAULT (0),
  IGST1AMT                 NUMBER(20,7)         DEFAULT (0),
  "SGST1%"                 NUMBER(20,7)         DEFAULT (0),
  SGST1AMT                 NUMBER(20,7)         DEFAULT (0),
  "CGST1%"                 NUMBER(20,7)         DEFAULT (0),
  CGST1AMT                 NUMBER(20,7)         DEFAULT (0),
  ASSESSABLE               NUMBER(20,7)         DEFAULT (0),
  GST                      NUMBER(20,7)         DEFAULT (0),
  "CGST3%"                 NUMBER(20,7)         DEFAULT (0),
  CGST3AMT                 NUMBER(20,7)         DEFAULT (0),
  "MKUP-A"                 NUMBER(20,7)         DEFAULT (0),
  "GST%"                   NUMBER(20,7)         DEFAULT (0),
  GSTAMT                   NUMBER(20,7)         DEFAULT (0),
  ITEMTAX                  NUMBER(20,7)         DEFAULT (0),
  "VAT%-1.1"               NUMBER(20,7)         DEFAULT (0),
  "VAT -1.1 AMT"           NUMBER(20,7)         DEFAULT (0),
  "VAT%-4"                 NUMBER(20,7)         DEFAULT (0),
  "VATAMT-4"               NUMBER(20,7)         DEFAULT (0),
  "VAT%-5"                 NUMBER(20,7)         DEFAULT (0),
  "VATAMT-5"               NUMBER(20,7)         DEFAULT (0),
  "VAT%-8"                 NUMBER(20,7)         DEFAULT (0),
  "VAT-8 AMT"              NUMBER(20,7)         DEFAULT (0),
  "VAT%-12.5"              NUMBER(20,7)         DEFAULT (0),
  "VAT -12.5 AMT"          NUMBER(20,7)         DEFAULT (0),
  "VAT -1.2 AMT"           NUMBER(20,7)         DEFAULT (0),
  TAXABSORB                NUMBER(20,7)         DEFAULT (0),
  "VAT%-1.2"               NUMBER(20,7)         DEFAULT (0),
  "CST %-1.1"              NUMBER(20,7)         DEFAULT (0),
  "CST -1.1 AMT"           NUMBER(20,7)         DEFAULT (0),
  "CST %-2"                NUMBER(20,7)         DEFAULT (0),
  "CST AMOUNT = 2"         NUMBER(20,7)         DEFAULT (0),
  "CST %-12.5"             NUMBER(20,7)         DEFAULT (0),
  "CST -12.5 AMT"          NUMBER(20,7)         DEFAULT (0),
  "ITEM-PURITY"            NUMBER(20,7)         DEFAULT (0),
  DISD                     NUMBER(20,7)         DEFAULT (0),
  DISCSTO                  NUMBER(20,7)         DEFAULT (0),
  DISCMET                  NUMBER(20,7)         DEFAULT (0),
  DISCLAB                  NUMBER(20,7)         DEFAULT (0),
  CGSTAMT                  NUMBER(20,7)         DEFAULT (0),
  SGSTAMT                  NUMBER(20,7)         DEFAULT (0),
  IGSTAMT                  NUMBER(20,7)         DEFAULT (0),
  OVERCOST                 NUMBER(20,7)         DEFAULT (0),
  PAC                      NUMBER(20,7)         DEFAULT (0),
  CUSTOM_WEIGHT            NUMBER(20,7)         DEFAULT (0),
  "CGST%"                  NUMBER(20,7)         DEFAULT (0),
  "SGST%"                  NUMBER(20,7)         DEFAULT (0),
  "IGST%"                  NUMBER(20,7)         DEFAULT (0),
  IPBGST                   NUMBER(20,7)         DEFAULT (0),
  "REDEEMED CLP AMT"       NUMBER(20,7)         DEFAULT (0),
  "ROUNDOFF-CR"            NUMBER(20,7)         DEFAULT (0),
  "ROUNDOFF-DR"            NUMBER(20,7)         DEFAULT (0),
  AMTAFTTAX                NUMBER(20,7)         DEFAULT (0),
  TDV                      NUMBER(20,7)         DEFAULT (0),
  FORMULA_STONE_RATE       NUMBER(20,7)         DEFAULT (0),
  DISCALLOWED              NUMBER(20,7)         DEFAULT (0),
  DISCAPPLIED              NUMBER(20,7)         DEFAULT (0),
  STYLEDISAMT              NUMBER(20,7)         DEFAULT (0),
  IPBST                    NUMBER(20,7)         DEFAULT (0),
  OW                       NUMBER(20,7)         DEFAULT (0),
  OWC                      NUMBER(20,7)         DEFAULT (0),
  WASTAGEPER               NUMBER(20,7)         DEFAULT (0),
  ITEMDISC                 NUMBER(20,7)         DEFAULT (0),
  METALRATE                NUMBER(20,7)         DEFAULT (0),
  LOSS_PER                 NUMBER(20,7)         DEFAULT (0),
  ORIGMETALRATE            NUMBER(20,7)         DEFAULT (0),
  "CGST 1.5 AMT"           NUMBER(20,7)         DEFAULT (0),
  "SGST 1.5 AMT"           NUMBER(20,7)         DEFAULT (0),
  "IGST 3 AMOUNT"          NUMBER(20,7)         DEFAULT (0),
  "IGST 3.0%"              NUMBER(20,7)         DEFAULT (0),
  "CGST 1.5%"              NUMBER(20,7)         DEFAULT (0),
  "SGST 1.5%"              NUMBER(20,7)         DEFAULT (0),
  "SGST0.125 AMOUNT"       NUMBER(20,7)         DEFAULT (0),
  "SLG-STONE-RATE"         NUMBER(20,7)         DEFAULT (0),
  "SLG-USD-RATE"           NUMBER(20,7)         DEFAULT (0),
  "SLG-PUR-RAP-BACK"       NUMBER(20,7)         DEFAULT (0),
  "SLG-PSI-RAP-BACK"       NUMBER(20,7)         DEFAULT (0),
  "SLG-RAP-BACK-PER"       NUMBER(20,7)         DEFAULT (0),
  CERT                     NUMBER(20,7)         DEFAULT (0),
  AMTBFT                   NUMBER(20,7)         DEFAULT (0),
  OTHCOST                  NUMBER(20,7)         DEFAULT (0),
  CDNTERMCHG               NUMBER(20,7)         DEFAULT (0),
  INS                      NUMBER(20,7)         DEFAULT (0),
  "RETFEE%"                NUMBER(20,7)         DEFAULT (0),
  "DUTY%"                  NUMBER(20,7)         DEFAULT (0),
  OTHERCHARGES             NUMBER(20,7)         DEFAULT (0),
  "OTHCOST%"               NUMBER(20,7)         DEFAULT (0),
  CDNOTHCHG                NUMBER(20,7)         DEFAULT (0),
  "Handling"               NUMBER(20,7)         DEFAULT (0),
  "MEMO %"                 NUMBER(20,7)         DEFAULT (0),
  "PORTAL CHARGES"         NUMBER(20,7)         DEFAULT (0),
  DROPSHIP                 NUMBER(20,7)         DEFAULT (0),
  FINAL_RATE               NUMBER(20,7)         DEFAULT (0),
  "ShippingCost"           NUMBER(20,7)         DEFAULT (0),
  "COOP%"                  NUMBER(20,7)         DEFAULT (0),
  "CO-OP"                  NUMBER(20,7)         DEFAULT (0),
  DUTYAMT                  NUMBER(20,7)         DEFAULT (0),
  FOB                      NUMBER(20,7)         DEFAULT (0),
  ADVT                     NUMBER(20,7)         DEFAULT (0),
  CUST_CHRG                NUMBER(20,7)         DEFAULT (0),
  LOP                      NUMBER(20,7)         DEFAULT (0),
  ENGRAVING                NUMBER(20,7)         DEFAULT (0),
  HST                      NUMBER(20,7)         DEFAULT (0),
  PROAMT                   NUMBER(20,7)         DEFAULT (0),
  BROKTDSAMT               NUMBER(20,7)         DEFAULT (0),
  CUSTOM                   NUMBER(20,7)         DEFAULT (0),
  COMM                     NUMBER(20,7)         DEFAULT (0),
  CDNEUCHG                 NUMBER(20,7)         DEFAULT (0),
  SHIPTAX                  NUMBER(20,7)         DEFAULT (0),
  CDNOTHCHGPC              NUMBER(20,7)         DEFAULT (0),
  "OVERCOST%"              NUMBER(20,7)         DEFAULT (0),
  "MEMO AMOUNT"            NUMBER(20,7)         DEFAULT (0),
  "COMM%"                  NUMBER(20,7)         DEFAULT (0),
  HSTPER                   NUMBER(20,7)         DEFAULT (0),
  TOTAL_COST               NUMBER(20,7)         DEFAULT (0),
  "Return%"                NUMBER(20,7)         DEFAULT (0),
  PACKINGCHG               NUMBER(20,7)         DEFAULT (0),
  "CGST0.125 %"            NUMBER(20,7)         DEFAULT (0),
  "CGST0.125 AMOUNT"       NUMBER(20,7)         DEFAULT (0),
  BKCHG                    NUMBER(20,7)         DEFAULT (0),
  BKINT                    NUMBER(20,7)         DEFAULT (0),
  "IGST0.125 %"            NUMBER(20,7)         DEFAULT (0),
  "IGST0.125 AMOUNT"       NUMBER(20,7)         DEFAULT (0),
  "SGST0.125 %"            NUMBER(20,7)         DEFAULT (0),
  "FORMULA-ROW-1"          NUMBER(20,7)         DEFAULT (0),
  "IGST3%"                 NUMBER(20,7)         DEFAULT (0),
  SR                       NUMBER(20,7)         DEFAULT (0),
  IGST4AMT                 NUMBER(20,7)         DEFAULT (0),
  "AL-EXV"                 NUMBER(20,7)         DEFAULT (0),
  MARKUPPER                NUMBER(20,7)         DEFAULT (0),
  CASHDISC                 NUMBER(20,7)         DEFAULT (0),
  "IGST 28%"               NUMBER(20,7)         DEFAULT (0),
  "SGST 9%"                NUMBER(20,7)         DEFAULT (0),
  "CGST 6%"                NUMBER(20,7)         DEFAULT (0),
  OCTROI                   NUMBER(20,7)         DEFAULT (0),
  "SGST2%"                 NUMBER(20,7)         DEFAULT (0),
  SGST2AMT                 NUMBER(20,7)         DEFAULT (0),
  "SGST5%"                 NUMBER(20,7)         DEFAULT (0),
  "CGST 6 AMT"             NUMBER(20,7)         DEFAULT (0),
  "SGST4%"                 NUMBER(20,7)         DEFAULT (0),
  SGST4AMT                 NUMBER(20,7)         DEFAULT (0),
  "IGST4%"                 NUMBER(20,7)         DEFAULT (0),
  IGST2AMT                 NUMBER(20,7)         DEFAULT (0),
  IGST3AMT                 NUMBER(20,7)         DEFAULT (0),
  "IGST5%"                 NUMBER(20,7)         DEFAULT (0),
  "IGST 18%"               NUMBER(20,7)         DEFAULT (0),
  "SGST 9 AMT"             NUMBER(20,7)         DEFAULT (0),
  "SGST 6 AMT"             NUMBER(20,7)         DEFAULT (0),
  "MKTCost"                NUMBER(20,7)         DEFAULT (0),
  SGST5AMT                 NUMBER(20,7)         DEFAULT (0),
  "CGST5%"                 NUMBER(20,7)         DEFAULT (0),
  IGST5AMT                 NUMBER(20,7)         DEFAULT (0),
  "SGST 14%"               NUMBER(20,7)         DEFAULT (0),
  "CST%-13.5"              NUMBER(20,7)         DEFAULT (0),
  SGST3AMT                 NUMBER(20,7)         DEFAULT (0),
  "IGST2%"                 NUMBER(20,7)         DEFAULT (0),
  "SGST 2.5 AMT"           NUMBER(20,7)         DEFAULT (0),
  CGST5AMT                 NUMBER(20,7)         DEFAULT (0),
  "CGST 14 AMT"            NUMBER(20,7)         DEFAULT (0),
  "SGST 6%"                NUMBER(20,7)         DEFAULT (0),
  "IGST 12%"               NUMBER(20,7)         DEFAULT (0),
  "CGST4%"                 NUMBER(20,7)         DEFAULT (0),
  CGST2AMT                 NUMBER(20,7)         DEFAULT (0),
  "CGST 2.5%"              NUMBER(20,7)         DEFAULT (0),
  "CGST 14%"               NUMBER(20,7)         DEFAULT (0),
  "CGST 9%"                NUMBER(20,7)         DEFAULT (0),
  "CGST 9 AMT"             NUMBER(20,7)         DEFAULT (0),
  "CST -13.5 AMT"          NUMBER(20,7)         DEFAULT (0),
  "CGST2%"                 NUMBER(20,7)         DEFAULT (0),
  "SGST 2.5%"              NUMBER(20,7)         DEFAULT (0),
  "IGST 18 AMT"            NUMBER(20,7)         DEFAULT (0),
  "SGST 14 AMT"            NUMBER(20,7)         DEFAULT (0),
  "VAT%-13.5"              NUMBER(20,7)         DEFAULT (0),
  "VAT -13.5 AMT"          NUMBER(20,7)         DEFAULT (0),
  CGST4AMT                 NUMBER(20,7)         DEFAULT (0),
  "SGST3%"                 NUMBER(20,7)         DEFAULT (0),
  "CGST 2.5 AMT"           NUMBER(20,7)         DEFAULT (0),
  "IGST 28 AMT"            NUMBER(20,7)         DEFAULT (0),
  "IGST 12 AMT"            NUMBER(20,7)         DEFAULT (0),
  MCDA                     NUMBER(20,7)         DEFAULT (0),
  FORMULA_LABOUR           NUMBER(20,7)         DEFAULT (0),
  NETDIFF                  NUMBER(20,7)         DEFAULT (0),
  REFDOCNETPAY             NUMBER(20,7)         DEFAULT (0),
  DIFF_MINE_ORP2           NUMBER(20,7)         DEFAULT (0),
  AMTBEFTAX                NUMBER(20,7)         DEFAULT (0),
  DIFF_MINE_ORP1           NUMBER(20,7)         DEFAULT (0),
  "KFC%"                   NUMBER(20,7)         DEFAULT (0),
  KFCA                     NUMBER(20,7)         DEFAULT (0),
  "IGST 0.25%"             NUMBER(20,7)         DEFAULT (0),
  "IGST 0.25 AMT"          NUMBER(20,7)         DEFAULT (0),
  TDSAMT                   NUMBER(20,7)         DEFAULT (0),
  "IGST 5 AMOUNT"          NUMBER(20,7)         DEFAULT (0),
  "INW LOSS%"              NUMBER(20,7)         DEFAULT (0),
  HALLMARK                 NUMBER(20,7)         DEFAULT (0),
  COMPDISC                 NUMBER(20,7)         DEFAULT (0),
  GEMAMT1                  NUMBER(20,7)         DEFAULT (0),
  SETORDTAX                NUMBER(20,7)         DEFAULT (0),
  GEMAMT2                  NUMBER(20,7)         DEFAULT (0),
  "TDS 194 C - 2%"         NUMBER(20,7)         DEFAULT (0),
  "TDS 195 Amount"         NUMBER(20,7)         DEFAULT (0),
  "TDS 194 J"              NUMBER(20,7)         DEFAULT (0),
  "TDS 194 I Amount"       NUMBER(20,7)         DEFAULT (0),
  PREVOTHCHG               NUMBER(20,7)         DEFAULT (0),
  TCDA                     NUMBER(20,7)         DEFAULT (0),
  TPD                      NUMBER(20,7)         DEFAULT (0),
  "DAV-INDT"               NUMBER(20,7)         DEFAULT (0),
  WBD                      NUMBER(20,7)         DEFAULT (0),
  FINDINGAMT               NUMBER(20,7)         DEFAULT (0),
  "TDS 195"                NUMBER(20,7)         DEFAULT (0),
  "TDS 194 IA"             NUMBER(20,7)         DEFAULT (0),
  TCCV                     NUMBER(20,7)         DEFAULT (0),
  MCDV                     NUMBER(20,7)         DEFAULT (0),
  HALLMARKCHG              NUMBER(20,7)         DEFAULT (0),
  "GV-EDT"                 NUMBER(20,7)         DEFAULT (0),
  EDVA                     NUMBER(20,7)         DEFAULT (0),
  SDP                      NUMBER(20,7)         DEFAULT (0),
  METALAMT                 NUMBER(20,7)         DEFAULT (0),
  "TDS 194 C - 1% Amount"  NUMBER(20,7)         DEFAULT (0),
  "TDS 194 C - 1%"         NUMBER(20,7)         DEFAULT (0),
  "TDS 194 K Amount"       NUMBER(20,7)         DEFAULT (0),
  "TDS 194 H"              NUMBER(20,7)         DEFAULT (0),
  LABDISPER                NUMBER(20,7)         DEFAULT (0),
  TCSAMT                   NUMBER(20,7)         DEFAULT (0),
  "EXCHANGE%"              NUMBER(20,7)         DEFAULT (0),
  "TDS 194 C - 2% Amount"  NUMBER(20,7)         DEFAULT (0),
  "TDS 194 K"              NUMBER(20,7)         DEFAULT (0),
  "ST-DISCA"               NUMBER(20,7)         DEFAULT (0),
  MAKING                   NUMBER(20,7)         DEFAULT (0),
  MKTRATE                  NUMBER(20,7)         DEFAULT (0),
  PREVDISC                 NUMBER(20,7)         DEFAULT (0),
  DIAAMT                   NUMBER(20,7)         DEFAULT (0),
  STNAMT                   NUMBER(20,7)         DEFAULT (0),
  "TDS 194 J Amount"       NUMBER(20,7)         DEFAULT (0),
  "TDS 194 IA Amount"      NUMBER(20,7)         DEFAULT (0),
  "TDS 194 H Amount"       NUMBER(20,7)         DEFAULT (0),
  METALFINENESS            NUMBER(20,7)         DEFAULT (0),
  "FORMULA-ROW-2"          NUMBER(20,7)         DEFAULT (0),
  INSCHG                   NUMBER(20,7)         DEFAULT (0),
  FETCHORDTAX              NUMBER(20,7)         DEFAULT (0),
  LABDISAMT                NUMBER(20,7)         DEFAULT (0),
  "TDS 194 I"              NUMBER(20,7)         DEFAULT (0),
  "TDS 194 D Amount"       NUMBER(20,7)         DEFAULT (0),
  "TDS 194 D"              NUMBER(20,7)         DEFAULT (0),
  "FORMULA-ROW-3"          NUMBER(20,7)         DEFAULT (0),
  IRBGST                   NUMBER(20,7)         DEFAULT (0),
  MNTBGST                  NUMBER(20,7)         DEFAULT (0),
  "LABOUR-ADD_CHG"         NUMBER(20,7)         DEFAULT (0),
  "CLP-AMT"                NUMBER(20,7)         DEFAULT (0),
  PER                      NUMBER(20,7)         DEFAULT (0),
  CLP                      NUMBER(20,7)         DEFAULT (0)
)
TABLESPACE SEA_TB_MISC
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE
MONITORING;


CREATE INDEX PK_DAILY_TRANS_ALL_FORMULA ON T_DAILY_TRANS_ALL_FORMULA
(TRANS_ITEM_ID)
LOGGING
TABLESPACE LIVE_INDEX_2
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );

ALTER TABLE T_DAILY_TRANS_ALL_FORMULA ADD (
  CONSTRAINT PK_DTAF
  PRIMARY KEY
  (TRANS_ITEM_ID)
  USING INDEX PK_DAILY_TRANS_ALL_FORMULA
  ENABLE VALIDATE);

CREATE SEQUENCE SMRY_STOCK_MONTH_CLOSING
  START WITH 788
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  NOCACHE
  ORDER;

DROP SEQUENCE PGD_PARTY_WCGROUP_MAPPING;

CREATE SEQUENCE PGD_PARTY_WCGROUP_MAPPING
  START WITH 428
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  NOCACHE
  ORDER;

DROP SEQUENCE EXPOSURE_REG_CATEGORY_LINK;

CREATE SEQUENCE EXPOSURE_REG_CATEGORY_LINK
  START WITH 1
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  NOCACHE
  NOORDER;

CREATE SEQUENCE TRANS_ITEM_BOM_ATTRIB_DTL
  START WITH 1
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  NOCACHE
  ORDER;

CREATE SEQUENCE ADD_ALLOWABLE_DATA
  START WITH 1
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  NOCACHE
  NOORDER;


CREATE SEQUENCE TRANS_DEFAULT_REPORT_MAPPING
  START WITH 1
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  NOCACHE
  ORDER;

CREATE SEQUENCE TOURIST_DTL
  START WITH 5
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  NOCACHE
  ORDER;


CREATE TABLE T_LABOUR_N_PRICE_CONFIG
(
  FORMULA_TYPE  VARCHAR2(50 BYTE),
  COL_CONFIG    VARCHAR2(500 BYTE)
)
TABLESPACE SEA_TB_MISC
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE
MONITORING;


ALTER TABLE T_TRANS_ITEM_DTL_EXTD ADD SALES_PERSON_ID1 NUMBER (10);
ALTER TABLE T_TRANS_ITEM_BOM_DTL_EXTD ADD STOCK_CODE VARCHAR2 (100);
COMMIT;

DROP TABLE T_MOULD_OPERATION_MASTER CASCADE CONSTRAINTS;

CREATE TABLE T_MOULD_OPERATION_MASTER
(
  PK_ID          NUMBER(10),
  MOULD_ID       NUMBER(10),
  OPERATION_ID1  NUMBER(10),
  OPERATION_ID2  NUMBER(10),
  WEIGHT         NUMBER(23,5),
  RATE           NUMBER(23,5),
  REMARKS        VARCHAR2(200 BYTE),
  ROW_STATUS     NUMBER(1),
  TO_WT          NUMBER(23,5),
  TO_RATE        NUMBER(23,5),
  FROM_DATE      DATE,
  TO_DATE        DATE
)
TABLESPACE LIVE_DATA_4
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE
MONITORING;


CREATE UNIQUE INDEX PK_MOM ON T_MOULD_OPERATION_MASTER
(PK_ID)
LOGGING
TABLESPACE LIVE_DATA_4
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );

ALTER TABLE T_MOULD_OPERATION_MASTER ADD (
  CONSTRAINT PK_MOM
  PRIMARY KEY
  (PK_ID)
  USING INDEX PK_MOM
  ENABLE VALIDATE);

ALTER TABLE T_MOULD_OPERATION_MASTER ADD (
  CONSTRAINT FK_MUD_CD 
  FOREIGN KEY (MOULD_ID) 
  REFERENCES T_MISC_COMMON_DATA_MASTER (DATA_ID)
  ENABLE VALIDATE,
  CONSTRAINT FK_OP_OM 
  FOREIGN KEY (OPERATION_ID1) 
  REFERENCES T_OPERATION_MASTER (OPERATION_ID)
  ENABLE VALIDATE,
  CONSTRAINT FK_OP_OM2 
  FOREIGN KEY (OPERATION_ID2) 
  REFERENCES T_OPERATION_MASTER (OPERATION_ID)
  ENABLE VALIDATE);


DROP TABLE T_VARIANT_MAPPING CASCADE CONSTRAINTS;

CREATE TABLE T_VARIANT_MAPPING
(
  VARIANT_MAPPING_ID  NUMBER(10),
  VARIANT_ID1         NUMBER(10) CONSTRAINT NN_VM_VID1 NOT NULL,
  ITEM_GROUP_ID1      NUMBER(10) CONSTRAINT NN_VM_IGID1 NOT NULL,
  VARIANT_ID2         NUMBER(10) CONSTRAINT NN_VM_VID2 NOT NULL,
  ITEM_GROUP_ID2      NUMBER(10) CONSTRAINT NN_VM_IGID2 NOT NULL
)
TABLESPACE LIVE_DATA_4
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE
MONITORING;


CREATE UNIQUE INDEX PK_VM_VMID ON T_VARIANT_MAPPING
(VARIANT_MAPPING_ID)
LOGGING
TABLESPACE LIVE_DATA_4
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );

ALTER TABLE T_VARIANT_MAPPING ADD (
  CONSTRAINT PK_VM_VMID
  PRIMARY KEY
  (VARIANT_MAPPING_ID)
  USING INDEX PK_VM_VMID
  ENABLE VALIDATE);

ALTER TABLE T_VARIANT_MAPPING ADD (
  CONSTRAINT FK_VM_VID1_IVM 
  FOREIGN KEY (VARIANT_ID1) 
  REFERENCES T_ITEM_VARIANT_MASTER (VARIANT_ID)
  ENABLE VALIDATE);

CREATE TABLE T_DAILY_TRANS_ORDER_BOM
(
  TRANS_ITEM_BOM_ID    NUMBER(10),
  TRANS_ITEM_ID        NUMBER(10),
  BOM_VARIANT_ID       NUMBER(10),
  QUANTITY             NUMBER(20,7),
  CONVERSION_FACTOR    NUMBER(20,7),
  TRANS_BOM_RATE       NUMBER(20,7),
  TRANS_BOM_AMOUNT     NUMBER(20,7),
  ITEM_GROUP           VARCHAR2(50 BYTE),
  ITEM_NAME            VARCHAR2(100 BYTE),
  VARIANT_NAME         VARCHAR2(100 BYTE),
  ITEM_STOCK_UOM_CODE  VARCHAR2(3 BYTE),
  ITEM_TYPE_ID         NUMBER(10),
  ITEM_GROUP_ID        NUMBER(10),
  BASE_ITEM_GROUP_ID   NUMBER(10),
  FINENESS             NUMBER(23,5)
)
TABLESPACE SEA_TB_REPORTS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE
MONITORING;


CREATE INDEX IDX_DTOB ON T_DAILY_TRANS_ORDER_BOM
(TRANS_ITEM_BOM_ID)
LOGGING
TABLESPACE LIVE_INDEX_2
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );

ALTER TABLE T_DAILY_TRANS_ORDER_BOM ADD (
  CONSTRAINT PK_DTOB
  PRIMARY KEY
  (TRANS_ITEM_BOM_ID)
  USING INDEX IDX_DTOB
  ENABLE VALIDATE);


CREATE SEQUENCE REGION_LOCATION_MAPPING
  START WITH 3
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  NOCACHE
  ORDER;

CREATE TABLE T_IMPORT_EXCEL_TRANS
(
  ROW_NO                      NUMBER(10),
  CALLTYPE                    VARCHAR2(200 BYTE),
  COL1                        VARCHAR2(500 BYTE),
  COL2                        VARCHAR2(500 BYTE),
  COL3                        VARCHAR2(500 BYTE),
  COL4                        VARCHAR2(500 BYTE),
  COL5                        VARCHAR2(500 BYTE),
  COL6                        VARCHAR2(500 BYTE),
  COL7                        VARCHAR2(500 BYTE),
  COL8                        VARCHAR2(500 BYTE),
  COL9                        VARCHAR2(500 BYTE),
  COL10                       VARCHAR2(500 BYTE),
  COL11                       VARCHAR2(500 BYTE),
  COL12                       VARCHAR2(500 BYTE),
  COL13                       VARCHAR2(500 BYTE),
  COL14                       VARCHAR2(500 BYTE),
  COL15                       VARCHAR2(500 BYTE),
  COL16                       VARCHAR2(500 BYTE),
  COL17                       VARCHAR2(500 BYTE),
  COL18                       VARCHAR2(500 BYTE),
  COL19                       VARCHAR2(500 BYTE),
  COL20                       VARCHAR2(500 BYTE),
  COL21                       VARCHAR2(500 BYTE),
  COL22                       VARCHAR2(500 BYTE),
  COL23                       VARCHAR2(500 BYTE),
  COL24                       VARCHAR2(500 BYTE),
  COL25                       VARCHAR2(500 BYTE),
  COL26                       VARCHAR2(500 BYTE),
  COL27                       VARCHAR2(500 BYTE),
  COL28                       VARCHAR2(500 BYTE),
  COL29                       VARCHAR2(500 BYTE),
  COL30                       VARCHAR2(500 BYTE),
  COL31                       VARCHAR2(500 BYTE),
  COL32                       VARCHAR2(500 BYTE),
  COL33                       VARCHAR2(500 BYTE),
  COL34                       VARCHAR2(500 BYTE),
  COL35                       VARCHAR2(500 BYTE),
  COL36                       VARCHAR2(500 BYTE),
  COL37                       VARCHAR2(500 BYTE),
  COL38                       VARCHAR2(500 BYTE),
  COL39                       VARCHAR2(500 BYTE),
  COL40                       VARCHAR2(500 BYTE),
  COL41                       VARCHAR2(500 BYTE),
  COL42                       VARCHAR2(500 BYTE),
  COL43                       VARCHAR2(500 BYTE),
  COL44                       VARCHAR2(500 BYTE),
  COL45                       VARCHAR2(500 BYTE),
  COL46                       VARCHAR2(500 BYTE),
  COL47                       VARCHAR2(500 BYTE),
  COL48                       VARCHAR2(500 BYTE),
  COL49                       VARCHAR2(500 BYTE),
  COL50                       VARCHAR2(500 BYTE),
  COL51                       VARCHAR2(500 BYTE),
  COL52                       VARCHAR2(500 BYTE),
  COL53                       VARCHAR2(500 BYTE),
  COL54                       VARCHAR2(500 BYTE),
  COL55                       VARCHAR2(500 BYTE),
  COL56                       VARCHAR2(500 BYTE),
  COL57                       VARCHAR2(500 BYTE),
  COL58                       VARCHAR2(500 BYTE),
  COL59                       VARCHAR2(500 BYTE),
  COL60                       VARCHAR2(500 BYTE),
  COL61                       VARCHAR2(500 BYTE),
  COL62                       VARCHAR2(500 BYTE),
  COL63                       VARCHAR2(500 BYTE),
  COL64                       VARCHAR2(500 BYTE),
  COL65                       VARCHAR2(500 BYTE),
  VARIANT_ID                  NUMBER(10),
  REF_TRANS_ITEM_ID           NUMBER(10),
  ERROR_LOG                   VARCHAR2(2000 BYTE),
  DOC_NO                      VARCHAR2(50 BYTE),
  SESSION_ID                  NUMBER(10),
  PK_COL                      VARCHAR2(700 BYTE),
  REQUEST_ID                  NUMBER(10),
  REQUEST_DTL_ID              NUMBER(10),
  PARTY_ID                    NUMBER(10)        DEFAULT 0,
  CURRENCY_ID                 NUMBER(10)        DEFAULT 0,
  TRANS_CATEGORY_LINK_ID      NUMBER(10)        DEFAULT 0,
  CURRENCY_RATE_ID            NUMBER(10)        DEFAULT 0,
  EXCHANGE_RATE               NUMBER(34,16)     DEFAULT 0,
  TERMS_ID                    NUMBER(10)        DEFAULT 0,
  CONFIG_ID                   NUMBER(10)        DEFAULT 0,
  REF_PARTY_ID                NUMBER(10)        DEFAULT (0),
  REF_TRANS_CATEGORY_LINK_ID  NUMBER(10)        DEFAULT 0
)
TABLESPACE SEA_TB_MISC
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE
MONITORING;


CREATE OR REPLACE TRIGGER IMPORT_EXCEL_TRANS_ROW_A  
AFTER INSERT OR UPDATE OF COL3 ON T_IMPORT_EXCEL_TRANS FOR EACH ROW
DECLARE

BEGIN
	IF :new.terms_id <> :old.terms_id THEN
		--RAISE_APPLICATION_ERROR (-20100,SUBSTR(SQLERRM,1,500)||DBMS_UTILITY.FORMAT_ERROR_BACKTRACE);
		NULL;
	END IF;


EXCEPTION
    WHEN NO_DATA_FOUND THEN
        NULL;
    WHEN OTHERS THEN
        RAISE_APPLICATION_ERROR (-20999, SUBSTR(SQLERRM,1,500)||DBMS_UTILITY.FORMAT_ERROR_BACKTRACE);
END;
/

ALTER TABLE T_OPERATION_WCGROUP_LINK ADD WC_ID NUMBER (10);

CREATE SEQUENCE TEMP_ATTRIB_GROUP
  START WITH 3307
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  NOCACHE
  ORDER;

CREATE SEQUENCE TRANS_HDR_ACTIONS
  START WITH 1
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  NOCACHE
  ORDER;

CREATE TABLE T_MIGR_EXCEL_ORDER_ERROR_LOG
(
  SR_NO         NUMBER(10),
  ITEM_GROUP    VARCHAR2(50 BYTE),
  ITEM_NAME     VARCHAR2(100 BYTE),
  VARIANT_NAME  VARCHAR2(150 BYTE),
  DOC_NO        VARCHAR2(50 BYTE),
  ERROR_LOG     VARCHAR2(2000 BYTE),
  NEW_DOC_NO    VARCHAR2(50 BYTE)
)
TABLESPACE LIVE_DATA_4
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE
MONITORING;

CREATE TABLE T_DAILY_TRANS_PURCHASE
(
  TRANS_ID                NUMBER(10),
  TRANS_ITEM_ID           NUMBER(10),
  TRANS_TYPE              VARCHAR2(3 BYTE),
  TRANS_SUBTYPE_ID        NUMBER(10),
  TRANS_CATEGORY_LINK_ID  NUMBER(10),
  LOCATION_ID             NUMBER(10),
  YEAR_ID                 NUMBER(10),
  VERIFIED_IND            NUMBER(1),
  TRANS_DATE              DATE,
  DOC_NO                  VARCHAR2(50 BYTE),
  PARTY_ID                NUMBER(10),
  VARIANT_ID              NUMBER(10),
  SOR_TRANS_ID            NUMBER(10),
  SOR_TRANS_ITEM_ID       NUMBER(10),
  REF_TRANS_ITEM_ID       NUMBER(10),
  ITEM_GROUP              VARCHAR2(50 BYTE),
  ITEM_NAME               VARCHAR2(100 BYTE),
  VARIANT_NAME            VARCHAR2(100 BYTE),
  KARAT_COLOR             VARCHAR2(100 BYTE),
  ITEM_STOCK_UOM_CODE     VARCHAR2(3 BYTE),
  QUANTITY                NUMBER(20,7),
  CONVERSION_FACTOR       NUMBER(20,7),
  STOCK_VALUE             NUMBER(20,7),
  LABOUR_VALUE            NUMBER(20,7),
  TRANS_RATE              NUMBER(20,7),
  TRANS_AMOUNT            NUMBER(20,7),
  TRANS_ITEM_REMARK       VARCHAR2(1000 BYTE),
  ITEM_TYPE_ID            NUMBER(10),
  ITEM_GROUP_ID           NUMBER(10),
  BASE_ITEM_GROUP_ID      NUMBER(10),
  FINENESS                NUMBER(23,5),
  DEST_BATCH_ID           NUMBER(10),
  DEST_WC_ID              NUMBER(10),
  DEST_WCGROUP_ID         NUMBER(10),
  DEST_STOCK_ID           NUMBER(10),
  STOCK_STATUS_ID         NUMBER(10),
  STOCK_CODE              VARCHAR2(100 BYTE),
  OWNER_PARTY_ID          NUMBER(10),
  PIECES_1003             NUMBER(10)            DEFAULT 0,
  WEIGHT_1003             NUMBER(20,7)          DEFAULT 0,
  PG_WEIGHT_1003          NUMBER(20,7)          DEFAULT 0,
  VALUE_1003              NUMBER(20,7)          DEFAULT 0,
  AMOUNT_1003             NUMBER(20,7)          DEFAULT 0,
  WEIGHT_1004             NUMBER(20,7)          DEFAULT 0,
  PG_WEIGHT_1004          NUMBER(20,7)          DEFAULT 0,
  VALUE_1004              NUMBER(20,7)          DEFAULT 0,
  AMOUNT_1004             NUMBER(20,7)          DEFAULT 0,
  PIECES_1005             NUMBER(10)            DEFAULT 0,
  WEIGHT_1005             NUMBER(20,7)          DEFAULT 0,
  VALUE_1005              NUMBER(20,7)          DEFAULT 0,
  AMOUNT_1005             NUMBER(20,7)          DEFAULT 0,
  WEIGHT_1501             NUMBER(20,7)          DEFAULT 0,
  PG_WEIGHT_1501          NUMBER(20,7)          DEFAULT 0,
  VALUE_1501              NUMBER(20,7)          DEFAULT 0,
  AMOUNT_1501             NUMBER(20,7)          DEFAULT 0,
  WEIGHT_1502             NUMBER(20,7)          DEFAULT 0,
  PG_WEIGHT_1502          NUMBER(20,7)          DEFAULT 0,
  VALUE_1502              NUMBER(20,7)          DEFAULT 0,
  AMOUNT_1502             NUMBER(20,7)          DEFAULT 0,
  WEIGHT_1503             NUMBER(20,7)          DEFAULT 0,
  PG_WEIGHT_1503          NUMBER(20,7)          DEFAULT 0,
  VALUE_1503              NUMBER(20,7)          DEFAULT 0,
  AMOUNT_1503             NUMBER(20,7)          DEFAULT 0,
  PIECES_1504             NUMBER(10)            DEFAULT 0,
  WEIGHT_1504             NUMBER(20,7)          DEFAULT 0,
  VALUE_1504              NUMBER(20,7)          DEFAULT 0,
  AMOUNT_1504             NUMBER(20,7)          DEFAULT 0,
  WEIGHT_1520             NUMBER(20,7)          DEFAULT 0,
  WEIGHT_1701             NUMBER(20,7)          DEFAULT 0,
  VALUE_1701              NUMBER(20,7)          DEFAULT 0,
  AMOUNT_1701             NUMBER(20,7)          DEFAULT 0,
  WEIGHT_1702             NUMBER(20,7)          DEFAULT 0,
  VALUE_1702              NUMBER(20,7)          DEFAULT 0,
  AMOUNT_1702             NUMBER(20,7)          DEFAULT 0,
  WEIGHT_1719             NUMBER(20,7)          DEFAULT 0,
  VALUE_1719              NUMBER(20,7)          DEFAULT 0,
  AMOUNT_1719             NUMBER(20,7)          DEFAULT 0,
  PIECES_1539             NUMBER(10)            DEFAULT 0,
  WEIGHT_1539             NUMBER(20,7)          DEFAULT 0,
  VALUE_1539              NUMBER(20,7)          DEFAULT 0,
  AMOUNT_1539             NUMBER(20,7)          DEFAULT 0,
  PIECES_1505             NUMBER(10)            DEFAULT 0,
  WEIGHT_1505             NUMBER(20,7)          DEFAULT 0,
  VALUE_1505              NUMBER(20,7)          DEFAULT 0,
  AMOUNT_1505             NUMBER(20,7)          DEFAULT 0,
  PIECES_1506             NUMBER(10)            DEFAULT 0,
  WEIGHT_1506             NUMBER(20,7)          DEFAULT 0,
  VALUE_1506              NUMBER(20,7)          DEFAULT 0,
  AMOUNT_1506             NUMBER(20,7)          DEFAULT 0,
  PIECES_1510             NUMBER(10)            DEFAULT 0,
  WEIGHT_1510             NUMBER(20,7)          DEFAULT 0,
  VALUE_1510              NUMBER(20,7)          DEFAULT 0,
  AMOUNT_1510             NUMBER(20,7)          DEFAULT 0,
  PIECES_1511             NUMBER(10)            DEFAULT 0,
  WEIGHT_1511             NUMBER(20,7)          DEFAULT 0,
  VALUE_1511              NUMBER(20,7)          DEFAULT 0,
  AMOUNT_1511             NUMBER(20,7)          DEFAULT 0,
  PIECES_1563             NUMBER(10)            DEFAULT 0,
  WEIGHT_1563             NUMBER(20,7)          DEFAULT 0,
  VALUE_1563              NUMBER(20,7)          DEFAULT 0,
  AMOUNT_1563             NUMBER(20,7)          DEFAULT 0,
  PIECES_1747             NUMBER(10)            DEFAULT 0,
  WEIGHT_1747             NUMBER(20,7)          DEFAULT 0,
  VALUE_1747              NUMBER(20,7)          DEFAULT 0,
  AMOUNT_1747             NUMBER(20,7)          DEFAULT 0,
  PIECES_1750             NUMBER(10)            DEFAULT 0,
  WEIGHT_1750             NUMBER(20,7)          DEFAULT 0,
  VALUE_1750              NUMBER(20,7)          DEFAULT 0,
  AMOUNT_1750             NUMBER(20,7)          DEFAULT 0,
  PIECES_1751             NUMBER(10)            DEFAULT 0,
  WEIGHT_1751             NUMBER(20,7)          DEFAULT 0,
  VALUE_1751              NUMBER(20,7)          DEFAULT 0,
  AMOUNT_1751             NUMBER(20,7)          DEFAULT 0,
  PIECES_1725             NUMBER(10)            DEFAULT 0,
  WEIGHT_1725             NUMBER(20,7)          DEFAULT 0,
  VALUE_1725              NUMBER(20,7)          DEFAULT 0,
  AMOUNT_1725             NUMBER(20,7)          DEFAULT 0,
  PIECES_1749             NUMBER(10)            DEFAULT 0,
  WEIGHT_1749             NUMBER(20,7)          DEFAULT 0,
  VALUE_1749              NUMBER(20,7)          DEFAULT 0,
  AMOUNT_1749             NUMBER(20,7)          DEFAULT 0,
  PIECES_1752             NUMBER(10),
  WEIGHT_1752             NUMBER(20,7),
  VALUE_1752              NUMBER(20,7),
  AMOUNT_1752             NUMBER(20,7),
  PIECES_1509             NUMBER(10),
  WEIGHT_1509             NUMBER(20,7),
  VALUE_1509              NUMBER(20,7),
  AMOUNT_1509             NUMBER(20,7),
  PIECES_1739             NUMBER(10),
  WEIGHT_1739             NUMBER(20,7),
  VALUE_1739              NUMBER(20,7),
  AMOUNT_1739             NUMBER(20,7),
  WEIGHT_1875             NUMBER(20,7),
  VALUE_1875              NUMBER(20,7),
  AMOUNT_1875             NUMBER(20,7),
  WEIGHT_1876             NUMBER(20,7),
  VALUE_1876              NUMBER(20,7),
  AMOUNT_1876             NUMBER(20,7),
  PIECES_1866             NUMBER(10)            DEFAULT (0),
  WEIGHT_1866             NUMBER(20,7)          DEFAULT (0),
  PG_WEIGHT_1866          NUMBER(20,7)          DEFAULT (0),
  VALUE_1866              NUMBER(20,7)          DEFAULT (0),
  AMOUNT_1866             NUMBER(20,7)          DEFAULT (0),
  PIECES_1063             NUMBER(10)            DEFAULT (0),
  WEIGHT_1063             NUMBER(20,7)          DEFAULT (0),
  VALUE_1063              NUMBER(20,7)          DEFAULT (0),
  AMOUNT_1063             NUMBER(20,7)          DEFAULT (0),
  ROW_STATUS              NUMBER(1),
  S_STOCK_CODE            VARCHAR2(50 BYTE)
)
TABLESPACE SEA_TB_REPORTS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE
MONITORING;


CREATE INDEX IDX_DTPUR ON T_DAILY_TRANS_PURCHASE
(TRANS_ITEM_ID)
LOGGING
TABLESPACE LIVE_INDEX_2
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );

ALTER TABLE T_DAILY_TRANS_PURCHASE ADD (
  CONSTRAINT PK_DTPUR
  PRIMARY KEY
  (TRANS_ITEM_ID)
  USING INDEX IDX_DTPUR
  ENABLE VALIDATE);


CREATE TABLE T_DAILY_TRANS_PURCHASE_BOM
(
  TRANS_ITEM_BOM_ID      NUMBER(10),
  TRANS_ITEM_ID          NUMBER(10),
  BOM_VARIANT_ID         NUMBER(10),
  QUANTITY               NUMBER(20,7),
  CONVERSION_FACTOR      NUMBER(20,7),
  STOCK_VALUE            NUMBER(20,7),
  TRANS_BOM_RATE         NUMBER(20,7),
  TRANS_BOM_AMOUNT       NUMBER(20,7),
  ITEM_GROUP             VARCHAR2(50 BYTE),
  ITEM_NAME              VARCHAR2(100 BYTE),
  VARIANT_NAME           VARCHAR2(100 BYTE),
  ITEM_STOCK_UOM_CODE    VARCHAR2(3 BYTE),
  ITEM_TYPE_ID           NUMBER(10),
  ITEM_GROUP_ID          NUMBER(10),
  BASE_ITEM_GROUP_ID     NUMBER(10),
  FINENESS               NUMBER(23,5),
  SOR_TRANS_ITEM_BOM_ID  NUMBER(10),
  DEST_STOCK_BOM_ID      NUMBER(10),
  WASTAGE_PER            NUMBER(23,5)
)
TABLESPACE SEA_TB_REPORTS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE
MONITORING;


CREATE INDEX IDX_DTPB ON T_DAILY_TRANS_PURCHASE_BOM
(TRANS_ITEM_BOM_ID)
LOGGING
TABLESPACE LIVE_INDEX_2
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );

ALTER TABLE T_DAILY_TRANS_PURCHASE_BOM ADD (
  CONSTRAINT PK_DTPURB
  PRIMARY KEY
  (TRANS_ITEM_BOM_ID)
  USING INDEX IDX_DTPB
  ENABLE VALIDATE);

CREATE TABLE T_DAILY_TRANS_ORDER
(
  TRANS_ID                NUMBER(10),
  TRANS_ITEM_ID           NUMBER(10),
  TRANS_TYPE              VARCHAR2(3 BYTE),
  TRANS_SUBTYPE_ID        NUMBER(10),
  TRANS_CATEGORY_LINK_ID  NUMBER(10),
  LOCATION_ID             NUMBER(10),
  YEAR_ID                 NUMBER(10),
  VERIFIED_IND            NUMBER(1),
  VARIANT_ID              NUMBER(10),
  SOR_TRANS_ID            NUMBER(10),
  SOR_TRANS_ITEM_ID       NUMBER(10),
  REF_TRANS_ITEM_ID       NUMBER(10),
  TRANS_DATE              DATE,
  DOC_NO                  VARCHAR2(50 BYTE),
  PARTY_ID                NUMBER(10),
  LINE_NO                 VARCHAR2(150 BYTE),
  ITEM_GROUP              VARCHAR2(50 BYTE),
  ITEM_NAME               VARCHAR2(100 BYTE),
  VARIANT_NAME            VARCHAR2(100 BYTE),
  KARAT_COLOR             VARCHAR2(100 BYTE),
  ITEM_STOCK_UOM_CODE     VARCHAR2(3 BYTE),
  QUANTITY                NUMBER(20,7),
  CONVERSION_FACTOR       NUMBER(20,7),
  TRANS_RATE              NUMBER(20,7),
  TRANS_AMOUNT            NUMBER(20,7),
  TRANS_ITEM_REMARK       VARCHAR2(500 BYTE),
  ITEM_TYPE_ID            NUMBER(10),
  ITEM_GROUP_ID           NUMBER(10),
  BASE_ITEM_GROUP_ID      NUMBER(10),
  FINENESS                NUMBER(23,5),
  PIECES_1003             NUMBER(10)            DEFAULT 0,
  WEIGHT_1003             NUMBER(20,7)          DEFAULT 0,
  PG_WEIGHT_1003          NUMBER(20,7)          DEFAULT 0,
  AMOUNT_1003             NUMBER(20,7)          DEFAULT 0,
  WEIGHT_1004             NUMBER(20,7)          DEFAULT 0,
  PG_WEIGHT_1004          NUMBER(20,7)          DEFAULT 0,
  AMOUNT_1004             NUMBER(20,7)          DEFAULT 0,
  PIECES_1005             NUMBER(10)            DEFAULT 0,
  WEIGHT_1005             NUMBER(20,7)          DEFAULT 0,
  AMOUNT_1005             NUMBER(20,7)          DEFAULT 0,
  WEIGHT_1501             NUMBER(20,7)          DEFAULT 0,
  PG_WEIGHT_1501          NUMBER(20,7)          DEFAULT 0,
  AMOUNT_1501             NUMBER(20,7)          DEFAULT 0,
  WEIGHT_1502             NUMBER(20,7)          DEFAULT 0,
  PG_WEIGHT_1502          NUMBER(20,7)          DEFAULT 0,
  AMOUNT_1502             NUMBER(20,7)          DEFAULT 0,
  WEIGHT_1503             NUMBER(20,7)          DEFAULT 0,
  PG_WEIGHT_1503          NUMBER(20,7)          DEFAULT 0,
  AMOUNT_1503             NUMBER(20,7)          DEFAULT 0,
  PIECES_1504             NUMBER(10)            DEFAULT 0,
  WEIGHT_1504             NUMBER(20,7)          DEFAULT 0,
  AMOUNT_1504             NUMBER(20,7)          DEFAULT 0,
  WEIGHT_1520             NUMBER(20,7)          DEFAULT 0,
  WEIGHT_1701             NUMBER(20,7)          DEFAULT 0,
  AMOUNT_1701             NUMBER(20,7)          DEFAULT 0,
  WEIGHT_1702             NUMBER(20,7)          DEFAULT 0,
  AMOUNT_1702             NUMBER(20,7)          DEFAULT 0,
  WEIGHT_1719             NUMBER(20,7)          DEFAULT 0,
  AMOUNT_1719             NUMBER(20,7)          DEFAULT 0,
  PIECES_1539             NUMBER(10)            DEFAULT 0,
  WEIGHT_1539             NUMBER(20,7)          DEFAULT 0,
  AMOUNT_1539             NUMBER(20,7)          DEFAULT 0,
  PIECES_1505             NUMBER(10)            DEFAULT 0,
  WEIGHT_1505             NUMBER(20,7)          DEFAULT 0,
  AMOUNT_1505             NUMBER(20,7)          DEFAULT 0,
  PIECES_1506             NUMBER(10)            DEFAULT 0,
  WEIGHT_1506             NUMBER(20,7)          DEFAULT 0,
  AMOUNT_1506             NUMBER(20,7)          DEFAULT 0,
  PIECES_1510             NUMBER(10)            DEFAULT 0,
  WEIGHT_1510             NUMBER(20,7)          DEFAULT 0,
  AMOUNT_1510             NUMBER(20,7)          DEFAULT 0,
  PIECES_1511             NUMBER(10)            DEFAULT 0,
  WEIGHT_1511             NUMBER(20,7)          DEFAULT 0,
  AMOUNT_1511             NUMBER(20,7)          DEFAULT 0,
  PIECES_1563             NUMBER(10)            DEFAULT 0,
  WEIGHT_1563             NUMBER(20,7)          DEFAULT 0,
  AMOUNT_1563             NUMBER(20,7)          DEFAULT 0,
  PIECES_1747             NUMBER(10)            DEFAULT 0,
  WEIGHT_1747             NUMBER(20,7)          DEFAULT 0,
  AMOUNT_1747             NUMBER(20,7)          DEFAULT 0,
  PIECES_1750             NUMBER(10)            DEFAULT 0,
  WEIGHT_1750             NUMBER(20,7)          DEFAULT 0,
  AMOUNT_1750             NUMBER(20,7)          DEFAULT 0,
  PIECES_1751             NUMBER(10)            DEFAULT 0,
  WEIGHT_1751             NUMBER(20,7)          DEFAULT 0,
  AMOUNT_1751             NUMBER(20,7)          DEFAULT 0,
  PIECES_1725             NUMBER(10)            DEFAULT 0,
  WEIGHT_1725             NUMBER(20,7)          DEFAULT 0,
  AMOUNT_1725             NUMBER(20,7)          DEFAULT 0,
  PIECES_1749             NUMBER(10)            DEFAULT 0,
  WEIGHT_1749             NUMBER(20,7)          DEFAULT 0,
  AMOUNT_1749             NUMBER(20,7)          DEFAULT 0,
  PIECES_1752             NUMBER(10),
  WEIGHT_1752             NUMBER(20,7),
  AMOUNT_1752             NUMBER(20,7),
  PIECES_1509             NUMBER(10),
  WEIGHT_1509             NUMBER(20,7),
  AMOUNT_1509             NUMBER(20,7),
  PIECES_1739             NUMBER(10),
  WEIGHT_1739             NUMBER(20,7),
  AMOUNT_1739             NUMBER(20,7),
  WEIGHT_1875             NUMBER(20,7),
  AMOUNT_1875             NUMBER(20,7),
  WEIGHT_1876             NUMBER(20,7),
  AMOUNT_1876             NUMBER(20,7),
  PIECES_1866             NUMBER(10)            DEFAULT (0),
  WEIGHT_1866             NUMBER(20,7)          DEFAULT (0),
  PG_WEIGHT_1866          NUMBER(20,7)          DEFAULT (0),
  AMOUNT_1866             NUMBER(20,7)          DEFAULT (0),
  PIECES_1063             NUMBER(10)            DEFAULT (0),
  WEIGHT_1063             NUMBER(20,7)          DEFAULT (0),
  AMOUNT_1063             NUMBER(20,7)          DEFAULT (0),
  ROW_STATUS              NUMBER(1)
)
TABLESPACE SEA_TB_REPORTS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE
MONITORING;


CREATE INDEX IDX_DTO ON T_DAILY_TRANS_ORDER
(TRANS_ITEM_ID)
LOGGING
TABLESPACE LIVE_INDEX_2
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );

ALTER TABLE T_DAILY_TRANS_ORDER ADD (
  CONSTRAINT PK_DTO
  PRIMARY KEY
  (TRANS_ITEM_ID)
  USING INDEX IDX_DTO
  ENABLE VALIDATE);

CREATE TABLE T_DAILY_TRANS_SALES_BOM
(
  TRANS_ITEM_BOM_ID         NUMBER(10),
  TRANS_ITEM_ID             NUMBER(10),
  BOM_VARIANT_ID            NUMBER(10),
  QUANTITY                  NUMBER(20,7),
  CONVERSION_FACTOR         NUMBER(20,7),
  STOCK_VALUE               NUMBER(20,7),
  TRANS_BOM_RATE            NUMBER(20,7),
  TRANS_BOM_AMOUNT          NUMBER(20,7),
  ITEM_GROUP                VARCHAR2(50 BYTE),
  ITEM_NAME                 VARCHAR2(100 BYTE),
  VARIANT_NAME              VARCHAR2(100 BYTE),
  ITEM_STOCK_UOM_CODE       VARCHAR2(3 BYTE),
  ITEM_TYPE_ID              NUMBER(10),
  ITEM_GROUP_ID             NUMBER(10),
  BASE_ITEM_GROUP_ID        NUMBER(10),
  FINENESS                  NUMBER(23,5),
  PTRANS_ITEM_BOM_ID        NUMBER(10),
  INWARD_TRANS_ITEM_ID      NUMBER(10),
  SOR_TRANS_ITEM_BOM_ID     NUMBER(10),
  SRC_STOCK_BOM_ID          NUMBER(10),
  ROW_STATUS                NUMBER(1),
  WASTAGE_PER               NUMBER(23,5),
  INWARD_TRANS_ITEM_BOM_ID  NUMBER(10),
  ORG_METAL_RATE            NUMBER(23,5),
  APPLIED_METAL_RATE        NUMBER(23,5)
)
TABLESPACE SEA_TB_MISC
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE
MONITORING;


CREATE INDEX IDX_DTSB ON T_DAILY_TRANS_SALES_BOM
(TRANS_ITEM_BOM_ID)
LOGGING
TABLESPACE LIVE_INDEX_2
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );

ALTER TABLE T_DAILY_TRANS_SALES_BOM ADD (
  CONSTRAINT PK_DTSB
  PRIMARY KEY
  (TRANS_ITEM_BOM_ID)
  USING INDEX IDX_DTSB
  ENABLE VALIDATE);

CREATE TABLE T_DAILY_TRANS_TRANSFER
(
  TRANS_ID                NUMBER(10),
  TRANS_ITEM_ID           NUMBER(10),
  TRANS_TYPE              VARCHAR2(3 BYTE),
  TRANS_SUBTYPE_ID        NUMBER(10),
  TRANS_CATEGORY_LINK_ID  NUMBER(10),
  LOCATION_ID             NUMBER(10),
  REF_LOCATION_ID         NUMBER(10),
  YEAR_ID                 NUMBER(10),
  VERIFIED_IND            NUMBER(1),
  VARIANT_ID              NUMBER(10),
  SOR_TRANS_ID            NUMBER(10),
  SOR_TRANS_ITEM_ID       NUMBER(10),
  INWARD_TRANS_ITEM_ID    NUMBER(10),
  REF_TRANS_ITEM_ID       NUMBER(10),
  TRANS_DATE              DATE,
  DOC_NO                  VARCHAR2(50 BYTE),
  ITEM_GROUP              VARCHAR2(50 BYTE),
  ITEM_NAME               VARCHAR2(100 BYTE),
  VARIANT_NAME            VARCHAR2(100 BYTE),
  KARAT_COLOR             VARCHAR2(100 BYTE),
  ITEM_STOCK_UOM_CODE     VARCHAR2(3 BYTE),
  QUANTITY                NUMBER(20,7),
  CONVERSION_FACTOR       NUMBER(20,7),
  STOCK_VALUE             NUMBER(20,7),
  LABOUR_VALUE            NUMBER(20,7),
  ITEM_TYPE_ID            NUMBER(10),
  ITEM_GROUP_ID           NUMBER(10),
  BASE_ITEM_GROUP_ID      NUMBER(10),
  FINENESS                NUMBER(23,5),
  SRC_BATCH_ID            NUMBER(10),
  DEST_BATCH_ID           NUMBER(10),
  SRC_WC_ID               NUMBER(10),
  SRC_WCGROUP_ID          NUMBER(10),
  DEST_WC_ID              NUMBER(10),
  DEST_WCGROUP_ID         NUMBER(10),
  SRC_STOCK_ID            NUMBER(10),
  DEST_STOCK_ID           NUMBER(10),
  STOCK_STATUS_ID         NUMBER(10),
  STOCK_CODE              VARCHAR2(100 BYTE),
  SETTLED_IND             NUMBER(1),
  OWNER_PARTY_ID          NUMBER(10),
  PIECES_1003             NUMBER(10)            DEFAULT 0,
  WEIGHT_1003             NUMBER(20,7)          DEFAULT 0,
  PG_WEIGHT_1003          NUMBER(20,7)          DEFAULT 0,
  VALUE_1003              NUMBER(20,7)          DEFAULT 0,
  WEIGHT_1004             NUMBER(20,7)          DEFAULT 0,
  PG_WEIGHT_1004          NUMBER(20,7)          DEFAULT 0,
  VALUE_1004              NUMBER(20,7)          DEFAULT 0,
  PIECES_1005             NUMBER(10)            DEFAULT 0,
  WEIGHT_1005             NUMBER(20,7)          DEFAULT 0,
  VALUE_1005              NUMBER(20,7)          DEFAULT 0,
  WEIGHT_1501             NUMBER(20,7)          DEFAULT 0,
  PG_WEIGHT_1501          NUMBER(20,7)          DEFAULT 0,
  VALUE_1501              NUMBER(20,7)          DEFAULT 0,
  WEIGHT_1502             NUMBER(20,7)          DEFAULT 0,
  PG_WEIGHT_1502          NUMBER(20,7)          DEFAULT 0,
  VALUE_1502              NUMBER(20,7)          DEFAULT 0,
  WEIGHT_1503             NUMBER(20,7)          DEFAULT 0,
  PG_WEIGHT_1503          NUMBER(20,7)          DEFAULT 0,
  VALUE_1503              NUMBER(20,7)          DEFAULT 0,
  PIECES_1504             NUMBER(10)            DEFAULT 0,
  WEIGHT_1504             NUMBER(20,7)          DEFAULT 0,
  VALUE_1504              NUMBER(20,7)          DEFAULT 0,
  WEIGHT_1520             NUMBER(20,7)          DEFAULT 0,
  WEIGHT_1701             NUMBER(20,7)          DEFAULT 0,
  VALUE_1701              NUMBER(20,7)          DEFAULT 0,
  WEIGHT_1702             NUMBER(20,7)          DEFAULT 0,
  VALUE_1702              NUMBER(20,7)          DEFAULT 0,
  WEIGHT_1719             NUMBER(20,7)          DEFAULT 0,
  VALUE_1719              NUMBER(20,7)          DEFAULT 0,
  PIECES_1539             NUMBER(10)            DEFAULT 0,
  WEIGHT_1539             NUMBER(20,7)          DEFAULT 0,
  VALUE_1539              NUMBER(20,7)          DEFAULT 0,
  PIECES_1505             NUMBER(10)            DEFAULT 0,
  WEIGHT_1505             NUMBER(20,7)          DEFAULT 0,
  VALUE_1505              NUMBER(20,7)          DEFAULT 0,
  PIECES_1506             NUMBER(10)            DEFAULT 0,
  WEIGHT_1506             NUMBER(20,7)          DEFAULT 0,
  VALUE_1506              NUMBER(20,7)          DEFAULT 0,
  PIECES_1510             NUMBER(10)            DEFAULT 0,
  WEIGHT_1510             NUMBER(20,7)          DEFAULT 0,
  VALUE_1510              NUMBER(20,7)          DEFAULT 0,
  PIECES_1511             NUMBER(10)            DEFAULT 0,
  WEIGHT_1511             NUMBER(20,7)          DEFAULT 0,
  VALUE_1511              NUMBER(20,7)          DEFAULT 0,
  PIECES_1563             NUMBER(10)            DEFAULT 0,
  WEIGHT_1563             NUMBER(20,7)          DEFAULT 0,
  VALUE_1563              NUMBER(20,7)          DEFAULT 0,
  PIECES_1747             NUMBER(10)            DEFAULT 0,
  WEIGHT_1747             NUMBER(20,7)          DEFAULT 0,
  VALUE_1747              NUMBER(20,7)          DEFAULT 0,
  PIECES_1750             NUMBER(10)            DEFAULT 0,
  WEIGHT_1750             NUMBER(20,7)          DEFAULT 0,
  VALUE_1750              NUMBER(20,7)          DEFAULT 0,
  PIECES_1751             NUMBER(10)            DEFAULT 0,
  WEIGHT_1751             NUMBER(20,7)          DEFAULT 0,
  VALUE_1751              NUMBER(20,7)          DEFAULT 0,
  PIECES_1725             NUMBER(10)            DEFAULT 0,
  WEIGHT_1725             NUMBER(20,7)          DEFAULT 0,
  VALUE_1725              NUMBER(20,7)          DEFAULT 0,
  PIECES_1749             NUMBER(10)            DEFAULT 0,
  WEIGHT_1749             NUMBER(20,7)          DEFAULT 0,
  VALUE_1749              NUMBER(20,7)          DEFAULT 0,
  PIECES_1752             NUMBER(10),
  WEIGHT_1752             NUMBER(20,7),
  VALUE_1752              NUMBER(20,7),
  PIECES_1509             NUMBER(10),
  WEIGHT_1509             NUMBER(20,7),
  VALUE_1509              NUMBER(20,7),
  PIECES_1739             NUMBER(10),
  WEIGHT_1739             NUMBER(20,7),
  VALUE_1739              NUMBER(20,7),
  WEIGHT_1875             NUMBER(20,7),
  VALUE_1875              NUMBER(20,7),
  WEIGHT_1876             NUMBER(20,7),
  VALUE_1876              NUMBER(20,7),
  PIECES_1866             NUMBER(10)            DEFAULT (0),
  WEIGHT_1866             NUMBER(20,7)          DEFAULT (0),
  PG_WEIGHT_1866          NUMBER(20,7)          DEFAULT (0),
  VALUE_1866              NUMBER(20,7)          DEFAULT (0),
  PIECES_1063             NUMBER(10)            DEFAULT (0),
  WEIGHT_1063             NUMBER(20,7)          DEFAULT (0),
  VALUE_1063              NUMBER(20,7)          DEFAULT (0),
  ROW_STATUS              NUMBER(1)
)
TABLESPACE SEA_TB_REPORTS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE
MONITORING;


CREATE INDEX IDX_DTRN ON T_DAILY_TRANS_TRANSFER
(TRANS_ITEM_ID)
LOGGING
TABLESPACE LIVE_INDEX_2
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );

ALTER TABLE T_DAILY_TRANS_TRANSFER ADD (
  CONSTRAINT PK_DTRN
  PRIMARY KEY
  (TRANS_ITEM_ID)
  USING INDEX IDX_DTRN
  ENABLE VALIDATE);


CREATE TABLE T_DAILY_TRANS_TRANSFER_BOM
(
  TRANS_ITEM_BOM_ID      NUMBER(10),
  TRANS_ITEM_ID          NUMBER(10),
  BOM_VARIANT_ID         NUMBER(10),
  QUANTITY               NUMBER(20,7),
  CONVERSION_FACTOR      NUMBER(20,7),
  STOCK_VALUE            NUMBER(20,7),
  ITEM_GROUP             VARCHAR2(50 BYTE),
  ITEM_NAME              VARCHAR2(100 BYTE),
  VARIANT_NAME           VARCHAR2(100 BYTE),
  ITEM_STOCK_UOM_CODE    VARCHAR2(3 BYTE),
  ITEM_TYPE_ID           NUMBER(10),
  ITEM_GROUP_ID          NUMBER(10),
  BASE_ITEM_GROUP_ID     NUMBER(10),
  FINENESS               NUMBER(23,5),
  INWARD_TRANS_ITEM_ID   NUMBER(10),
  SOR_TRANS_ITEM_BOM_ID  NUMBER(10),
  SRC_STOCK_BOM_ID       NUMBER(10),
  DEST_STOCK_BOM_ID      NUMBER(10)
)
TABLESPACE SEA_TB_REPORTS
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE
MONITORING;


CREATE INDEX IDX_DTTB ON T_DAILY_TRANS_TRANSFER_BOM
(TRANS_ITEM_BOM_ID)
LOGGING
TABLESPACE LIVE_INDEX_2
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );

ALTER TABLE T_DAILY_TRANS_TRANSFER_BOM ADD (
  CONSTRAINT PK_DTTB
  PRIMARY KEY
  (TRANS_ITEM_BOM_ID)
  USING INDEX IDX_DTTB
  ENABLE VALIDATE);

CREATE SEQUENCE TEMP_ATTRIB_SUMMARY
  START WITH 616
  MAXVALUE 999999999999999999999999999
  MINVALUE 1
  NOCYCLE
  NOCACHE
  ORDER;

DROP TABLE T_PARTY_FEED_INFO CASCADE CONSTRAINTS;

CREATE TABLE T_PARTY_FEED_INFO
(
  PARTY_ID           NUMBER(10),
  CUSTOMER_NAME      VARCHAR2(75 BYTE),
  FTP_IP             VARCHAR2(75 BYTE),
  USER_NAME          VARCHAR2(75 BYTE),
  PWD                VARCHAR2(75 BYTE),
  PORT               VARCHAR2(75 BYTE),
  DEFAULT_FOLDER     VARCHAR2(75 BYTE),
  FILE_NAME          VARCHAR2(75 BYTE),
  COLUMN_LIST        VARCHAR2(4000 BYTE),
  GUID               VARCHAR2(255 BYTE)         DEFAULT (SYS_GUID()),
  STATUS             NUMBER(1)                  DEFAULT (1),
  RESERVE_STOCK_IND  NUMBER(1)                  DEFAULT (0),
  FTP_MODE           NUMBER(1)                  DEFAULT (1),
  LOCATION_ID        NUMBER(10)                 DEFAULT (0),
  WCGROUP_LIST       VARCHAR2(100 BYTE),
  EMAIL_ID_LIST      VARCHAR2(255 BYTE)
)
TABLESPACE LIVE_DATA_4
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE
MONITORING;


CREATE UNIQUE INDEX PK_PARTY_FEED_INFO ON T_PARTY_FEED_INFO
(PARTY_ID)
LOGGING
TABLESPACE SEA_TB_MISC
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );

ALTER TABLE T_PARTY_FEED_INFO ADD (
  CONSTRAINT PK_PARTY_FEED_INFO
  PRIMARY KEY
  (PARTY_ID)
  USING INDEX PK_PARTY_FEED_INFO
  ENABLE VALIDATE);

CREATE TABLE EXCEL_OPTION_MAPPING
(
  ROW_NO      NUMBER(10),
  CALLTYPE    VARCHAR2(200 BYTE),
  SESSION_ID  NUMBER(10),
  PK_COL      VARCHAR2(700 BYTE),
  COL1        VARCHAR2(500 BYTE),
  COL2        VARCHAR2(500 BYTE),
  COL3        VARCHAR2(500 BYTE),
  COL4        VARCHAR2(500 BYTE),
  COL5        VARCHAR2(500 BYTE),
  COL6        VARCHAR2(500 BYTE),
  COL7        VARCHAR2(500 BYTE),
  COL8        VARCHAR2(500 BYTE),
  COL9        VARCHAR2(500 BYTE),
  COL10       VARCHAR2(500 BYTE),
  COL11       VARCHAR2(500 BYTE),
  COL12       VARCHAR2(500 BYTE),
  COL13       VARCHAR2(500 BYTE),
  COL14       VARCHAR2(500 BYTE),
  COL15       VARCHAR2(500 BYTE),
  COL16       VARCHAR2(500 BYTE),
  COL17       VARCHAR2(500 BYTE),
  COL18       VARCHAR2(500 BYTE),
  COL19       VARCHAR2(500 BYTE),
  COL20       VARCHAR2(500 BYTE),
  COL21       VARCHAR2(500 BYTE),
  COL22       VARCHAR2(500 BYTE),
  COL23       VARCHAR2(500 BYTE),
  COL24       VARCHAR2(500 BYTE),
  COL25       VARCHAR2(500 BYTE),
  COL26       VARCHAR2(500 BYTE),
  COL27       VARCHAR2(500 BYTE),
  COL28       VARCHAR2(500 BYTE),
  COL29       VARCHAR2(500 BYTE),
  COL30       VARCHAR2(500 BYTE),
  ERROR_LOG   VARCHAR2(3000 BYTE),
  COL31       VARCHAR2(500 BYTE),
  COL32       VARCHAR2(500 BYTE),
  COL33       VARCHAR2(500 BYTE),
  COL34       VARCHAR2(500 BYTE),
  COL35       VARCHAR2(500 BYTE),
  COL36       VARCHAR2(500 BYTE),
  COL37       VARCHAR2(500 BYTE),
  COL38       VARCHAR2(500 BYTE),
  COL39       VARCHAR2(500 BYTE),
  COL40       VARCHAR2(500 BYTE),
  COL41       VARCHAR2(500 BYTE),
  COL42       VARCHAR2(500 BYTE),
  COL43       VARCHAR2(500 BYTE),
  COL44       VARCHAR2(500 BYTE),
  COL45       VARCHAR2(500 BYTE),
  COL46       VARCHAR2(500 BYTE),
  COL47       VARCHAR2(500 BYTE),
  COL48       VARCHAR2(500 BYTE),
  COL49       VARCHAR2(500 BYTE),
  COL50       VARCHAR2(500 BYTE),
  COL51       VARCHAR2(500 BYTE),
  COL52       VARCHAR2(500 BYTE),
  COL53       VARCHAR2(500 BYTE),
  COL54       VARCHAR2(500 BYTE),
  COL55       VARCHAR2(500 BYTE),
  COL56       VARCHAR2(500 BYTE),
  COL57       VARCHAR2(500 BYTE),
  COL58       VARCHAR2(500 BYTE),
  COL59       VARCHAR2(500 BYTE),
  COL60       VARCHAR2(500 BYTE),
  COL61       VARCHAR2(500 BYTE),
  COL62       VARCHAR2(500 BYTE),
  COL63       VARCHAR2(500 BYTE),
  COL64       VARCHAR2(500 BYTE),
  COL65       VARCHAR2(500 BYTE),
  COL66       VARCHAR2(500 BYTE),
  COL67       VARCHAR2(500 BYTE),
  COL68       VARCHAR2(500 BYTE),
  COL69       VARCHAR2(500 BYTE),
  COL70       VARCHAR2(500 BYTE),
  COL71       VARCHAR2(500 BYTE),
  COL72       VARCHAR2(500 BYTE),
  COL73       VARCHAR2(500 BYTE),
  COL74       VARCHAR2(500 BYTE),
  COL75       VARCHAR2(500 BYTE),
  COL76       VARCHAR2(500 BYTE),
  COL77       VARCHAR2(500 BYTE),
  COL78       VARCHAR2(500 BYTE),
  COL79       VARCHAR2(500 BYTE),
  COL80       VARCHAR2(500 BYTE),
  COL81       VARCHAR2(500 BYTE),
  COL82       VARCHAR2(500 BYTE),
  COL83       VARCHAR2(500 BYTE),
  COL84       VARCHAR2(500 BYTE),
  COL85       VARCHAR2(500 BYTE),
  COL86       VARCHAR2(500 BYTE),
  COL87       VARCHAR2(500 BYTE),
  COL88       VARCHAR2(500 BYTE),
  COL89       VARCHAR2(500 BYTE),
  COL90       VARCHAR2(500 BYTE),
  COL91       VARCHAR2(500 BYTE),
  COL92       VARCHAR2(500 BYTE),
  COL93       VARCHAR2(500 BYTE),
  COL94       VARCHAR2(500 BYTE),
  COL95       VARCHAR2(500 BYTE),
  COL96       VARCHAR2(500 BYTE),
  COL97       VARCHAR2(500 BYTE),
  COL98       VARCHAR2(500 BYTE),
  COL99       VARCHAR2(500 BYTE),
  COL100      VARCHAR2(500 BYTE),
  DUMMY       NUMBER(10)
)
TABLESPACE SEA_TB_MISC
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE
MONITORING;

CREATE TABLE T_MIGR_UPDATE_SHIPINGDAYS
(
  ROW_STATUS        VARCHAR2(1 BYTE),
  ITEM_NAME         VARCHAR2(100 BYTE),
  ITEM_DESC         VARCHAR2(100 BYTE),
  VARIANT_NAME      VARCHAR2(150 BYTE),
  OLD_VARIANT_NAME  VARCHAR2(100 BYTE),
  VARIANT_REMARK1   VARCHAR2(750 BYTE),
  SHIPPING_TYPE     VARCHAR2(100 BYTE),
  SHIPPING_DAYS     NUMBER(10),
  SHIPPING_DAYS_2   NUMBER(10),
  FINISHING_DETAIL  VARCHAR2(250 BYTE),
  REMARKS           VARCHAR2(750 BYTE),
  VARIANT_ID        NUMBER(10),
  ERROR_LOG         VARCHAR2(2000 BYTE)
)
TABLESPACE SEA_TB_MISC
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE
MONITORING;


CREATE TABLE T_MIGR_UPDATE_ATTRIB_DATA
(
  ROW_STATUS        VARCHAR2(3 BYTE),
  ITEM_NAME         VARCHAR2(100 BYTE),
  ITEM_DESC         VARCHAR2(100 BYTE),
  OLD_VARIANT_NAME  VARCHAR2(100 BYTE),
  VARIANT_NAME      VARCHAR2(150 BYTE),
  ATTR_11001        VARCHAR2(500 BYTE),
  ATTR_11002        VARCHAR2(500 BYTE),
  ATTR_11003        VARCHAR2(500 BYTE),
  ATTR_11011        VARCHAR2(500 BYTE),
  ATTR_11033        VARCHAR2(500 BYTE),
  ATTR_11073        VARCHAR2(500 BYTE),
  ATTR_11077        VARCHAR2(500 BYTE),
  ATTR_11116        VARCHAR2(500 BYTE),
  ATTR_11149        VARCHAR2(500 BYTE),
  ATTR_11163        VARCHAR2(500 BYTE),
  ATTR_11168        VARCHAR2(500 BYTE),
  ATTR_11192        VARCHAR2(500 BYTE),
  ATTR_11201        VARCHAR2(500 BYTE),
  ATTR_11322        VARCHAR2(500 BYTE),
  ATTR_11351        VARCHAR2(500 BYTE),
  ATTR_11355        VARCHAR2(500 BYTE),
  ATTR_11356        VARCHAR2(500 BYTE),
  ATTR_11384        VARCHAR2(500 BYTE),
  ATTR_11393        VARCHAR2(500 BYTE),
  VARIANT_ID        NUMBER(10),
  ITEM_ID           NUMBER(10),
  ERROR_LOG         VARCHAR2(2000 BYTE),
  ATTR_11001_ID     VARCHAR2(700 BYTE),
  ATTR_11002_ID     VARCHAR2(700 BYTE),
  ATTR_11003_ID     VARCHAR2(700 BYTE),
  ATTR_11011_ID     VARCHAR2(700 BYTE),
  ATTR_11033_ID     VARCHAR2(700 BYTE),
  ATTR_11073_ID     VARCHAR2(700 BYTE),
  ATTR_11077_ID     VARCHAR2(700 BYTE),
  ATTR_11116_ID     VARCHAR2(700 BYTE),
  ATTR_11149_ID     VARCHAR2(700 BYTE),
  ATTR_11163_ID     VARCHAR2(700 BYTE),
  ATTR_11168_ID     VARCHAR2(700 BYTE),
  ATTR_11192_ID     VARCHAR2(700 BYTE),
  ATTR_11201_ID     VARCHAR2(700 BYTE),
  ATTR_11322_ID     VARCHAR2(700 BYTE),
  ATTR_11351_ID     VARCHAR2(700 BYTE),
  ATTR_11355_ID     VARCHAR2(700 BYTE),
  ATTR_11356_ID     VARCHAR2(700 BYTE),
  ATTR_11384_ID     VARCHAR2(700 BYTE),
  ATTR_11393_ID     VARCHAR2(700 BYTE),
  ATTR_11010        VARCHAR2(500 BYTE),
  ATTR_11010_ID     VARCHAR2(700 BYTE),
  ATTR_11353        VARCHAR2(500 BYTE),
  ATTR_11353_ID     VARCHAR2(500 BYTE),
  ATTR_11470        VARCHAR2(500 BYTE),
  ATTR_11470_ID     VARCHAR2(500 BYTE),
  ATTR_11108        VARCHAR2(500 BYTE),
  ATTR_11108_ID     VARCHAR2(700 BYTE),
  ATTR_11193        VARCHAR2(500 BYTE),
  ATTR_11193_ID     VARCHAR2(700 BYTE),
  ATTR_11496        VARCHAR2(500 BYTE),
  ATTR_11496_ID     VARCHAR2(700 BYTE)
)
TABLESPACE SEA_TB_MISC
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE
MONITORING;


CREATE TABLE TMP_BAGGING_INV
(
  BAG_NO            VARCHAR2(50 BYTE),
  POINTER           NUMBER(11,5)                NOT NULL,
  VENDOR_PO         VARCHAR2(100 BYTE),
  QUANTITY          NUMBER(20,7),
  WT                NUMBER(20,7),
  TRANS_RATE        NUMBER(20,7),
  PBATCH_NO         VARCHAR2(50 BYTE),
  BUNCH_NO          VARCHAR2(50 BYTE),
  PBATCH_QTY        NUMBER(20,7),
  ORDER_NO          VARCHAR2(100 BYTE),
  PO_NO             VARCHAR2(100 BYTE),
  VARIANT_NAME      VARCHAR2(100 BYTE),
  OLD_VARIANT_NAME  VARCHAR2(100 BYTE),
  QUALITY           VARCHAR2(4000 BYTE),
  STN_COLOR         VARCHAR2(4000 BYTE),
  GRP               VARCHAR2(202 BYTE),
  LOT               VARCHAR2(50 BYTE),
  SESSION_ID        NUMBER(10)
)
TABLESPACE SEA_TB_MISC
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE
MONITORING;

ALTER TABLE T_STOCK_BATCH_PPC_DTL RENAME COLUMN ROUTIG_HRS TO ROUTING_HRS;

CREATE TABLE T_FORMULA_WASTAGE_N_LABOUR_BKP
(
  PK_ID                   NUMBER(10),
  FORMULA_TYPE            VARCHAR2(50 BYTE),
  ATTRIB_ID1              NUMBER(10),
  ATTRIB_ID2              NUMBER(10),
  ATTRIB_ID3              NUMBER(10),
  ATTRIB_ID4              NUMBER(10),
  ATTRIB_ID5              NUMBER(10),
  ATTRIB_ID6              NUMBER(10),
  ATTRIB_ID7              NUMBER(10),
  ATTRIB_ID8              NUMBER(10),
  ATTRIB_ID9              NUMBER(10),
  ATTRIB_ID10             NUMBER(10),
  VENDOR_ID               NUMBER(10),
  AVGWT                   NUMBER(20,7),
  FROMWT                  NUMBER(20,7),
  TOWT                    NUMBER(20,7),
  WASTAGE_PER             NUMBER(20,7),
  LABOUR_PER_PCS          NUMBER(20,7),
  LABOUR_PER_GM_NET       NUMBER(20,7),
  LABOUR_PER_GM_GR        NUMBER(20,7),
  MIN_PER                 NUMBER(20,7),
  MIN_LABOUR              NUMBER(20,7),
  AMOUNT                  NUMBER(20,7),
  DISCOUNT                NUMBER(20,7),
  PREMIUM                 NUMBER(20,7),
  TOT_METAL_WT            NUMBER(20,7),
  TOT_STONE_WT            NUMBER(20,7),
  TOT_DIA_WT              NUMBER(20,7),
  FROM_DATE               DATE,
  UPTO_DATE               DATE,
  ITEM_TYPE_ID            NUMBER(10),
  ITEM_GROUP_ID           NUMBER(10),
  SESSION_ID              NUMBER(10),
  AMOUNT_BUY              NUMBER(20,7)          DEFAULT 0,
  AMOUNT_SALE             NUMBER(20,7)          DEFAULT 0,
  AMOUNT_OMP              NUMBER(20,7)          DEFAULT 0,
  ATTRIB_ID_LIST          VARCHAR2(1000 BYTE),
  HIERARCHY_LEVEL         NUMBER(10),
  LOCATION_ID             NUMBER(10)            DEFAULT 0,
  FINENESS                NUMBER(20,7)          DEFAULT 0,
  ROW_STATUS              NUMBER(1)             DEFAULT 0,
  EMPLOYEE_ID             NUMBER(10)            DEFAULT 0,
  OPERATION_ID            NUMBER(10)            DEFAULT 0,
  FROM_VAL                NUMBER(23,5)          DEFAULT 0,
  UPTO_VAL                NUMBER(23,5)          DEFAULT 0,
  TRANS_CATEGORY_LINK_ID  NUMBER(10)            DEFAULT 0,
  PARTY_GROUP_ID          NUMBER(10)            DEFAULT 0,
  TOLERANCE_UP            NUMBER(20,7),
  TOLERANCE_DOWN          NUMBER(20,7)
)
TABLESPACE SEA_TB_MISC
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE
MONITORING;

CREATE TABLE T_MIGR_DESIGN_MASTER
(
  ROW_NO                NUMBER(10),
  DESIGN_NO             VARCHAR2(100 BYTE),
  IMAGE_FILE            VARCHAR2(200 BYTE),
  PRODUCT_TYPE          VARCHAR2(100 BYTE),
  STYLE_CATEGORY        VARCHAR2(100 BYTE),
  COLLECTION            VARCHAR2(100 BYTE),
  STYLE                 VARCHAR2(100 BYTE),
  STONE_NAME            VARCHAR2(100 BYTE),
  SHAPE                 VARCHAR2(100 BYTE),
  STONE_SIZE            VARCHAR2(100 BYTE),
  STONE_PCS             NUMBER(10),
  STONE_WT              NUMBER(20,7),
  SETTING_TYPE          VARCHAR2(100 BYTE),
  SETTING               VARCHAR2(100 BYTE),
  MOLD_NO               VARCHAR2(100 BYTE),
  MOLD_PCS              NUMBER(10),
  METAL_ITEM_GROUP      VARCHAR2(100 BYTE),
  METAL_KARAT           VARCHAR2(100 BYTE),
  METAL_COLOR           VARCHAR2(100 BYTE),
  METAL_WT              NUMBER(20,7),
  SET_VARIANT           VARCHAR2(100 BYTE),
  ERROR_LOG             VARCHAR2(2000 BYTE),
  DESIGN_ID             NUMBER(10),
  VARIANT_ID            NUMBER(10),
  PRODUCT_TYPE_ID       NUMBER(10),
  CATEGORY_ID           NUMBER(10),
  COLLECTION_ID         NUMBER(10),
  STYLE_ID              NUMBER(10),
  STONE_BOM_ID          NUMBER(10),
  STONE_ITEM_GROUP_ID   NUMBER(10),
  STONE_ITEM_ID         NUMBER(10),
  STONE_ITEM_CONFIG_ID  NUMBER(10),
  STONE_VARIANT_ID      NUMBER(10),
  STONE_SHAPE_ID        NUMBER(10),
  STONE_SIZE_ID         NUMBER(10),
  SETTING_ID            NUMBER(10),
  SETTING_TYPE_ID       NUMBER(10),
  MOLD_ID               NUMBER(10),
  METAL_BOM_ID          NUMBER(10),
  METAL_ITEM_GROUP_ID   NUMBER(10),
  METAL_ITEM_ID         NUMBER(10),
  METAL_ITEM_CONFIG_ID  NUMBER(10),
  METAL_VARIANT_ID      NUMBER(10),
  METAL_KARAT_ID        NUMBER(10),
  METAL_COLOR_ID        NUMBER(10),
  SET_VARIANT_ID        NUMBER(10)
)
TABLESPACE SEA_TB_MISC
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE
MONITORING;

CREATE TABLE TEMP_BAGGING_INV
(
  BAG_NO            VARCHAR2(50 BYTE),
  POINTER           NUMBER(11,5)                NOT NULL,
  VENDOR_PO         VARCHAR2(100 BYTE),
  QUANTITY          NUMBER(20,7),
  WT                NUMBER(20,7),
  TRANS_RATE        NUMBER(20,7),
  PBATCH_NO         VARCHAR2(50 BYTE),
  BUNCH_NO          VARCHAR2(50 BYTE),
  PBATCH_QTY        NUMBER(20,7),
  ORDER_NO          VARCHAR2(100 BYTE),
  PO_NO             VARCHAR2(100 BYTE),
  VARIANT_NAME      VARCHAR2(100 BYTE),
  OLD_VARIANT_NAME  VARCHAR2(100 BYTE),
  QUALITY           VARCHAR2(4000 BYTE),
  STN_COLOR         VARCHAR2(4000 BYTE),
  GRP               VARCHAR2(202 BYTE),
  LOT               VARCHAR2(50 BYTE),
  SESSION_ID        NUMBER(10)
)
TABLESPACE LIVE_DATA_4
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE
MONITORING;

CREATE TABLE T_LOG_CONFIG
(
  LOG_CONFIG_ID  NUMBER(10),
  CONFIG_TYPE    VARCHAR2(50 BYTE),
  CONFIG_NAME    VARCHAR2(500 BYTE),
  STATUS         NUMBER(1),
  PK_COLUMN      VARCHAR2(3000 BYTE),
  CLIENTID_IND   NUMBER(1),
  COLUMN_NAME    VARCHAR2(3200 BYTE)
)
TABLESPACE LIVE_DATA_4
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE
MONITORING;


CREATE UNIQUE INDEX UNQ_TABLE ON T_LOG_CONFIG
(CONFIG_TYPE, CONFIG_NAME)
LOGGING
TABLESPACE LIVE_DATA_4
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );

ALTER TABLE T_LOG_CONFIG ADD (
  CONSTRAINT UNQ_TABLE
  UNIQUE (CONFIG_TYPE, CONFIG_NAME)
  USING INDEX UNQ_TABLE
  ENABLE VALIDATE);

CREATE TABLE T_CREATE_GRN_EXCEL
(
  SR_NO                  NUMBER(10),
  ROW_NO                 NUMBER(10),
  ITEM_GROUP             VARCHAR2(50 BYTE),
  VARIANT_NAME           VARCHAR2(100 BYTE),
  PIECES                 NUMBER(10),
  WEIGHT                 NUMBER(20,7),
  CONVERSION_FACTOR      NUMBER(20,7),
  RATE                   NUMBER(20,7),
  CURRENCY               VARCHAR2(20 BYTE),
  STOCK_LOCATION         VARCHAR2(50 BYTE),
  STOCK_WCGROUP          VARCHAR2(50 BYTE),
  VENDOR_BILL_NO         VARCHAR2(50 BYTE),
  VENDOR_BILL_DATE       VARCHAR2(50 BYTE),
  SHIP_NO                VARCHAR2(50 BYTE),
  COMMISSION             NUMBER(20,7),
  FREIGHT                NUMBER(20,7),
  INSURANCE              NUMBER(20,7),
  DISCOUNT               NUMBER(20,7),
  DEDCUTION              NUMBER(20,7),
  DUTY                   NUMBER(20,7),
  ITEM_REMARKS           VARCHAR2(1500 BYTE),
  VENDOR_CODE            VARCHAR2(50 BYTE),
  SALES_ORDER_NO         VARCHAR2(50 BYTE),
  LINE_NO                VARCHAR2(150 BYTE),
  PURCHASE_ORDER_NO      VARCHAR2(50 BYTE),
  STOCK_REMARKS          VARCHAR2(255 BYTE),
  ERROR_LOG              VARCHAR2(2000 BYTE),
  ITEM_TYPE_ID           NUMBER(10),
  ITEM_STOCK_UOM         VARCHAR2(30 BYTE),
  TRANS_ID               NUMBER(10),
  TRANS_ITEM_ID          NUMBER(10),
  TRANS_ITEM_BOM_ID      NUMBER(10),
  SOR_TRANS_ID           NUMBER(10),
  SOR_TRANS_ITEM_ID      NUMBER(10),
  SOR_TRANS_ITEM_BOM_ID  NUMBER(10),
  REF_TRANS_ITEM_ID      NUMBER(10),
  ITEM_NATURE_ID         NUMBER(10),
  MAIN_VARIANT_ID        VARCHAR2(10 BYTE),
  PARENT_VARIANT_ID      VARCHAR2(10 BYTE),
  BOM_LEVEL              VARCHAR2(3 BYTE),
  BOM_SET_NO             VARCHAR2(6 BYTE),
  PARENT_SET_NO          VARCHAR2(6 BYTE),
  VARIANT_ID             NUMBER(10),
  STOCK_ID               NUMBER(10),
  STOCK_BOM_ID           NUMBER(10),
  ITEM_CONFIG_ID         NUMBER(10),
  ITEM_ID                NUMBER(10),
  WASTAGE_PER            NUMBER(6,2),
  NET_WT                 NUMBER(20,7),
  LOCATION_ID            NUMBER(10),
  WCGROUP_ID             NUMBER(10),
  WC_ID                  NUMBER(10),
  VENDOR_ID              NUMBER(10),
  CURRENCY_RATE_ID       NUMBER(10),
  EXCHANGE_RATE          NUMBER(34,16),
  DOC_NO                 VARCHAR2(50 BYTE)
)
TABLESPACE SEA_TB_MISC
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE
MONITORING;


CREATE TABLE T_TRANS_HDR_DISPATCH_DTL
(
  TRANS_ID         NUMBER(10),
  IN_DATE          DATE,
  IN_TIME          VARCHAR2(100 BYTE),
  IN_GR_WT         NUMBER(23,5)                 DEFAULT (0),
  TRANSPORTER      VARCHAR2(100 BYTE),
  DRIVER_NAME      VARCHAR2(100 BYTE),
  TRUCK_NO         VARCHAR2(100 BYTE),
  IN_REF_TRANS_ID  NUMBER(10),
  DRIVER_M_NO      VARCHAR2(100 BYTE),
  REMARK1          VARCHAR2(2500 BYTE),
  PARTY            VARCHAR2(100 BYTE),
  ITEM             VARCHAR2(100 BYTE),
  WEIGHT           VARCHAR2(100 BYTE),
  REF_DOC_NO       VARCHAR2(100 BYTE),
  RST_NO           VARCHAR2(100 BYTE),
  SECURITY_NAME    VARCHAR2(100 BYTE),
  OUT_DATE         DATE,
  OUT_TIME         VARCHAR2(100 BYTE),
  OUT_GR_WT        NUMBER(23,5),
  TARE_WT          NUMBER(23,5),
  NO_OF_BAGS       NUMBER(10),
  IN_LOCATION_ID   NUMBER(10),
  LOADED_TRUCK_WT  NUMBER(23,5)                 DEFAULT (0)
)
TABLESPACE SEA_TB_MISC
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE
MONITORING;


CREATE UNIQUE INDEX PK_TRANS_HDR_DISPATCH_DTL ON T_TRANS_HDR_DISPATCH_DTL
(TRANS_ID)
LOGGING
TABLESPACE SEA_TB_MISC
PCTFREE    10
INITRANS   2
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           );

ALTER TABLE T_TRANS_HDR_DISPATCH_DTL ADD (
  CONSTRAINT PK_TRANS_HDR_DISPATCH_DTL
  PRIMARY KEY
  (TRANS_ID)
  USING INDEX PK_TRANS_HDR_DISPATCH_DTL
  ENABLE VALIDATE);

CREATE TABLE T_MIGR_VARIANTS_ATTRIB_SMRY
(
  VARIANT_ID  NUMBER(10)
)
TABLESPACE SEA_TB_MISC
PCTUSED    0
PCTFREE    10
INITRANS   1
MAXTRANS   255
STORAGE    (
            INITIAL          64K
            NEXT             1M
            MINEXTENTS       1
            MAXEXTENTS       UNLIMITED
            PCTINCREASE      0
            BUFFER_POOL      DEFAULT
           )
LOGGING 
NOCOMPRESS 
NOCACHE
MONITORING;
